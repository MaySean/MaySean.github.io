<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开发环境搭建</title>
      <link href="/dev-env-build/"/>
      <url>/dev-env-build/</url>
      
        <content type="html"><![CDATA[<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><h2 id="基于-docker-搭建"><a href="#基于-docker-搭建" class="headerlink" title="基于 docker 搭建"></a>基于 docker 搭建</h2><blockquote><p>在搭建开发环境之前先创建一个网络，用于容器之间的互相通信</p></blockquote><h3 id="network"><a href="#network" class="headerlink" title="network"></a>network</h3><p>创建一个网络，用于容器之间的互相通信</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create con-net</span><br></pre></td></tr></table></figure><p>查看名为 <code>con-net</code> 的 docker 网络的详细信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect con-net</span><br></pre></td></tr></table></figure><h3 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nacos --net con-net -e MODE=standalone -p 8848:8848 -d nacos/nacos-server:2.0.2</span><br></pre></td></tr></table></figure><h3 id="mysql-8-0-23"><a href="#mysql-8-0-23" class="headerlink" title="mysql 8.0.23"></a>mysql 8.0.23</h3><p>新增一个 <code>mysql</code> 数据卷，目录可如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/mysql</span><br></pre></td></tr></table></figure><p>命令示例（不需要执行）：如果现在我们要运行一个 <code>mysql</code> 的容器，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql \</span><br><span class="line">--net con-net \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /opt/mysql/conf/my.cnf:/etc/mysql/my.cnf \</span><br><span class="line">-v /opt/mysql/data:/var/lib/mysql \  </span><br><span class="line">-v /opt/mysql/logs:/logs \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:8.0.23</span><br></pre></td></tr></table></figure><p>命令释义：<code>docker run -v 宿主机目录或文件目录:容器内要挂载的文件目录</code></p><blockquote><p>注意：运行容器时，如果存在数据卷挂载，最好确保宿主机目录或文件目录存在</p></blockquote><p>宿主机目录或文件目录与容器内要挂载的文件目录有三个对应关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-v /opt/mysql/conf/my.cnf:/etc/mysql/my.cnf</span><br><span class="line">-v /opt/mysql/data:/var/lib/mysql</span><br><span class="line">-v /opt/mysql/logs:/logs</span><br></pre></td></tr></table></figure><blockquote><p>对于第一个挂载类型为文件挂载，如果宿主机文件目录不存在文件，会运行失败</p></blockquote><p>对于第一个，我们可以把容器内的文件复制到宿主机上</p><p>先运行一个临时容器，不进行数据卷挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:8.0.23</span><br></pre></td></tr></table></figure><p>使用一下命令把容器内的文件复制到宿主机上</p><p>先创建文件目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/mysql/conf</span><br><span class="line">mkdir -p /opt/mysql/data</span><br><span class="line">mkdir -p /opt/mysql/logs</span><br></pre></td></tr></table></figure><p>执行复制命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp mysql:/etc/mysql/my.cnf /opt/mysql/conf/my.cnf</span><br></pre></td></tr></table></figure><p>vim 修改 my.cnf，在最后一行添加时区配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default-time-zone=<span class="string">&#x27;+08:00&#x27;</span></span><br></pre></td></tr></table></figure><p>修改后的 my.cnf</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">pid-file        = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock</span><br><span class="line">datadir         = /var/lib/mysql</span><br><span class="line">secure-file-priv= NULL</span><br><span class="line"></span><br><span class="line">!includedir /etc/mysql/conf.d/</span><br><span class="line"></span><br><span class="line">default-time-zone=<span class="string">&#x27;+08:00&#x27;</span></span><br></pre></td></tr></table></figure><p>删除运行的临时容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f mysql</span><br></pre></td></tr></table></figure><p>运行带容器卷目录挂载的命令</p><p><code>--lower-case-table-names=1</code> 此参数为忽略表名大小写配置，只有在首次创建 mysql 容器时有效</p><p>如果已经存在库表则需要对库表数据备份，删除 &#x2F;opt&#x2F;mysql&#x2F;data 文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql \</span><br><span class="line">--net con-net \</span><br><span class="line">--restart=always \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /opt/mysql/conf/my.cnf:/etc/mysql/my.cnf \</span><br><span class="line">-v /opt/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /opt/mysql/logs:/logs \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:8.0.23 --lower-case-table-names=1</span><br></pre></td></tr></table></figure><h3 id="seata-1-7-0"><a href="#seata-1-7-0" class="headerlink" title="seata 1.7.0"></a>seata 1.7.0</h3><p>简单的启动一个 seata</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --net con-net --name seata-server -p 8091:8091 seataio/seata-server:1.7.0</span><br></pre></td></tr></table></figure><p>拷贝 seata 容器内部文件到宿主机目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> seata-server:/seata-server/resources /opt/seata-server</span><br></pre></td></tr></table></figure><p>停止并关闭 seata 服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f seata-server</span><br></pre></td></tr></table></figure><p>使用 <code>tree</code> 命令查看 <code>/opt/seata/resources</code> 目录结构</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -L 1</span><br></pre></td></tr></table></figure><blockquote><p>如果提示 -bash: tree: 未找到命令，则需要安装；使用 yum install tree 命令安装</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── application.example.yml</span><br><span class="line">├── application.yml</span><br><span class="line">├── banner.txt</span><br><span class="line">├── io</span><br><span class="line">├── logback</span><br><span class="line">├── logback-spring.xml</span><br><span class="line">├── lua</span><br><span class="line">├── META-INF</span><br><span class="line">├── README.md</span><br><span class="line">└── README-zh.md</span><br></pre></td></tr></table></figure><p>参考 application.example.yml 文件修改后的 application.yml 文件内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  Copyright 1999-2019 Seata.io Group.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">#  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">#  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">#  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">#  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">#  limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7091</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:logback-spring.xml</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">$&#123;user.home&#125;/logs/seata</span></span><br><span class="line">  <span class="attr">extend:</span></span><br><span class="line">    <span class="attr">logstash-appender:</span></span><br><span class="line">      <span class="attr">destination:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:4560</span></span><br><span class="line">    <span class="attr">kafka-appender:</span></span><br><span class="line">      <span class="attr">bootstrap-servers:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9092</span></span><br><span class="line">      <span class="attr">topic:</span> <span class="string">logback_to_logstash</span></span><br><span class="line"></span><br><span class="line"><span class="attr">console:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">seata</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">seata</span></span><br><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="comment"># support: nacos, consul, apollo, zk, etcd3</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">nacos:8848</span> <span class="comment"># nacos 地址，如果是 seata 和 nacos 在同一网络情况下直接使用 nacos:端口号即可</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span> <span class="comment"># namespace，默认为空</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span> <span class="comment"># 分组，默认是 DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">dataId:</span> <span class="string">seataServer.properties</span> <span class="comment"># 需要在 nacos 添加配置</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="comment"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">nacos:8848</span> <span class="comment"># nacos 地址，如果是 seata 和 nacos 在同一网络情况下直接使用 nacos:端口号即可</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span> <span class="comment"># namespace，默认为空</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span> <span class="comment"># 分组，默认是 DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">cluster:</span> <span class="string">SH</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-tc-server</span> <span class="comment"># seata 服务名称</span></span><br><span class="line"><span class="comment">#  store:</span></span><br><span class="line">    <span class="comment"># support: file 、 db 、 redis</span></span><br><span class="line"><span class="comment">#    mode: file</span></span><br><span class="line"><span class="comment">#  server:</span></span><br><span class="line"><span class="comment">#    service-port: 8091 #If not configured, the default is &#x27;$&#123;server.port&#125; + 1000&#x27;</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">secretKey:</span> <span class="string">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span></span><br><span class="line">    <span class="attr">tokenValidityInMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">ignore:</span></span><br><span class="line">      <span class="attr">urls:</span> <span class="string">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.jpeg,/**/*.ico,/api/v1/auth/login</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：第 47 行 seataServer.properties 的名称要和 nacos 创建的配置名保持一致</p></blockquote><p>nacos 创建配置 seataServer.properties</p><img src="/dev-env-build/image-20231018111220037.png" class=""><p>seataServer.properties 文件内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据存储方式，db 代表数据库</span></span><br><span class="line"><span class="attr">store.mode</span>=<span class="string">db</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line"><span class="attr">store.db.datasource</span>=<span class="string">druid</span></span><br><span class="line"><span class="attr">store.db.dbType</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">store.db.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">store.db.url</span>=<span class="string">jdbc:mysql://mysql:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">store.db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">store.db.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">store.db.minConn</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">store.db.maxConn</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">store.db.globalTable</span>=<span class="string">global_table</span></span><br><span class="line"><span class="attr">store.db.branchTable</span>=<span class="string">branch_table</span></span><br><span class="line"><span class="attr">store.db.queryLimit</span>=<span class="string">100</span></span><br><span class="line"><span class="attr">store.db.lockTable</span>=<span class="string">lock_table</span></span><br><span class="line"><span class="attr">store.db.maxWait</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 事务、日志等配置</span></span><br><span class="line"><span class="attr">server.recovery.committingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.asynCommittingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.rollbackingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.timeoutRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.maxCommitRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">server.maxRollbackRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">server.rollbackRetryTimeoutUnlockEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">server.undo.logSaveDays</span>=<span class="string">7</span></span><br><span class="line"><span class="attr">server.undo.logDeletePeriod</span>=<span class="string">86400000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 客户端与服务端传输方式</span></span><br><span class="line"><span class="attr">transport.serialization</span>=<span class="string">seata</span></span><br><span class="line"><span class="attr">transport.compressor</span>=<span class="string">none</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 关闭 metrics 功能，提高性能</span></span><br><span class="line"><span class="attr">metrics.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">metrics.registryType</span>=<span class="string">compact</span></span><br><span class="line"><span class="attr">metrics.exporterList</span>=<span class="string">prometheus</span></span><br><span class="line"><span class="attr">metrics.exporterPrometheusPort</span>=<span class="string">9898</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：第 8 行的 mysql:3306 的写法也是因为 seata 和 mysql 在同一 docker 网络下</p></blockquote><p>mysql 创建数据库表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">-- -------------------------------- The script used when storeMode is &#x27;db&#x27; --------------------------------</span><br><span class="line">-- the table to store GlobalSession data</span><br><span class="line">CREATE TABLE IF NOT EXISTS `global_table`</span><br><span class="line">(</span><br><span class="line">    `xid`                       VARCHAR(128) NOT NULL,</span><br><span class="line">    `transaction_id`            BIGINT,</span><br><span class="line">    `status`                    TINYINT      NOT NULL,</span><br><span class="line">    `application_id`            VARCHAR(32),</span><br><span class="line">    `transaction_service_group` VARCHAR(32),</span><br><span class="line">    `transaction_name`          VARCHAR(128),</span><br><span class="line">    `timeout`                   INT,</span><br><span class="line">    `begin_time`                BIGINT,</span><br><span class="line">    `application_data`          VARCHAR(2000),</span><br><span class="line">    `gmt_create`                DATETIME,</span><br><span class="line">    `gmt_modified`              DATETIME,</span><br><span class="line">    PRIMARY KEY (`xid`),</span><br><span class="line">    KEY `idx_status_gmt_modified` (`status` , `gmt_modified`),</span><br><span class="line">    KEY `idx_transaction_id` (`transaction_id`)</span><br><span class="line">) ENGINE = InnoDB</span><br><span class="line">  DEFAULT CHARSET = utf8mb4;</span><br><span class="line"></span><br><span class="line">-- the table to store BranchSession data</span><br><span class="line">CREATE TABLE IF NOT EXISTS `branch_table`</span><br><span class="line">(</span><br><span class="line">    `branch_id`         BIGINT       NOT NULL,</span><br><span class="line">    `xid`               VARCHAR(128) NOT NULL,</span><br><span class="line">    `transaction_id`    BIGINT,</span><br><span class="line">    `resource_group_id` VARCHAR(32),</span><br><span class="line">    `resource_id`       VARCHAR(256),</span><br><span class="line">    `branch_type`       VARCHAR(8),</span><br><span class="line">    `status`            TINYINT,</span><br><span class="line">    `client_id`         VARCHAR(64),</span><br><span class="line">    `application_data`  VARCHAR(2000),</span><br><span class="line">    `gmt_create`        DATETIME(6),</span><br><span class="line">    `gmt_modified`      DATETIME(6),</span><br><span class="line">    PRIMARY KEY (`branch_id`),</span><br><span class="line">    KEY `idx_xid` (`xid`)</span><br><span class="line">) ENGINE = InnoDB</span><br><span class="line">  DEFAULT CHARSET = utf8mb4;</span><br><span class="line"></span><br><span class="line">-- the table to store lock data</span><br><span class="line">CREATE TABLE IF NOT EXISTS `lock_table`</span><br><span class="line">(</span><br><span class="line">    `row_key`        VARCHAR(128) NOT NULL,</span><br><span class="line">    `xid`            VARCHAR(128),</span><br><span class="line">    `transaction_id` BIGINT,</span><br><span class="line">    `branch_id`      BIGINT       NOT NULL,</span><br><span class="line">    `resource_id`    VARCHAR(256),</span><br><span class="line">    `table_name`     VARCHAR(32),</span><br><span class="line">    `pk`             VARCHAR(36),</span><br><span class="line">    `status`         TINYINT      NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;0:locked ,1:rollbacking&#x27;,</span><br><span class="line">    `gmt_create`     DATETIME,</span><br><span class="line">    `gmt_modified`   DATETIME,</span><br><span class="line">    PRIMARY KEY (`row_key`),</span><br><span class="line">    KEY `idx_status` (`status`),</span><br><span class="line">    KEY `idx_branch_id` (`branch_id`),</span><br><span class="line">    KEY `idx_xid` (`xid`)</span><br><span class="line">) ENGINE = InnoDB</span><br><span class="line">  DEFAULT CHARSET = utf8mb4;</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS `distributed_lock`</span><br><span class="line">(</span><br><span class="line">    `lock_key`       CHAR(20) NOT NULL,</span><br><span class="line">    `lock_value`     VARCHAR(20) NOT NULL,</span><br><span class="line">    `expire`         BIGINT,</span><br><span class="line">    primary key (`lock_key`)</span><br><span class="line">) ENGINE = InnoDB</span><br><span class="line">  DEFAULT CHARSET = utf8mb4;</span><br><span class="line"></span><br><span class="line">INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&#x27;AsyncCommitting&#x27;, &#x27; &#x27;, 0);</span><br><span class="line">INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&#x27;RetryCommitting&#x27;, &#x27; &#x27;, 0);</span><br><span class="line">INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&#x27;RetryRollbacking&#x27;, &#x27; &#x27;, 0);</span><br><span class="line">INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&#x27;TxTimeoutCheck&#x27;, &#x27; &#x27;, 0);</span><br></pre></td></tr></table></figure><p>启动一个 seata</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不带 UI 端口号</span></span><br><span class="line">docker run -d \</span><br><span class="line">--name seata \</span><br><span class="line">--network=con-net \</span><br><span class="line">-p 8091:8091 \</span><br><span class="line">-e SEATA_IP=192.168.200.128 \</span><br><span class="line">-e SEATA_PORT=8091 \</span><br><span class="line">-v /opt/seata-server:/seata-server/resources \</span><br><span class="line">seataio/seata-server:1.7.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带 UI 端口号</span></span><br><span class="line">docker run -d \</span><br><span class="line">--name seata \</span><br><span class="line">--network=con-net \</span><br><span class="line">-p 7091:7091 \</span><br><span class="line">-p 8091:8091 \</span><br><span class="line">-e SEATA_IP=192.168.200.128 \</span><br><span class="line">-e SEATA_PORT=8091 \</span><br><span class="line">-v /opt/seata-server:/seata-server/resources \</span><br><span class="line">seataio/seata-server:1.7.0</span><br></pre></td></tr></table></figure><ul><li>环境变量 <code>SEATA_IP</code> 用于设置 seata 服务的 ip 地址</li><li>环境变量 <code>SEATA_PORT</code> 用于设置 seata 服务的端口号，这里设置为 8091</li></ul><p>可以在 nacos 服务列表中看到 seata 服务</p><img src="/dev-env-build/image-20231018111752464.png" class=""><h3 id="sentinel-1-8-0"><a href="#sentinel-1-8-0" class="headerlink" title="sentinel 1.8.0"></a>sentinel 1.8.0</h3><p>以下是根据你提供的信息，我为你推荐的方法来构建一个 Docker 镜像，以下是步骤：</p><ol><li><p>创建一个 Dockerfile 文件，主要内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于官方的OpenJDK镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jre-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 sentinel-dashboard-1.8.1.jar 到容器里</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> sentinel-dashboard-1.8.1.jar /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 jar 包</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Dserver.port=8080&quot;</span>,<span class="string">&quot;-Dcsp.sentinel.dashboard.server=localhost:8080&quot;</span>,<span class="string">&quot;-Dproject.name=sentinel-dashboard&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure></li><li><p>将 sentinel-dashboard-1.8.1.jar 文件放在和 Dockerfile 同一个目录下。</p></li><li><p>在Dockerfile所在目录执行如下命令，构建Docker镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t sentinel-dashboard:1.8.1 .</span><br></pre></td></tr></table></figure><p>“sentinel-dashboard:1.8.1” 是你想要给你的Docker镜像命名的名字。</p></li><li><p>运行该Docker镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name sentinel --network=con-net -p 8858:8080 sentinel-dashboard:1.8.1</span><br></pre></td></tr></table></figure></li></ol><h3 id="redis-6-0"><a href="#redis-6-0" class="headerlink" title="redis 6.0"></a>redis 6.0</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/redis/singleton/data</span><br></pre></td></tr></table></figure><p>在 <code>/opt/redis/singleton</code> 目录下新建 <code>redis.conf</code> 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">protected-mode <span class="built_in">yes</span></span><br><span class="line">port 6379</span><br><span class="line">tcp-backlog 511</span><br><span class="line"><span class="built_in">timeout</span> 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">daemonize no</span><br><span class="line">supervised no</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">&quot;&quot;</span></span><br><span class="line">databases 16</span><br><span class="line">always-show-logo <span class="built_in">yes</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error <span class="built_in">yes</span></span><br><span class="line">rdbcompression <span class="built_in">yes</span></span><br><span class="line">rdbchecksum <span class="built_in">yes</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">rdb-del-sync-files no</span><br><span class="line"><span class="built_in">dir</span> ./</span><br><span class="line">replica-serve-stale-data <span class="built_in">yes</span></span><br><span class="line">replica-read-only <span class="built_in">yes</span></span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-diskless-load disabled</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">replica-priority 100</span><br><span class="line">acllog-max-len 128</span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line">lazyfree-lazy-user-del no</span><br><span class="line">oom-score-adj no</span><br><span class="line">oom-score-adj-values 0 200 800</span><br><span class="line">appendonly no</span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated <span class="built_in">yes</span></span><br><span class="line">aof-use-rdb-preamble <span class="built_in">yes</span></span><br><span class="line">lua-time-limit 5000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events <span class="string">&quot;&quot;</span></span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line">list-compress-depth 0</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line">activerehashing <span class="built_in">yes</span></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit replica 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">dynamic-hz <span class="built_in">yes</span></span><br><span class="line">aof-rewrite-incremental-fsync <span class="built_in">yes</span></span><br><span class="line">rdb-save-incremental-fsync <span class="built_in">yes</span></span><br><span class="line">jemalloc-bg-thread <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>运行 redis 容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">--name redis \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-v /opt/redis/singleton/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /opt/redis/singleton/data:/data \</span><br><span class="line">-d redis:6.0 \</span><br><span class="line">redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">--name redis \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-v /opt/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /opt/redis/data:/data \</span><br><span class="line">-e REDIS_PASSWORD=630CYx5LjjuqGBrV \</span><br><span class="line">-d redis:6.0 \</span><br><span class="line">redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>关闭容器后，您可以使用<code>docker run</code>命令并通过<code>-v</code>选项来挂载容器卷目录。假设您已经关闭了名为<code>my-redis</code>的容器，并且想要重新启动它并挂载<code>redisbloom.so</code>文件，您可以按照以下步骤操作：</p><p>首先，使用以下命令来重新启动Redis容器并挂载<code>redisbloom.so</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name redis \</span><br><span class="line">-v /opt/redis/singleton/conf/redis.conf:/usr/local/etc/redis/redis.conf \</span><br><span class="line">-v /opt/redis/singleton//redisbloom.so:/usr/local/etc/redis/redisbloom.so \</span><br><span class="line">redis:6.0 redis-server /usr/local/etc/redis/redis.conf --loadmodule /usr/local/etc/redis/redisbloom.so</span><br></pre></td></tr></table></figure><p>在上述命令中，<code>/path/to/your/redisbloom.so</code>是redisbloom.so文件的实际路径。这将重新启动名为<code>my-redis</code>的容器，并将<code>redisbloom.so</code>文件挂载到容器中。</p><p>通过这种方式，您可以重新启动容器并挂载<code>redisbloom.so</code>文件到Redis容器中。希望这能帮助您成功重新挂载<code>redisbloom.so</code>文件到Redis容器中。如果您有任何其他问题或需要更多帮助，请随时告诉我。</p><h3 id="elasticsearch-7-6-2"><a href="#elasticsearch-7-6-2" class="headerlink" title="elasticsearch 7.6.2"></a>elasticsearch 7.6.2</h3><p>创建文件目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/elasticsearch/plugins</span><br></pre></td></tr></table></figure><p>运行 elasticsearch 7.6.2 容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name elasticsearch \</span><br><span class="line">--net con-net \</span><br><span class="line">-e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">-p 9200:9200 -p 9300:9300 \</span><br><span class="line">-v /opt/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">elasticsearch:7.6.2</span><br></pre></td></tr></table></figure><p>浏览器进入 <a href="http://www.maysean.ware:9200/">http://www.maysean.ware:9200</a> 验证 es 是否启动成功</p><h4 id="elasticSearch-对象映射"><a href="#elasticSearch-对象映射" class="headerlink" title="elasticSearch 对象映射"></a>elasticSearch 对象映射</h4><h4 id="Field"><a href="#Field" class="headerlink" title="@Field"></a>@Field</h4><p><code>@Field</code> 注解在 Elasticsearch 中用于定义字段的属性，其中包含了多个属性可以设置，包括 <code>name</code>、<code>format</code>、<code>pattern</code>、<code>store</code>、<code>analyzer</code>、<code>searchAnalyzer</code> 和 <code>normalizer</code>。下面是它们的详细解释：</p><ol><li><code>name</code>：用于指定字段在Elasticsearch中的名称。默认情况下，它将使用Java字段的名称作为Elasticsearch中的字段名称。可以通过设置 <code>name</code> 属性来自定义字段名称。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Field(name = &quot;custom_name&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String myField;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>type</code>：指定字段的数据类型。Elasticsearch支持各种数据类型，包括文本、关键字、日期、数字、地理位置等。根据字段的内容和用途，可以选择合适的数据类型。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line"><span class="keyword">private</span> String textField;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line"><span class="keyword">private</span> String keywordField;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Field(type = FieldType.Date)</span></span><br><span class="line"><span class="keyword">private</span> Date dateField;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Field(type = FieldType.Integer)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> integerField;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Field(type = FieldType.GeoPoint)</span></span><br><span class="line"><span class="keyword">private</span> GeoPoint geoPointField;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>format</code>：用于指定日期字段的日期格式。日期字段可以以不同的格式存储在Elasticsearch中，以便进行有效的日期检索和排序。常见的日期格式包括 <code>date_time</code>、<code>epoch_millis</code> 等。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Field(type = FieldType.Date, format = DateFormat.date_time)</span></span><br><span class="line"><span class="keyword">private</span> Date dateField;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>pattern</code>：当 <code>type</code> 设置为 <code>text</code> 时，可以使用 <code>pattern</code> 属性指定字段的分析器。分析器用于将文本分成单词，并将它们存储在倒排索引中以进行搜索。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Field(type = FieldType.Text, analyzer = &quot;standard&quot;, searchAnalyzer = &quot;standard&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String textField;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>store</code>：指定是否将字段的原始值存储在文档中。默认情况下，Elasticsearch仅将字段的索引值存储在倒排索引中，而不存储原始值。可以将 <code>store</code> 属性设置为 <code>true</code> 以存储原始值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Field(type = FieldType.Keyword, store = true)</span></span><br><span class="line"><span class="keyword">private</span> String keywordField;</span><br></pre></td></tr></table></figure><ol start="6"><li><code>analyzer</code>：指定字段的分析器。分析器定义了如何对文本进行分析，例如如何将文本分成单词、如何过滤停用词等。在索引文档时，会使用指定的分析器处理字段的值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Field(type = FieldType.Text, analyzer = &quot;standard&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String textField;</span><br></pre></td></tr></table></figure><ol start="7"><li><code>searchAnalyzer</code>：指定在搜索时使用的分析器。默认情况下，搜索使用与索引相同的分析器。但是，有时希望在搜索时使用不同的分析器，可以通过 <code>searchAnalyzer</code> 属性进行设置。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Field(type = FieldType.Text, analyzer = &quot;standard&quot;, searchAnalyzer = &quot;english&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String textField;</span><br></pre></td></tr></table></figure><ol start="8"><li><code>normalizer</code>：用于指定用于字段的正规化器。正规化器类似于分析器，但用于确保在搜索和聚合期间对字段的值进行标准化。通常用于对关键字字段进行精确匹配。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Field(type = FieldType.Keyword, normalizer = &quot;my_normalizer&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String keywordField;</span><br></pre></td></tr></table></figure><ol start="9"><li><code>copyTo</code>：指定一个或多个目标字段的名称，将当前字段的值复制到这些目标字段中，<code>sourceField</code> 的值将会被复制到 <code>copyField</code> 中。这意味着，当你搜索 <code>sourceField</code> 中的内容时，同时也会搜索到 <code>copyField</code> 中的内容。通常情况下，你可以在 <code>copyField</code> 上应用不同的分析器或设置，以满足不同的搜索需求。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Field(type = FieldType.Text, copyTo = &quot;copyField&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String sourceField;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line"><span class="keyword">private</span> String copyField;</span><br></pre></td></tr></table></figure><h3 id="ik-分词器-7-6-2"><a href="#ik-分词器-7-6-2" class="headerlink" title="ik 分词器 7.6.2"></a>ik 分词器 7.6.2</h3><p>下载地址：<a href="https://meixiang.lanzoue.com/ihAUd1cp3rrg">https://meixiang.lanzoue.com/ihAUd1cp3rrg</a></p><p>将解压后的文件夹放进 <code>/opt/elasticsearch/plugins</code> 目录下，重启 es</p><h3 id="kibana-7-6-2"><a href="#kibana-7-6-2" class="headerlink" title="kibana 7.6.2"></a>kibana 7.6.2</h3><p>创建文件目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/kibana/config</span><br></pre></td></tr></table></figure><p>进入目录，创建 kibana.yml 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/kibana/config/kibana.yml</span><br></pre></td></tr></table></figure><p>写入以下内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ** THIS IS AN AUTO-GENERATED FILE **</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default Kibana configuration for docker target</span></span><br><span class="line"><span class="attr">server.name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;http://elasticsearch:9200&quot;</span> ]</span><br><span class="line"><span class="attr">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.reporting.kibanaServer.hostname:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>运行 kibana 7.6.2 容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name kibana \</span><br><span class="line">--net con-net \</span><br><span class="line">-e ELASTICSEARCH_HOSTS=http://elasticsearch:9200 \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">-v /opt/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml \</span><br><span class="line">kibana:7.6.2</span><br></pre></td></tr></table></figure><p>浏览器进入 <a href="http://www.maysean.ware:5601/">http://www.maysean.ware:5601</a> 验证 kibana 是否启动成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 查询索引库</span></span><br><span class="line">GET /hotel_index</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 删除索引库</span></span><br><span class="line">DELETE /hotel_index</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 文档查询</span></span><br><span class="line">GET /hotel_index/_doc/36934</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 查询所有文档</span></span><br><span class="line">GET /hotel_index/_search</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 全文检索</span></span><br><span class="line"><span class="comment"># 5.1 单字段查询</span></span><br><span class="line">GET /hotel_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;all&quot;</span>: <span class="string">&quot;外滩如家&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.2 多字段查询，任意一个字段符合条件就算符合查询条件</span></span><br><span class="line">GET /hotel_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;query&quot;</span>: <span class="string">&quot;外滩如家&quot;</span>,</span><br><span class="line">      <span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;brand&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;business&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 精准查询</span></span><br><span class="line"><span class="comment"># 6.1 term 查询，查询的条件也必须是 不分词 的词条</span></span><br><span class="line"><span class="comment"># 6.1.1 city 的 type 是 keyword，不参与分词</span></span><br><span class="line">GET /hotel_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;city&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;上海&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 6.1.2 city 的 type 是 keyword，不参与分词，如果是多个词语组成的短语时，反而搜索不到</span></span><br><span class="line">GET /hotel_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;city&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;杭州上海&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.2 range 查询，范围查询</span></span><br><span class="line"><span class="comment"># 6.2.1 gte 表示大于等于，gt 表示大于；lte 表示小于等于，lt 表示小于</span></span><br><span class="line"><span class="comment"># 6.2.2 此处检索的是 1000 &lt;= price &lt;= 3000 的酒店信息</span></span><br><span class="line">GET /hotel_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;price&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;gte&quot;</span>: 1000,</span><br><span class="line">        <span class="string">&quot;lte&quot;</span>: 3000</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 地理坐标查询</span></span><br><span class="line"><span class="comment"># 7.1 附近查询，也叫做距离查询（geo_distance）：查询到指定中心点小于某个距离值</span></span><br><span class="line"><span class="comment"># 7.1.1 搜索陆家嘴附近 15km 的酒店</span></span><br><span class="line">GET /hotel_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;geo_distance&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;distance&quot;</span>: <span class="string">&quot;15km&quot;</span>,</span><br><span class="line">      <span class="string">&quot;location&quot;</span>: <span class="string">&quot;31.21, 121.5&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.1.2 搜索陆家嘴附近 3km 的酒店</span></span><br><span class="line">GET /hotel_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;geo_distance&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;distance&quot;</span>: <span class="string">&quot;3km&quot;</span>,</span><br><span class="line">      <span class="string">&quot;location&quot;</span>: <span class="string">&quot;31.21, 121.5&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 复合查询</span></span><br><span class="line"><span class="comment"># 8.1 算分函数查询</span></span><br><span class="line"><span class="comment"># 8.1.1 原始查询</span></span><br><span class="line">GET /hotel_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;function_score&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;all&quot;</span>: <span class="string">&quot;外滩&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.1.2 添加算分函数，如家得分就提升了</span></span><br><span class="line">GET /hotel_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;function_score&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;all&quot;</span>: <span class="string">&quot;外滩&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;functions&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;filter&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;brand&quot;</span>: <span class="string">&quot;如家&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;weight&quot;</span>: 10</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;boost_mode&quot;</span>: <span class="string">&quot;sum&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9. 布尔查询</span></span><br><span class="line"><span class="comment"># 9.1 需求：搜索名字包含&quot;如家&quot;，价格高于 400，在坐标 (31.21, 121.5) 周围 10km 范围内的酒店</span></span><br><span class="line">GET /hotel_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;如家&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;must_not&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;price&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;gt&quot;</span>: 400</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;geo_distance&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;distance&quot;</span>: <span class="string">&quot;10km&quot;</span>,</span><br><span class="line">            <span class="string">&quot;location&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;lat&quot;</span>: 31.21,</span><br><span class="line">              <span class="string">&quot;lon&quot;</span>: 121.5</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10 排序</span></span><br><span class="line"><span class="comment"># 10.1 普通字段排序</span></span><br><span class="line"><span class="comment"># 10.1.1 需求描述：酒店数据按照用户评分（socer）降序排序，评价相同的按照价格（price）升序排序</span></span><br><span class="line">GET /hotel_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;score&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;price&quot;</span>: <span class="string">&quot;asc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.2 地理坐标排序</span></span><br><span class="line"><span class="comment"># 10.2.1 需求描述：实现对酒店数据按照你的位置坐标的距离升序排序</span></span><br><span class="line"><span class="comment"># 假设我的位置是：(31.034661, 121.612282)，寻找我周围最近的酒店</span></span><br><span class="line">GET /hotel_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;_geo_distance&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;location&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;lat&quot;</span>: 31.034661,</span><br><span class="line">          <span class="string">&quot;lon&quot;</span>: 121.612282</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;order&quot;</span>: <span class="string">&quot;asc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;unit&quot;</span>: <span class="string">&quot;km&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11. 分页查询</span></span><br><span class="line"><span class="comment"># 11.1 基本的分页</span></span><br><span class="line"><span class="comment"># from 分页开始的位置，默认为 0</span></span><br><span class="line"><span class="comment"># size 期望获取的文档总数</span></span><br><span class="line">GET /hotel_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;from&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: 5,</span><br><span class="line">  <span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;price&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;order&quot;</span>: <span class="string">&quot;asc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="minio"><a href="#minio" class="headerlink" title="minio"></a>minio</h3><blockquote><p><a href="https://min.io/docs/minio/container/index.html">MinIO Object Storage for Container — MinIO Object Storage for Container</a></p></blockquote><p>这是一个 Docker 命令，用来启动 MinIO 服务器。主要参数如下：</p><ul><li><code>-d</code>：以后台模式运行容器</li><li><code>--net con-net</code>：加入到网络con-net</li><li><code>-p 9000:9000</code> 和 <code>-p 9090:9090</code>：映射容器的9000和9090端口到宿主机的相应端口</li><li><code>--name minio</code>：给容器命名为minio</li><li><code>-v /opt/minio/data:/minio/data</code>：将宿主机的&#x2F;opt&#x2F;minio&#x2F;data 目录挂载到容器的 &#x2F;minio&#x2F;data 目录下</li><li><code>-e &quot;MINIO_ROOT_USER=maysean&quot;</code> 和 <code>-e &quot;MINIO_ROOT_PASSWORD=630CYx5LjjuqGBrV&quot;</code>：设置MinIO服务器的根用户和密码</li><li><code>minio/minio server /minio/data --console-address &quot;:9090&quot;</code>：启动 MinIO 服务器，服务器的数据存储在 &#x2F;minio&#x2F;data 目录下，控制台地址设置为 9090 端口。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--net con-net \</span><br><span class="line">-p 9000:9000 \</span><br><span class="line">-p 9090:9090 \</span><br><span class="line">--name minio \</span><br><span class="line">-v /opt/minio/data:/minio/data \</span><br><span class="line">-e <span class="string">&quot;MINIO_ROOT_USER=maysean&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;MINIO_ROOT_PASSWORD=630CYx5LjjuqGBrV&quot;</span> \</span><br><span class="line">minio/minio server /minio/data --console-address <span class="string">&quot;:9090&quot;</span></span><br></pre></td></tr></table></figure><img src="/dev-env-build/image-20240310211005079.png" class="" title="image-20240310211005079"><img src="/dev-env-build/image-20240310210931563.png" class="" title="image-20240310210931563"><h3 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install gcc</span><br></pre></td></tr></table></figure><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>创建一个临时的 nginx 容器用于容器目录拷贝</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -d nginx</span><br></pre></td></tr></table></figure><p>拷贝 html 和 配置文件目录</p><blockquote><p>文件拷贝的时候，宿主机路径要到文件，而目录拷贝的时候，到宿主机目录上层即可</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/nginx/conf</span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/nginx.conf /opt/nginx/conf/nginx.conf</span><br><span class="line">docker <span class="built_in">cp</span> nginx:/usr/share/nginx/html /opt/nginx</span><br></pre></td></tr></table></figure><p>删除临时容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f nginx</span><br></pre></td></tr></table></figure><p>创建 nginx 容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx \</span><br><span class="line">--net con-net \</span><br><span class="line">-p 8080:80 \</span><br><span class="line">-v /opt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /opt/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-d nginx:latest</span><br></pre></td></tr></table></figure><p>挂载自定义配置文件（如黑马程序猿黑马头条）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-hm \</span><br><span class="line">--net con-net \</span><br><span class="line">-p 8801:8801 \</span><br><span class="line">-v /opt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /opt/nginx/conf/leadnews.conf:/etc/nginx/leadnews.conf \</span><br><span class="line">-v /opt/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-d nginx:latest</span><br></pre></td></tr></table></figure><h4 id="安装编辑器（如果未安装）"><a href="#安装编辑器（如果未安装）" class="headerlink" title="安装编辑器（如果未安装）"></a>安装编辑器（如果未安装）</h4><p>如果进入容器后发现没有安装任何编辑器，可以先安装一个。以下是安装 <code>vim</code> 或 <code>nano</code> 的方法，具体取决于容器的基础操作系统。</p><p>可以执行这个命令查看容器是基于哪个操作系统构建的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/os-release</span><br></pre></td></tr></table></figure><p>基于 debian&#x2F;ubuntu 的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">apt-get install vim -y</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">apt-get install nano -y</span><br></pre></td></tr></table></figure><p>基于 alpine 的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apk update</span><br><span class="line">apk add vim</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">apk add nano</span><br></pre></td></tr></table></figure><p>基于 centos&#x2F;rhel 的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install vim -y</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yum install nano -y</span><br></pre></td></tr></table></figure><h3 id="xxljob"><a href="#xxljob" class="headerlink" title="xxljob"></a>xxljob</h3><p>初始化 xxljob 数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># XXL-JOB v2.3.0</span><br><span class="line"># Copyright (c) 2015-present, xuxueli.</span><br><span class="line"></span><br><span class="line">CREATE database if NOT EXISTS `xxl_job` default character set utf8mb4 collate utf8mb4_unicode_ci;</span><br><span class="line">use `xxl_job`;</span><br><span class="line"></span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `xxl_job_info` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `job_group` int(11) NOT NULL COMMENT &#x27;执行器主键ID&#x27;,</span><br><span class="line">  `job_desc` varchar(255) NOT NULL,</span><br><span class="line">  `add_time` datetime DEFAULT NULL,</span><br><span class="line">  `update_time` datetime DEFAULT NULL,</span><br><span class="line">  `author` varchar(64) DEFAULT NULL COMMENT &#x27;作者&#x27;,</span><br><span class="line">  `alarm_email` varchar(255) DEFAULT NULL COMMENT &#x27;报警邮件&#x27;,</span><br><span class="line">  `schedule_type` varchar(50) NOT NULL DEFAULT &#x27;NONE&#x27; COMMENT &#x27;调度类型&#x27;,</span><br><span class="line">  `schedule_conf` varchar(128) DEFAULT NULL COMMENT &#x27;调度配置，值含义取决于调度类型&#x27;,</span><br><span class="line">  `misfire_strategy` varchar(50) NOT NULL DEFAULT &#x27;DO_NOTHING&#x27; COMMENT &#x27;调度过期策略&#x27;,</span><br><span class="line">  `executor_route_strategy` varchar(50) DEFAULT NULL COMMENT &#x27;执行器路由策略&#x27;,</span><br><span class="line">  `executor_handler` varchar(255) DEFAULT NULL COMMENT &#x27;执行器任务handler&#x27;,</span><br><span class="line">  `executor_param` varchar(512) DEFAULT NULL COMMENT &#x27;执行器任务参数&#x27;,</span><br><span class="line">  `executor_block_strategy` varchar(50) DEFAULT NULL COMMENT &#x27;阻塞处理策略&#x27;,</span><br><span class="line">  `executor_timeout` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;任务执行超时时间，单位秒&#x27;,</span><br><span class="line">  `executor_fail_retry_count` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;失败重试次数&#x27;,</span><br><span class="line">  `glue_type` varchar(50) NOT NULL COMMENT &#x27;GLUE类型&#x27;,</span><br><span class="line">  `glue_source` mediumtext COMMENT &#x27;GLUE源代码&#x27;,</span><br><span class="line">  `glue_remark` varchar(128) DEFAULT NULL COMMENT &#x27;GLUE备注&#x27;,</span><br><span class="line">  `glue_updatetime` datetime DEFAULT NULL COMMENT &#x27;GLUE更新时间&#x27;,</span><br><span class="line">  `child_jobid` varchar(255) DEFAULT NULL COMMENT &#x27;子任务ID，多个逗号分隔&#x27;,</span><br><span class="line">  `trigger_status` tinyint(4) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;调度状态：0-停止，1-运行&#x27;,</span><br><span class="line">  `trigger_last_time` bigint(13) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;上次调度时间&#x27;,</span><br><span class="line">  `trigger_next_time` bigint(13) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;下次调度时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `xxl_job_log` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `job_group` int(11) NOT NULL COMMENT &#x27;执行器主键ID&#x27;,</span><br><span class="line">  `job_id` int(11) NOT NULL COMMENT &#x27;任务，主键ID&#x27;,</span><br><span class="line">  `executor_address` varchar(255) DEFAULT NULL COMMENT &#x27;执行器地址，本次执行的地址&#x27;,</span><br><span class="line">  `executor_handler` varchar(255) DEFAULT NULL COMMENT &#x27;执行器任务handler&#x27;,</span><br><span class="line">  `executor_param` varchar(512) DEFAULT NULL COMMENT &#x27;执行器任务参数&#x27;,</span><br><span class="line">  `executor_sharding_param` varchar(20) DEFAULT NULL COMMENT &#x27;执行器任务分片参数，格式如 1/2&#x27;,</span><br><span class="line">  `executor_fail_retry_count` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;失败重试次数&#x27;,</span><br><span class="line">  `trigger_time` datetime DEFAULT NULL COMMENT &#x27;调度-时间&#x27;,</span><br><span class="line">  `trigger_code` int(11) NOT NULL COMMENT &#x27;调度-结果&#x27;,</span><br><span class="line">  `trigger_msg` text COMMENT &#x27;调度-日志&#x27;,</span><br><span class="line">  `handle_time` datetime DEFAULT NULL COMMENT &#x27;执行-时间&#x27;,</span><br><span class="line">  `handle_code` int(11) NOT NULL COMMENT &#x27;执行-状态&#x27;,</span><br><span class="line">  `handle_msg` text COMMENT &#x27;执行-日志&#x27;,</span><br><span class="line">  `alarm_status` tinyint(4) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;告警状态：0-默认、1-无需告警、2-告警成功、3-告警失败&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `I_trigger_time` (`trigger_time`),</span><br><span class="line">  KEY `I_handle_code` (`handle_code`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `xxl_job_log_report` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `trigger_day` datetime DEFAULT NULL COMMENT &#x27;调度-时间&#x27;,</span><br><span class="line">  `running_count` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;运行中-日志数量&#x27;,</span><br><span class="line">  `suc_count` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;执行成功-日志数量&#x27;,</span><br><span class="line">  `fail_count` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;执行失败-日志数量&#x27;,</span><br><span class="line">  `update_time` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `i_trigger_day` (`trigger_day`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `xxl_job_logglue` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `job_id` int(11) NOT NULL COMMENT &#x27;任务，主键ID&#x27;,</span><br><span class="line">  `glue_type` varchar(50) DEFAULT NULL COMMENT &#x27;GLUE类型&#x27;,</span><br><span class="line">  `glue_source` mediumtext COMMENT &#x27;GLUE源代码&#x27;,</span><br><span class="line">  `glue_remark` varchar(128) NOT NULL COMMENT &#x27;GLUE备注&#x27;,</span><br><span class="line">  `add_time` datetime DEFAULT NULL,</span><br><span class="line">  `update_time` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `xxl_job_registry` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `registry_group` varchar(50) NOT NULL,</span><br><span class="line">  `registry_key` varchar(255) NOT NULL,</span><br><span class="line">  `registry_value` varchar(255) NOT NULL,</span><br><span class="line">  `update_time` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `i_g_k_v` (`registry_group`,`registry_key`,`registry_value`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `xxl_job_group` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `app_name` varchar(64) NOT NULL COMMENT &#x27;执行器AppName&#x27;,</span><br><span class="line">  `title` varchar(12) NOT NULL COMMENT &#x27;执行器名称&#x27;,</span><br><span class="line">  `address_type` tinyint(4) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;执行器地址类型：0=自动注册、1=手动录入&#x27;,</span><br><span class="line">  `address_list` text COMMENT &#x27;执行器地址列表，多地址逗号分隔&#x27;,</span><br><span class="line">  `update_time` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `xxl_job_user` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(50) NOT NULL COMMENT &#x27;账号&#x27;,</span><br><span class="line">  `password` varchar(50) NOT NULL COMMENT &#x27;密码&#x27;,</span><br><span class="line">  `role` tinyint(4) NOT NULL COMMENT &#x27;角色：0-普通用户、1-管理员&#x27;,</span><br><span class="line">  `permission` varchar(255) DEFAULT NULL COMMENT &#x27;权限：执行器ID列表，多个逗号分割&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `i_username` (`username`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `xxl_job_lock` (</span><br><span class="line">  `lock_name` varchar(50) NOT NULL COMMENT &#x27;锁名称&#x27;,</span><br><span class="line">  PRIMARY KEY (`lock_name`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">INSERT INTO `xxl_job_group`(`id`, `app_name`, `title`, `address_type`, `address_list`, `update_time`) VALUES (1, &#x27;xxl-job-executor-sample&#x27;, &#x27;示例执行器&#x27;, 0, NULL, &#x27;2018-11-03 22:21:31&#x27; );</span><br><span class="line">INSERT INTO `xxl_job_info`(`id`, `job_group`, `job_desc`, `add_time`, `update_time`, `author`, `alarm_email`, `schedule_type`, `schedule_conf`, `misfire_strategy`, `executor_route_strategy`, `executor_handler`, `executor_param`, `executor_block_strategy`, `executor_timeout`, `executor_fail_retry_count`, `glue_type`, `glue_source`, `glue_remark`, `glue_updatetime`, `child_jobid`) VALUES (1, 1, &#x27;测试任务1&#x27;, &#x27;2018-11-03 22:21:31&#x27;, &#x27;2018-11-03 22:21:31&#x27;, &#x27;XXL&#x27;, &#x27;&#x27;, &#x27;CRON&#x27;, &#x27;0 0 0 * * ? *&#x27;, &#x27;DO_NOTHING&#x27;, &#x27;FIRST&#x27;, &#x27;demoJobHandler&#x27;, &#x27;&#x27;, &#x27;SERIAL_EXECUTION&#x27;, 0, 0, &#x27;BEAN&#x27;, &#x27;&#x27;, &#x27;GLUE代码初始化&#x27;, &#x27;2018-11-03 22:21:31&#x27;, &#x27;&#x27;);</span><br><span class="line">INSERT INTO `xxl_job_user`(`id`, `username`, `password`, `role`, `permission`) VALUES (1, &#x27;admin&#x27;, &#x27;e10adc3949ba59abbe56e057f20f883e&#x27;, 1, NULL);</span><br><span class="line">INSERT INTO `xxl_job_lock` ( `lock_name`) VALUES ( &#x27;schedule_lock&#x27;);</span><br><span class="line"></span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p>运行 xxljob 容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -e PARAMS=<span class="string">&quot;--spring.datasource.url=jdbc:mysql://mysql:3306/xxl_job?Unicode=true&amp;characterEncoding=UTF-8 \</span></span><br><span class="line"><span class="string">--spring.datasource.username=root \</span></span><br><span class="line"><span class="string">--spring.datasource.password=root&quot;</span> \</span><br><span class="line">--name xxl-job-admin \</span><br><span class="line">--net con-net \</span><br><span class="line">-v /opt/xxljob/applogs:/data/applogs \</span><br><span class="line">-p 8888:8080 \</span><br><span class="line">xuxueli/xxl-job-admin:2.3.0</span><br></pre></td></tr></table></figure><p>访问地址：<a href="http://www.maysean.ware:8888/xxl-job-admin">http://www.maysean.ware:8888/xxl-job-admin</a></p><p>默认账号：admin</p><p>默认密码：123456</p><h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><p>拉取 rabbitmq 镜像，最好拉取带 <code>-management</code> 结尾的版本，能省去很多麻烦</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:3.8-management</span><br></pre></td></tr></table></figure><p>创建 rabbitmq 容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name rabbitmq \</span><br><span class="line">--network con-net \</span><br><span class="line">-p 5672:5672 \</span><br><span class="line">-p 15672:15672 \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=maysean \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=maysean \</span><br><span class="line">-v plugins:/plugins \</span><br><span class="line">rabbitmq:3.8-management</span><br></pre></td></tr></table></figure><blockquote><p>-v plugins:&#x2F;plugins 此处没有指定宿主机目录，而是创建了一个名为 plugins 的容器卷</p></blockquote><p>rabbitmq 访问地址：<a href="http://www.maysean.ware:15672/">http://www.maysean.ware:15672</a></p><h3 id="插件挂载"><a href="#插件挂载" class="headerlink" title="插件挂载"></a>插件挂载</h3><p>执行命令 <code>↓</code> 得到插件 <code>plugins</code> 挂载的路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f <span class="string">&#x27;&#123;&#123;range .Mounts&#125;&#125;&#123;&#123;if eq .Name &quot;plugins&quot;&#125;&#125;&#123;&#123;.Source&#125;&#125;&#123;&#123;end&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> rabbitmq</span><br></pre></td></tr></table></figure><p>将需要装的插件上传到这个目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/docker/volumes/plugins/_data</span><br></pre></td></tr></table></figure><p>例如：需要挂载延迟队列插件，点击下面链接进行下载</p><p><a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.8.0/rabbitmq_delayed_message_exchange-3.8.0.ez">https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.8.0/rabbitmq_delayed_message_exchange-3.8.0.ez</a></p><p>上传完成后，执行命令 <code>↓</code> 开启延迟队列插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it rabbitmq rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><p>Kafka 对于 zookeeper 是强依赖，保存 kafka 相关的节点数据，所以安装 Kafka 之前必须先安装zookeeper</p><p>拉取 zookeeper 镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull zookeeper:3.4.14</span><br></pre></td></tr></table></figure><p>创建 zookeeper 容器 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name zookeeper \</span><br><span class="line">--network con-net \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-p 2181:2181 \</span><br><span class="line">zookeeper:3.4.14</span><br></pre></td></tr></table></figure><p>拉取 kafka 镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull wurstmeister/kafka:2.12-2.4.1</span><br></pre></td></tr></table></figure><p>创建 kafka 容器 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name kafka \</span><br><span class="line">--network con-net \</span><br><span class="line">-p 9092:9092 \</span><br><span class="line">-e KAFKA_ADVERTISED_HOST_NAME=192.168.200.128 \</span><br><span class="line">-e KAFKA_ZOOKEEPER_CONNECT=zookeeper \</span><br><span class="line">-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.200.128:9092 \</span><br><span class="line">-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \</span><br><span class="line">-e KAFKA_HEAP_OPTS=<span class="string">&quot;-Xmx256M -Xms256M&quot;</span> \</span><br><span class="line">wurstmeister/kafka:2.12-2.4.1</span><br></pre></td></tr></table></figure><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p>创建容器挂载目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/mongo/data</span><br></pre></td></tr></table></figure><p>运行容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -<span class="built_in">id</span> \</span><br><span class="line">--name mongo \</span><br><span class="line">--network con-net \</span><br><span class="line">-v /opt/mongo/data:/data/db \</span><br><span class="line">-p 27017:27017 \</span><br><span class="line">mongo:4.4.10</span><br></pre></td></tr></table></figure><h2 id="原生方式搭建"><a href="#原生方式搭建" class="headerlink" title="原生方式搭建"></a>原生方式搭建</h2><h3 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h3><h4 id="openjdk"><a href="#openjdk" class="headerlink" title="openjdk"></a>openjdk</h4><p>运行以下命令更新所有的包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><p>安装 OpenJDK，您可以选择安装 JDK 8 或者更高的版本。例如，要安装 JDK 8，使用以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install java-1.8.0-openjdk -y</span><br></pre></td></tr></table></figure><p>确认安装并查看安装的版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="oraclejdk"><a href="#oraclejdk" class="headerlink" title="oraclejdk"></a>oraclejdk</h4><p>下载 <code>jdk-8u311-linux-x64.tar.gz</code> 文件。如果还没有下载，可以从 <a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">Oracle 官方网站</a> 下载；将下载的 tar.gz 文件解压到你想要安装 JDK 的目录。假设你将文件下载到 <code>/opt</code> 目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">sudo tar -zxvf jdk-8u311-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>解压完成后，需要配置环境变量以便系统识别 JDK。编辑 <code>/etc/profile</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>在文件末尾添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_311</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>执行以下命令使环境变量立即生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>最后，验证 JDK 是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>如果安装成功，你应该会看到类似以下的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version <span class="string">&quot;1.8.0_311&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_311-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.311-b11, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h3><blockquote><p>在 zookeeper 安装之前确保已经安装了 jdk</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 jdk 版本</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><p>蓝奏云：<a href="https://meixiang.lanzouw.com/ifWI51zvh25c">zookeeper_3.5.6.tar.gz</a></p><h4 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h4><ol><li>将 tar 包上传到 <code>/opt</code> 目录下，切换目录到 <code>/opt</code> 执行解压</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line"></span><br><span class="line">tar -zxvf zookeeper_3.5.6.tar.gz</span><br></pre></td></tr></table></figure><ol start="2"><li>进入到 <code>conf</code> 目录，拷贝 <code>zoo_sample.cfg</code> 文件并创建 <code>zoo.cfg</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到 conf 目录</span></span><br><span class="line">cd /opt/zookeeper_3.5.6/conf/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝</span></span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><ol start="3"><li>创建 <code>data</code> 目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 zookeeper 存储目录</span></span><br><span class="line">mkdir -p /opt/zookeeper_3.5.6/data</span><br></pre></td></tr></table></figure><ol start="4"><li>修改 <code>zoo.cfg</code> 文件的 <code>dataDir</code> 参数</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 zoo.cfg</span></span><br><span class="line">vim /opt/zookeeper_3.5.6/conf/zoo.cfg</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/opt/zookeeper_3.5.6/data</span><br></pre></td></tr></table></figure><ol start="5"><li>启动 <code>zookeeper</code>，并且查看其状态</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/opt/zookeeper_3.5.6/bin/zkServer.sh start</span><br><span class="line"></span><br><span class="line">/opt/zookeeper_3.5.6/bin/zkServer.sh status</span><br></pre></td></tr></table></figure><h4 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h4><p>集群部署前三步与单机部署一致</p><ol start="4"><li>进入 <code>/opt</code> 目录并创建集群节点目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line"></span><br><span class="line">mkdir -p /opt/zookeeper-cluster/zookeeper-1</span><br><span class="line">mkdir -p /opt/zookeeper-cluster/zookeeper-2</span><br><span class="line">mkdir -p /opt/zookeeper-cluster/zookeeper-3</span><br></pre></td></tr></table></figure><ol start="5"><li>分别拷贝 <code>/opt/zookeeper_3.5.6</code> 目录下的内容，到 <code>zookeeper</code> 集群的三个节点目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -r /opt/zookeeper_3.5.6/* /opt/zookeeper-cluster/zookeeper-1</span><br><span class="line">cp -r /opt/zookeeper_3.5.6/* /opt/zookeeper-cluster/zookeeper-2</span><br><span class="line">cp -r /opt/zookeeper_3.5.6/* /opt/zookeeper-cluster/zookeeper-3</span><br></pre></td></tr></table></figure><ol start="6"><li>在 <code>zookeeper</code> 集群的三个节点的 <code>data</code> 目录下创建 <code>myid</code> 文件并且给与值</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt;/opt/zookeeper-cluster/zookeeper-1/data/myid</span><br><span class="line">echo 2 &gt;/opt/zookeeper-cluster/zookeeper-2/data/myid</span><br><span class="line">echo 3 &gt;/opt/zookeeper-cluster/zookeeper-3/data/myid</span><br></pre></td></tr></table></figure><ol start="7"><li>修改 <code>zoo.cfg</code> 文件的 <code>clientPort</code> 和 <code>dataDir</code> 参数，并且在每个节点都新增 <code>server.$&#123;id&#125;</code> 参数</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 zoo.cfg</span></span><br><span class="line">vim /opt/zookeeper-cluster/zookeeper-1/conf/zoo.cfg</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/opt/zookeeper-cluster/zookeeper-1/data</span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">server.服务器 <span class="built_in">id</span> = 服务器 ip 地址:服务器之间通信端口:服务器之间投票选举端口</span></span><br><span class="line">server.1=localhost:2881:3881</span><br><span class="line">server.2=localhost:2882:3882</span><br><span class="line">server.3=localhost:2883:3883</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 zoo.cfg</span></span><br><span class="line">vim /opt/zookeeper-cluster/zookeeper-2/conf/zoo.cfg</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/opt/zookeeper-cluster/zookeeper-2/data</span><br><span class="line">clientPort=2182</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">server.服务器 <span class="built_in">id</span> = 服务器 ip 地址:服务器之间通信端口:服务器之间投票选举端口</span></span><br><span class="line">server.1=localhost:2881:3881</span><br><span class="line">server.2=localhost:2882:3882</span><br><span class="line">server.3=localhost:2883:3883</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 zoo.cfg</span></span><br><span class="line">vim /opt/zookeeper-cluster/zookeeper-3/conf/zoo.cfg</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/opt/zookeeper-cluster/zookeeper-3/data</span><br><span class="line">clientPort=2183</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">server.服务器 <span class="built_in">id</span> = 服务器 ip 地址:服务器之间通信端口:服务器之间投票选举端口</span></span><br><span class="line">server.1=localhost:2881:3881</span><br><span class="line">server.2=localhost:2882:3882</span><br><span class="line">server.3=localhost:2883:3883</span><br></pre></td></tr></table></figure><ol start="8"><li>启动 <code>zookeeper</code> 集群，并且查看其状态</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/opt/zookeeper-cluster/zookeeper-1/bin/zkServer.sh start</span><br><span class="line">/opt/zookeeper-cluster/zookeeper-2/bin/zkServer.sh start</span><br><span class="line">/opt/zookeeper-cluster/zookeeper-3/bin/zkServer.sh start</span><br><span class="line"></span><br><span class="line">/opt/zookeeper-cluster/zookeeper-1/bin/zkServer.sh status</span><br><span class="line">/opt/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status</span><br><span class="line">/opt/zookeeper-cluster/zookeeper-3/bin/zkServer.sh status</span><br></pre></td></tr></table></figure><p>附：关闭集群命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/opt/zookeeper-cluster/zookeeper-1/bin/zkServer.sh stop</span><br><span class="line">/opt/zookeeper-cluster/zookeeper-2/bin/zkServer.sh stop</span><br><span class="line">/opt/zookeeper-cluster/zookeeper-3/bin/zkServer.sh stop</span><br></pre></td></tr></table></figure><h3 id="kafka-1"><a href="#kafka-1" class="headerlink" title="kafka"></a>kafka</h3><p>由于 <code>kafka</code> 对 <code>zookeeper</code> 是强依赖，所以在部署 <code>kafka</code> 之前，先进行 <code>zookeeper</code> 的部署</p><p>蓝奏云：<a href="https://meixiang.lanzouw.com/im1Cf1zudiwf">kafka_2.12-2.4.1.zip</a></p><p>先使用 <code>bandizip</code> 解压 <code>kafka_2.12-2.4.1.zip</code> 得到 <code>kafka_2.12-2.4.1.tgz</code></p><h4 id="单机部署-1"><a href="#单机部署-1" class="headerlink" title="单机部署"></a>单机部署</h4><ol><li>将 tar 包上传到 <code>/opt</code> 目录下，切换目录到 <code>/opt</code> 执行解压</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line"></span><br><span class="line">tar -zxvf kafka_2.12-2.4.1.tgz</span><br></pre></td></tr></table></figure><ol start="2"><li>进入 <code>/opt/kafka_2.12-2.4.1/config</code> 目录</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/kafka_2.12-2.4.1/config</span><br></pre></td></tr></table></figure><ol start="3"><li>修改 <code>server.properties</code> 文件的 <code>broker.id</code> 和 <code>log.dirs</code> 和 <code>zookeeper.connect</code> 参数</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim server.properties</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 broker 的 <span class="built_in">id</span></span></span><br><span class="line">broker.id=0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka 存储日志文件的目录</span></span><br><span class="line">log.dirs=/opt/kafka_2.12-2.4.1/kafka-logs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 zookeeper，由于 zookeeper 也是在本机部署所以是 localhost，格式 ip:端口号</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此处也可以配置 zookeeper 集群，格式 localhost:2181,localhost:2182,localhost:2183 使用逗号分隔</span></span><br><span class="line">zookeeper.connect=localhost:2181</span><br></pre></td></tr></table></figure><ol start="4"><li>启动 <code>kafka</code>，并且查看其状态</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 kafka 并且后台运行</span></span><br><span class="line">nohup /opt/kafka_2.12-2.4.1/bin/kafka-server-start.sh /opt/kafka_2.12-2.4.1/config/server.properties &amp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kafka 默认监听 9092 端口</span></span><br><span class="line">/opt/kafka_2.12-2.4.1/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list</span><br></pre></td></tr></table></figure><h4 id="集群部署-1"><a href="#集群部署-1" class="headerlink" title="集群部署"></a>集群部署</h4><p>集群部署第一步与单机部署一致</p><ol start="2"><li>创建目录 <code>/opt/kafka-cluster</code>，并且拷贝 <code>/opt/kafka_2.12-2.4.1</code> 目录下的内容，到 <code>/opt/kafka-cluster</code> 集群目录下</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/kafka-cluster</span><br><span class="line"></span><br><span class="line">cp -r /opt/kafka_2.12-2.4.1/* /opt/kafka-cluster</span><br></pre></td></tr></table></figure><ol start="3"><li>拷贝三份 <code>server.properties</code> 配置文件，并且重命名</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/kafka-cluster/config/server.properties /opt/kafka-cluster/config/server-1.properties</span><br><span class="line">cp /opt/kafka-cluster/config/server.properties /opt/kafka-cluster/config/server-2.properties</span><br><span class="line">cp /opt/kafka-cluster/config/server.properties /opt/kafka-cluster/config/server-3.properties</span><br></pre></td></tr></table></figure><ol start="4"><li>进入 <code>/opt/kafka-cluster/config</code> 目录修改 <code>server-*.properties</code> 文件的 <code>broker.id</code> 和 <code>log.dirs</code> 和 <code>zookeeper.connect</code> 参数，添加 <code>listeners</code> 参数</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/kafka-cluster/config</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim server-1.properties</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 broker 的 <span class="built_in">id</span></span></span><br><span class="line">broker.id=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kafka 监听 9092 端口</span></span><br><span class="line">listeners=PLAINTEXT://:9092</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka 存储日志文件的目录</span></span><br><span class="line">log.dirs=/opt/kafka-cluster/kafka-logs-1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 zookeeper，由于 zookeeper 也是在本机部署所以是 localhost，格式 ip:端口号</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此处也可以配置 zookeeper 集群，格式 localhost:2181,localhost:2182,localhost:2183 使用逗号分隔</span></span><br><span class="line">zookeeper.connect=localhost:2181,localhost:2182,localhost:2183</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim server-2.properties</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 broker 的 <span class="built_in">id</span></span></span><br><span class="line">broker.id=2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kafka 监听 9093 端口</span></span><br><span class="line">listeners=PLAINTEXT://:9093</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka 存储日志文件的目录</span></span><br><span class="line">log.dirs=/opt/kafka-cluster/kafka-logs-2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 zookeeper，由于 zookeeper 也是在本机部署所以是 localhost，格式 ip:端口号</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此处也可以配置 zookeeper 集群，格式 localhost:2181,localhost:2182,localhost:2183 使用逗号分隔</span></span><br><span class="line">zookeeper.connect=localhost:2181,localhost:2182,localhost:2183</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim server-3.properties</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 broker 的 <span class="built_in">id</span></span></span><br><span class="line">broker.id=3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kafka 监听 9094 端口</span></span><br><span class="line">listeners=PLAINTEXT://:9094</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka 存储日志文件的目录</span></span><br><span class="line">log.dirs=/opt/kafka-cluster/kafka-logs-3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 zookeeper，由于 zookeeper 也是在本机部署所以是 localhost，格式 ip:端口号</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此处也可以配置 zookeeper 集群，格式 localhost:2181,localhost:2182,localhost:2183 使用逗号分隔</span></span><br><span class="line">zookeeper.connect=localhost:2181,localhost:2182,localhost:2183</span><br></pre></td></tr></table></figure><ol start="5"><li>启动 <code>kafka</code> 集群，并且验证是否启动成功</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nohup /opt/kafka-cluster/bin/kafka-server-start.sh /opt/kafka-cluster/config/server-1.properties &amp;</span><br><span class="line">nohup /opt/kafka-cluster/bin/kafka-server-start.sh /opt/kafka-cluster/config/server-2.properties &amp;</span><br><span class="line">nohup /opt/kafka-cluster/bin/kafka-server-start.sh /opt/kafka-cluster/config/server-3.properties &amp;</span><br><span class="line"></span><br><span class="line">/opt/kafka-cluster/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list</span><br></pre></td></tr></table></figure><p>附：关闭集群命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/opt/kafka-cluster/bin/kafka-server-stop.sh /opt/kafka-cluster/config/server-1.properties &amp;</span><br><span class="line">/opt/kafka-cluster/bin/kafka-server-stop.sh /opt/kafka-cluster/config/server-2.properties &amp;</span><br><span class="line">/opt/kafka-cluster/bin/kafka-server-stop.sh /opt/kafka-cluster/config/server-3.properties &amp;</span><br></pre></td></tr></table></figure><h3 id="minikube"><a href="#minikube" class="headerlink" title="minikube"></a>minikube</h3><p><a href="https://github.com/aliyuncontainerservice/minikube">https://github.com/aliyuncontainerservice/minikube</a></p><p>安装 minikube </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v1.23.1/minikube-linux-amd64</span><br><span class="line">sudo install minikube-linux-amd64 /usr/local/bin/minikube &amp;&amp; <span class="built_in">rm</span> minikube-linux-amd64</span><br></pre></td></tr></table></figure><p>创建具有管理员访问权限的用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新用户</span></span><br><span class="line">sudo useradd maysean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置用户的密码</span></span><br><span class="line">sudo passwd maysean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户添加到 wheel 组中</span></span><br><span class="line">sudo usermod -aG wheel maysean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su maysean</span><br></pre></td></tr></table></figure><p>将当前登录用户（由 <code>$USER</code> 变量指定）追加到 <code>docker</code> 组中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span> &amp;&amp; newgrp docker</span><br></pre></td></tr></table></figure><p>使 docker 成为默认驱动程序</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube config <span class="built_in">set</span> driver docker</span><br></pre></td></tr></table></figure><p>启动 <code>minikube</code>，使用阿里云的镜像仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --image-mirror-country=<span class="string">&#x27;cn&#x27;</span> --image-repository=<span class="string">&#x27;registry.cn-hangzhou.aliyuncs.com/google_containers&#x27;</span></span><br></pre></td></tr></table></figure><p>验证安装结果</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">minikube status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例演示</span></span><br><span class="line">[maysean@localhost root]$  minikube status</span><br><span class="line">minikube</span><br><span class="line"><span class="built_in">type</span>: Control Plane</span><br><span class="line">host: Running</span><br><span class="line">kubelet: Running</span><br><span class="line">apiserver: Running</span><br><span class="line">kubeconfig: Configured</span><br></pre></td></tr></table></figure><p>给 minikube kubectl 取个别名 kubectl</p><p>设置的 <code>kubectl</code> 别名，当执行 <code>kubectl</code> 命令时，使它通过 <code>minikube</code> 的包装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> kubectl=<span class="string">&quot;minikube kubectl --&quot;</span></span><br></pre></td></tr></table></figure><h3 id="kubernetes（单机版）"><a href="#kubernetes（单机版）" class="headerlink" title="kubernetes（单机版）"></a>kubernetes（单机版）</h3><h4 id="版本介绍"><a href="#版本介绍" class="headerlink" title="版本介绍"></a>版本介绍</h4><blockquote><p>kubernetes 与 docker 存在版本对应关系</p></blockquote><p>此次安装的 <code>kubernetes</code> 版本：v1.20.9；<code>docker</code> 版本：v20.10.7</p><h4 id="虚拟机环境"><a href="#虚拟机环境" class="headerlink" title="虚拟机环境"></a>虚拟机环境</h4><p>一台 CentOS 7 64 位的虚拟机，IP 为 <code>192.168.200.131</code></p><p>如果只有一台 IP 为 <code>192.168.200.128</code> 的虚拟机，可以修改 <code>IP</code> 以及主机名完成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-master</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/192\.168\.200\.128/192.168.200.131/g&#x27;</span> /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><h4 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h4><p>k8s-master：禁用 firewalld；禁用 selinux，关闭 swap 分区，编辑hosts 文件；将桥接的 ipv4 流量传递到 iptables 的链，重启之后使用 <code>free -m</code> 查看 swap</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line">sed -ri <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line">reboot</span><br><span class="line">free -m</span><br></pre></td></tr></table></figure><blockquote><p>安装 docker，参考安装 docker 篇</p></blockquote><p>k8s-master：配置 k8s 的 yum 源地址</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class="line"><span class="string">  http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>k8s-master：安装 kubelet、kubeadm、kubectl</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 kubelet、kubeadm、kubectl</span></span><br><span class="line">yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 kubelet</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 kubelet 状态</span></span><br><span class="line">systemctl status kubelet</span><br></pre></td></tr></table></figure><p>k8s-master：docker 登录 registry.cn-hangzhou.aliyuncs.com 仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 退出登录 registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line">docker <span class="built_in">logout</span> registry.cn-hangzhou.aliyuncs.com</span><br><span class="line"><span class="comment"># 登录 registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line">docker login -u maysean -p wt264ydfk1jiggsu registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure><p>k8s-master：编写镜像拉取脚本，修改文件权限，执行脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">tee</span> ./images.sh &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要拉取的镜像列表</span></span><br><span class="line">images=(</span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/calico-node:v3.20.6&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/calico-pod2daemon-flexvol:v3.20.6&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/calico-cni:v3.20.6&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/calico-kube-controllers:v3.20.6&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/kube-proxy:v1.20.9&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/kube-controller-manager:v1.20.9&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/kube-scheduler:v1.20.9&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/kube-apiserver:v1.20.9&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/etcd:3.4.13-0&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/coredns:1.7.0&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/pause:3.2&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/kubernetesui-dashboard:v2.3.1&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/kubernetesui-metrics-scraper:v1.0.6&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/ingress-nginx-controller:v0.46.0&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/jettech-kube-webhook-certgen:v1.5.1&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历镜像列表并逐个拉取镜像</span></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;images[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Pulling image: <span class="variable">$image</span>&quot;</span></span><br><span class="line">    docker pull <span class="string">&quot;<span class="variable">$image</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Error: Failed to pull image <span class="variable">$image</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;All images pulled successfully.&quot;</span></span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line"><span class="built_in">chmod</span> +x ./images.sh &amp;&amp; ./images.sh</span><br></pre></td></tr></table></figure><p>k8s-master：初始化 kubeadm，注意 <code>--apiserver-advertise-address</code>；<code>--service-cidr</code>；<code>--pod-network-cidr</code> 3 个网络互相不能重叠</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果是单机部署，先执行；集群部署则不用</span></span><br><span class="line">sysctl -w net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=192.168.200.131 \</span><br><span class="line">--control-plane-endpoint=k8s-master \</span><br><span class="line">--image-repository registry.cn-hangzhou.aliyuncs.com/maysean \</span><br><span class="line">--kubernetes-version v1.20.9 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><p>k8s-master：初始化成功之后会打印以下信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now <span class="built_in">join</span> any number of control-plane nodes by copying certificate authorities</span><br><span class="line">and service account keys on each node and <span class="keyword">then</span> running the following as root:</span><br><span class="line"></span><br><span class="line">  kubeadm <span class="built_in">join</span> k8s-master:6443 --token euztag.6yjbhn94ehg6nhn7 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:a6e917b751e424c7a761c2276ae02db95d87ba5a3cc6b374182519ce89aba28b \</span><br><span class="line">    --control-plane </span><br><span class="line"></span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm <span class="built_in">join</span> k8s-master:6443 --token euztag.6yjbhn94ehg6nhn7 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:a6e917b751e424c7a761c2276ae02db95d87ba5a3cc6b374182519ce89aba28b </span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为默认 master 不能部署 pod，有污点，需要去掉污点或者新增一个 node</span></span><br><span class="line">kubectl get node -o yaml | grep taint -A 5 <span class="comment"># 执行后看到有输出说明有污点</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-   <span class="comment"># 执行这句就行，就是取消污点</span></span><br></pre></td></tr></table></figure><p>k8s-master：创建 kube 的配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># root 用户可执行</span></span><br><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure><p>k8s-master：创建 calico.yaml 文件，并且复制 <a href="https://gitee.com/maysean/kubernetes/blob/master/calico.yaml">calico.yaml</a> 的内容，按需要修改</p><p>在文件中 搜索 <code>CALICO_IPV4POOL_CIDR </code> 按照 <code>kubeadm init</code> 初始化时指定的 <code>--pod-network-cidr</code> 值修改 <code>CALICO_IPV4POOL_CIDR</code> 的 <code>value</code> 值，安装 <code>calico</code> 网络插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 附：卸载网络插件（按需执行）</span></span><br><span class="line">kubectl delete -f calico.yaml</span><br></pre></td></tr></table></figure><p>k8s-master：集群状况查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看集群节点，全部都是 Ready 就是正常的</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群 pod，全部都是 Running 就是正常的</span></span><br><span class="line">kubectl get pods -A</span><br></pre></td></tr></table></figure><p>k8s-master：安装补全命令的包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum -y install bash-completion</span><br><span class="line">kubectl completion bash</span><br><span class="line"><span class="built_in">source</span> /usr/share/bash-completion/bash_completion</span><br><span class="line">kubectl completion bash &gt;/etc/profile.d/kubectl.sh</span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/kubectl.sh</span><br><span class="line"><span class="built_in">cat</span>  &gt;&gt;  /root/.bashrc &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">source /etc/profile.d/kubectl.sh</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>k8s-master：创建 recommended.yaml 文件，并且复制 <a href="https://gitee.com/maysean/kubernetes/blob/master/recommended.yaml">recommended.yaml</a> 的内容</p><p>部署可视化界面，等到 Running</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f recommended.yaml</span><br></pre></td></tr></table></figure><p>k8s-master：设置访问端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件，找到 type，将 ClusterIP 改成 NodePort</span></span><br><span class="line">kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到端口，在安全组放行</span></span><br><span class="line">kubectl get svc -A | grep kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 32369 就是访问端口，浏览器地址栏输入 https://192.168.200.131:32369 访问，</span></span><br><span class="line"><span class="comment"># 如果显示隐私错误，在浏览器空白处实用键盘输入 thisisunsafe 然后回车</span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># kubectl get svc -A | grep kubernetes-dashboard</span></span><br><span class="line">kubernetes-dashboard   dashboard-metrics-scraper   ClusterIP   10.105.47.192   &lt;none&gt;        8000/TCP                 16m</span><br><span class="line">kubernetes-dashboard   kubernetes-dashboard        NodePort    10.96.193.78    &lt;none&gt;        443:32369/TCP            16m</span><br></pre></td></tr></table></figure><p>k8s-master：创建访问账号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">tee</span> ./dash-usr.yaml &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line"><span class="comment"># 创建访问账号，准备一个 yaml 文件，加入下面配置</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 k8s 集群中创建资源</span></span><br><span class="line">kubectl apply -f dash-usr.yaml</span><br></pre></td></tr></table></figure><p>获取访问令牌</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath=<span class="string">&quot;&#123;.secrets[0].name&#125;&quot;</span>) -o go-template=<span class="string">&quot;&#123;&#123;.data.token | base64decode&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>复制 token 粘贴在页面上，点击登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IlhnZlJCY2lHaXc5bXhsa3NFdFQxR2c2Q2d6T2F2VmtWT2xSQXp1eTlaaHMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTVmbmY5Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJkZmZiZjczNy00ZGEzLTQwMzItODIwYi1jMDVhZjRhY2FkYWUiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.mqLlRD8vz90p-sZeescDiC-48kzKncVZE0maFMt8MEUN-c3eCtZLYYsILzsVb73js--h_Nbxbr24N-eqeUNbC8NQ-b4Y78n3AGuIcDqmYLEik7UQ0_IiljokM0Aw_uBAdJoq9kU_26eIBFXUt1TAPtkDe3fUeqfyOLO6Mm9tDoKpDWlJAbHXssU4lMBz2X7mdeBMeZhh2h863hs4pjTNaKymJsKtKIXVtCCHoyz-uT0IszTbbtj1tHaQ7zSY9F6yVWfMpxX4drdcTSw-fvK1A4eVejhVggU_Ot6_9eqJuTvbcWza9UZybzrpfXrfiQ46SlnnpqZ5R6e8XbQ-36U2qA</span><br></pre></td></tr></table></figure><h3 id="kubernetes-集群"><a href="#kubernetes-集群" class="headerlink" title="kubernetes 集群"></a>kubernetes 集群</h3><h4 id="版本介绍-1"><a href="#版本介绍-1" class="headerlink" title="版本介绍"></a>版本介绍</h4><blockquote><p>kubernetes 与 docker 存在版本对应关系</p></blockquote><p>此次安装的 <code>kubernetes</code> 版本：v1.20.9；<code>docker</code> 版本：v20.10.7</p><h4 id="虚拟机环境-1"><a href="#虚拟机环境-1" class="headerlink" title="虚拟机环境"></a>虚拟机环境</h4><p>三台 CentOS 7 64 位的虚拟机，IP 分别为 <code>192.168.200.131</code>；<code>192.168.200.132</code>；<code>192.168.200.133</code></p><p>如果只有一台 IP 为 <code>192.168.200.128</code> 的虚拟机，可以通过克隆，修改 <code>IP</code> 以及主机名完成</p><p>分别在三台虚拟机上执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-master</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/192\.168\.200\.128/192.168.200.131/g&#x27;</span> /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">systemctl restart network</span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname k8s-node1</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/192\.168\.200\.128/192.168.200.132/g&#x27;</span> /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">systemctl restart network</span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname k8s-node2</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/192\.168\.200\.128/192.168.200.133/g&#x27;</span> /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>k8s-master：配置 hosts 文件，本地解析 k8s-node1 和 k8s-node2 地址</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.200.131 k8s-master</span></span><br><span class="line"><span class="string">192.168.200.132 k8s-node1</span></span><br><span class="line"><span class="string">192.168.200.133 k8s-node2</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="部署过程-1"><a href="#部署过程-1" class="headerlink" title="部署过程"></a>部署过程</h4><p>k8s-master、k8s-node1、k8s-node2：禁用 firewalld；禁用 selinux，关闭 swap 分区，编辑hosts 文件；将桥接的 ipv4 流量传递到 iptables 的链，重启之后使用 <code>free -m</code> 查看 swap</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line">sed -ri <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line">reboot</span><br><span class="line">free -m</span><br></pre></td></tr></table></figure><blockquote><p>安装 docker，参考安装 docker 篇</p></blockquote><p>k8s-master、k8s-node1、k8s-node2：配置 k8s 的 yum 源地址</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class="line"><span class="string">  http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>k8s-master、k8s-node1、k8s-node2：安装 kubelet、kubeadm、kubectl</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 kubelet、kubeadm、kubectl</span></span><br><span class="line">yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 kubelet</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 kubelet 状态</span></span><br><span class="line">systemctl status kubelet</span><br></pre></td></tr></table></figure><p>k8s-master、k8s-node1、k8s-node2：docker 登录 registry.cn-hangzhou.aliyuncs.com 仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 退出登录 registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line">docker <span class="built_in">logout</span> registry.cn-hangzhou.aliyuncs.com</span><br><span class="line"><span class="comment"># 登录 registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line">docker login -u maysean -p wt264ydfk1jiggsu registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure><p>k8s-master：编写镜像拉取脚本，修改文件权限，执行脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">tee</span> ./images.sh &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要拉取的镜像列表</span></span><br><span class="line">images=(</span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/calico-node:v3.20.6&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/calico-pod2daemon-flexvol:v3.20.6&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/calico-cni:v3.20.6&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/calico-kube-controllers:v3.20.6&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/kube-proxy:v1.20.9&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/kube-controller-manager:v1.20.9&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/kube-scheduler:v1.20.9&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/kube-apiserver:v1.20.9&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/etcd:3.4.13-0&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/coredns:1.7.0&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/pause:3.2&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/kubernetesui-dashboard:v2.3.1&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/kubernetesui-metrics-scraper:v1.0.6&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/ingress-nginx-controller:v0.46.0&quot;</span></span><br><span class="line">    <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/maysean/jettech-kube-webhook-certgen:v1.5.1&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历镜像列表并逐个拉取镜像</span></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;images[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Pulling image: <span class="variable">$image</span>&quot;</span></span><br><span class="line">    docker pull <span class="string">&quot;<span class="variable">$image</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Error: Failed to pull image <span class="variable">$image</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;All images pulled successfully.&quot;</span></span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line"><span class="built_in">chmod</span> +x ./images.sh &amp;&amp; ./images.sh</span><br></pre></td></tr></table></figure><p>k8s-master：初始化 kubeadm，注意 <code>--apiserver-advertise-address</code>；<code>--service-cidr</code>；<code>--pod-network-cidr</code> 3 个网络互相不能重叠</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果是单机部署，先执行；集群部署则不用</span></span><br><span class="line">sysctl -w net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=192.168.200.131 \</span><br><span class="line">--control-plane-endpoint=k8s-master \</span><br><span class="line">--image-repository registry.cn-hangzhou.aliyuncs.com/maysean \</span><br><span class="line">--kubernetes-version v1.20.9 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><p>k8s-master：初始化成功之后会打印以下信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now <span class="built_in">join</span> any number of control-plane nodes by copying certificate authorities</span><br><span class="line">and service account keys on each node and <span class="keyword">then</span> running the following as root:</span><br><span class="line"></span><br><span class="line">  kubeadm <span class="built_in">join</span> k8s-master:6443 --token euztag.6yjbhn94ehg6nhn7 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:a6e917b751e424c7a761c2276ae02db95d87ba5a3cc6b374182519ce89aba28b \</span><br><span class="line">    --control-plane </span><br><span class="line"></span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm <span class="built_in">join</span> k8s-master:6443 --token euztag.6yjbhn94ehg6nhn7 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:a6e917b751e424c7a761c2276ae02db95d87ba5a3cc6b374182519ce89aba28b </span><br></pre></td></tr></table></figure><p>k8s-master：创建 kube 的配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># root 用户可执行</span></span><br><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure><p>k8s-master：创建 calico.yaml 文件，并且复制 <a href="https://gitee.com/maysean/kubernetes/blob/master/calico.yaml">calico.yaml</a> 的内容，按需要修改</p><p>在文件中 搜索 <code>CALICO_IPV4POOL_CIDR </code> 按照 <code>kubeadm init</code> 初始化时指定的 <code>--pod-network-cidr</code> 值修改 <code>CALICO_IPV4POOL_CIDR</code> 的 <code>value</code> 值，安装 <code>calico</code> 网络插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 附：卸载网络插件（按需执行）</span></span><br><span class="line">kubectl delete -f calico.yaml</span><br></pre></td></tr></table></figure><p>k8s-node1、k8s-node2：加入 k8s 集群，以下两种方式可选其中一种</p><ol><li>此 token 有效期为 24 小时</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> k8s-master:6443 --token euztag.6yjbhn94ehg6nhn7 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:a6e917b751e424c7a761c2276ae02db95d87ba5a3cc6b374182519ce89aba28b </span><br></pre></td></tr></table></figure><ol start="2"><li>生成永不过期 token，获取 hash 码，</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token create --ttl 0</span><br><span class="line">openssl x509 -pubkey -<span class="keyword">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed <span class="string">&#x27;s/^.* //&#x27;</span></span><br></pre></td></tr></table></figure><p>将生成的 token 和 hash 码分别替换掉 <code>&lt;token&gt;</code> 和 <code>&lt;hash&gt;</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> k8s-master:6443 --token &lt;token&gt; \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:&lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure><p>k8s-master：集群状况查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看集群节点，全部都是 Ready 就是正常的</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群 pod，全部都是 Running 就是正常的</span></span><br><span class="line">kubectl get pods -A</span><br></pre></td></tr></table></figure><h4 id="补全命令"><a href="#补全命令" class="headerlink" title="补全命令"></a>补全命令</h4><p>k8s-master、k8s-node1、k8s-node2：安装补全命令的包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum -y install bash-completion</span><br><span class="line">kubectl completion bash</span><br><span class="line"><span class="built_in">source</span> /usr/share/bash-completion/bash_completion</span><br><span class="line">kubectl completion bash &gt;/etc/profile.d/kubectl.sh</span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/kubectl.sh</span><br><span class="line"><span class="built_in">cat</span>  &gt;&gt;  /root/.bashrc &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">source /etc/profile.d/kubectl.sh</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="配置-kubectl-命令"><a href="#配置-kubectl-命令" class="headerlink" title="配置 kubectl 命令"></a>配置 kubectl 命令</h4><p>k8s-node1、k8s-node2：配置 <code>kubectl</code> 命令</p><p><code>kubectl</code> 需要一个配置文件（通常是 <code>~/.kube/config</code>）来连接到 Kubernetes API 服务器。你可以通过以下命令检查配置文件是否存在：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> ~/.kube/config</span><br></pre></td></tr></table></figure><p>k8s-master：从主节点（master node）复制配置文件到从节点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /root/.kube</span><br><span class="line"><span class="comment"># USER 替换成实际在 k8s-node1 节点上登录的用户，例如：root</span></span><br><span class="line"><span class="comment"># scp /etc/kubernetes/admin.conf &#123;USER&#125;@k8s-node1:~/.kube/config</span></span><br><span class="line">scp /etc/kubernetes/admin.conf root@k8s-node1:~/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/.kube</span><br><span class="line"><span class="comment"># USER 替换成实际在 k8s-node2 节点上登录的用户，例如：root</span></span><br><span class="line"><span class="comment"># scp /etc/kubernetes/admin.conf &#123;USER&#125;@k8s-node2:~/.kube/config</span></span><br><span class="line">scp /etc/kubernetes/admin.conf root@k8s-node2:~/.kube/config</span><br></pre></td></tr></table></figure><p>k8s-node1、k8s-node2：从节点上设置 <code>KUBECONFIG</code> 环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KUBECONFIG=~/.kube/config</span><br></pre></td></tr></table></figure><h4 id="可视化界面"><a href="#可视化界面" class="headerlink" title="可视化界面"></a>可视化界面</h4><p>k8s-master：创建 recommended.yaml 文件，并且复制 <a href="https://gitee.com/maysean/kubernetes/blob/master/recommended.yaml">recommended.yaml</a> 的内容</p><p>部署可视化界面，等到 Running</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f recommended.yaml</span><br></pre></td></tr></table></figure><p>k8s-master：设置访问端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件，找到 type，将 ClusterIP 改成 NodePort</span></span><br><span class="line">kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到端口，在安全组放行</span></span><br><span class="line">kubectl get svc -A | grep kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 32369 就是访问端口，浏览器地址栏输入 https://192.168.200.131:32369 访问，</span></span><br><span class="line"><span class="comment"># 如果显示隐私错误，在浏览器空白处实用键盘输入 thisisunsafe 然后回车</span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># kubectl get svc -A | grep kubernetes-dashboard</span></span><br><span class="line">kubernetes-dashboard   dashboard-metrics-scraper   ClusterIP   10.105.47.192   &lt;none&gt;        8000/TCP                 16m</span><br><span class="line">kubernetes-dashboard   kubernetes-dashboard        NodePort    10.96.193.78    &lt;none&gt;        443:32369/TCP            16m</span><br></pre></td></tr></table></figure><p>k8s-master：创建访问账号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">tee</span> ./dash-usr.yaml &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line"><span class="comment"># 创建访问账号，准备一个 yaml 文件，加入下面配置</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 k8s 集群中创建资源</span></span><br><span class="line">kubectl apply -f dash-usr.yaml</span><br></pre></td></tr></table></figure><p>获取访问令牌</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath=<span class="string">&quot;&#123;.secrets[0].name&#125;&quot;</span>) -o go-template=<span class="string">&quot;&#123;&#123;.data.token | base64decode&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>复制 token 粘贴在页面上，点击登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IlhnZlJCY2lHaXc5bXhsa3NFdFQxR2c2Q2d6T2F2VmtWT2xSQXp1eTlaaHMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTVmbmY5Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJkZmZiZjczNy00ZGEzLTQwMzItODIwYi1jMDVhZjRhY2FkYWUiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.mqLlRD8vz90p-sZeescDiC-48kzKncVZE0maFMt8MEUN-c3eCtZLYYsILzsVb73js--h_Nbxbr24N-eqeUNbC8NQ-b4Y78n3AGuIcDqmYLEik7UQ0_IiljokM0Aw_uBAdJoq9kU_26eIBFXUt1TAPtkDe3fUeqfyOLO6Mm9tDoKpDWlJAbHXssU4lMBz2X7mdeBMeZhh2h863hs4pjTNaKymJsKtKIXVtCCHoyz-uT0IszTbbtj1tHaQ7zSY9F6yVWfMpxX4drdcTSw-fvK1A4eVejhVggU_Ot6_9eqJuTvbcWza9UZybzrpfXrfiQ46SlnnpqZ5R6e8XbQ-36U2qA</span><br></pre></td></tr></table></figure><h4 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h4><p>k8s-master：创建 deploy.yaml 文件，并且复制 <a href="https://gitee.com/maysean/kubernetes/blob/master/deploy.yaml">deploy.yaml</a> 的内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装资源</span></span><br><span class="line">kubectl apply -f deploy.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查安装的结果</span></span><br><span class="line">kubectl get pod,svc -n ingress-nginx</span><br></pre></td></tr></table></figure><p>未完待续…</p><h3 id="k8s-学习心得"><a href="#k8s-学习心得" class="headerlink" title="k8s 学习心得"></a>k8s 学习心得</h3><p>在实际项目开发中，资源名称和命名空间的命名通常遵循一定的规范和最佳实践，以确保资源的可读性、可维护性和唯一性。以下是一些常见的命名约定和建议：</p><h4 id="资源名称"><a href="#资源名称" class="headerlink" title="资源名称"></a>资源名称</h4><p>资源名称应该简洁、描述性强，并且遵循 Kubernetes 的命名规则（只能包含小写字母、数字和短划线，且必须以字母开头和结尾）。</p><p>常见命名约定</p><ol><li><p><strong>应用名称</strong>：</p><ul><li>使用应用程序的名称作为资源名称的一部分。</li><li>例如：<code>myapp</code>, <code>webserver</code>, <code>database</code>.</li></ul></li><li><p><strong>环境</strong>：</p><ul><li>在资源名称中包含环境信息（如 <code>dev</code>, <code>test</code>, <code>prod</code>）。</li><li>例如：<code>myapp-dev</code>, <code>webserver-prod</code>.</li></ul></li><li><p><strong>功能或角色</strong>：</p><ul><li>在资源名称中包含资源的功能或角色。</li><li>例如：<code>myapp-backend</code>, <code>myapp-frontend</code>.</li></ul></li><li><p><strong>版本号</strong>：</p><ul><li>在资源名称中包含版本号（如果需要）。</li><li>例如：<code>myapp-v1</code>, <code>myapp-v2</code>.</li></ul></li></ol><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>命名空间用于逻辑隔离资源，通常根据环境、团队或项目进行划分。</p><h4 id="常见命名约定"><a href="#常见命名约定" class="headerlink" title="常见命名约定"></a>常见命名约定</h4><ol><li><p><strong>环境</strong>：</p><ul><li>使用环境名称作为命名空间名称。</li><li>例如：<code>development</code>, <code>staging</code>, <code>production</code>.</li></ul></li><li><p><strong>团队或部门</strong>：</p><ul><li>使用团队或部门名称作为命名空间名称。</li><li>例如：<code>frontend-team</code>, <code>backend-team</code>.</li></ul></li><li><p><strong>项目或应用</strong>：</p><ul><li>使用项目或应用名称作为命名空间名称。</li><li>例如：<code>project-alpha</code>, <code>project-beta</code>.</li></ul></li><li><p><strong>组合使用</strong>：</p><ul><li>结合环境和项目名称进行命名。</li><li>例如：<code>dev-myapp</code>, <code>prod-myapp</code>.</li></ul></li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>以下是一个实际项目中可能的资源名称和命名空间的示例：</p><h4 id="命名空间-1"><a href="#命名空间-1" class="headerlink" title="命名空间"></a>命名空间</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">development</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">production</span></span><br></pre></td></tr></table></figure><h4 id="Pod-定义"><a href="#Pod-定义" class="headerlink" title="Pod 定义"></a>Pod 定义</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-backend</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">development</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">myapp-backend:latest</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-backend</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">production</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">myapp-backend:latest</span></span><br></pre></td></tr></table></figure><h3 id="更新-Kubernetes-资源中容器镜像"><a href="#更新-Kubernetes-资源中容器镜像" class="headerlink" title="更新 Kubernetes 资源中容器镜像"></a>更新 Kubernetes 资源中容器镜像</h3><p><code>kubectl set image</code> 是一个用于更新 Kubernetes 资源中容器镜像的命令。它可以在不修改原始 YAML 文件的情况下，直接更新正在运行的 Deployment、DaemonSet、StatefulSet 等资源的镜像版本。</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>以下是 <code>kubectl set image</code> 命令的基本语法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image &lt;resource_type&gt;/&lt;resource_name&gt; &lt;container_name&gt;=&lt;new_image&gt;</span><br></pre></td></tr></table></figure><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>假设你有一个名为 <code>my-deployment</code> 的 Deployment，其中包含一个名为 <code>my-container</code> 的容器。你想将这个容器的镜像更新为 <code>nginx:1.19</code>，可以使用以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image deployment/my-deployment my-container=nginx:1.19</span><br></pre></td></tr></table></figure><h4 id="多个容器"><a href="#多个容器" class="headerlink" title="多个容器"></a>多个容器</h4><p>如果你的 Deployment 中有多个容器，你可以一次性更新多个容器的镜像。例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image deployment/my-deployment my-container1=nginx:1.19 my-container2=redis:6.0</span><br></pre></td></tr></table></figure><h4 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h4><p>如果新镜像有问题，你可以使用 <code>kubectl rollout undo</code> 命令回滚到之前的版本。例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout undo deployment/my-deployment</span><br></pre></td></tr></table></figure><h4 id="检查更新状态"><a href="#检查更新状态" class="headerlink" title="检查更新状态"></a>检查更新状态</h4><p>你可以使用 <code>kubectl rollout status</code> 命令来检查更新的状态。例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout status deployment/my-deployment</span><br></pre></td></tr></table></figure><h4 id="示例-YAML"><a href="#示例-YAML" class="headerlink" title="示例 YAML"></a>示例 YAML</h4><p>假设你有以下 Deployment YAML 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">my-app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-container</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.18</span></span><br></pre></td></tr></table></figure><p>你可以使用 <code>kubectl set image</code> 命令将 <code>nginx:1.18</code> 更新为 <code>nginx:1.19</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image deployment/my-deployment my-container=nginx:1.19</span><br></pre></td></tr></table></figure><p>更新后，Deployment 的镜像将变为 <code>nginx:1.19</code>，并且 Kubernetes 会自动进行滚动更新，将旧的 Pod 替换为新的 Pod。</p><h3 id="SVC"><a href="#SVC" class="headerlink" title="SVC"></a>SVC</h3><p>要通过 YAML 文件在 Kubernetes 中创建一个服务（Service），你可以按照以下步骤进行。下面是一个示例 YAML 文件，用于创建一个 <code>ClusterIP</code> 类型的服务，以及如何将其应用到 Kubernetes 集群中。</p><h4 id="示例-YAML-文件"><a href="#示例-YAML-文件" class="headerlink" title="示例 YAML 文件"></a>示例 YAML 文件</h4><p>以下是一个示例 YAML 文件，用于创建一个名为 <code>nginx-service</code> 的 <code>ClusterIP</code> 类型的服务，将其端口 <code>80</code> 映射到目标端口 <code>80</code>。</p><p>ClusterIP 类型的服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h4 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h4><ol><li><p><strong>保存 YAML 文件</strong>：将上述内容保存到一个名为 <code>nginx-service.yaml</code> 的文件中。</p></li><li><p><strong>应用 YAML 文件</strong>：使用 <code>kubectl apply</code> 命令将服务应用到 Kubernetes 集群中。</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nginx-service.yaml</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>验证服务</strong>：确保服务已经成功创建并运行。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc nginx-service</span><br></pre></td></tr></table></figure><p>NodePort 类型的服务</p><p>如果你希望从集群外部访问服务，可以创建一个 <code>NodePort</code> 类型的服务。以下是一个示例 YAML 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30080</span>  <span class="comment"># 可选，指定 NodePort 范围内的端口</span></span><br></pre></td></tr></table></figure><h4 id="LoadBalancer-类型的服务"><a href="#LoadBalancer-类型的服务" class="headerlink" title="LoadBalancer 类型的服务"></a>LoadBalancer 类型的服务</h4><p>如果你的 Kubernetes 集群运行在支持负载均衡的云提供商上（如 AWS、GCP、Azure），你可以创建一个 <code>LoadBalancer</code> 类型的服务。以下是一个示例 YAML 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h4 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h4><p>假设你有一个名为 <code>nginx-deploy</code> 的 Deployment，以下是完整的 Deployment 和 Service YAML 文件示例：</p><h5 id="Deployment-YAML-文件"><a href="#Deployment-YAML-文件" class="headerlink" title="Deployment YAML 文件"></a>Deployment YAML 文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deploy</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span> <span class="comment"># pod 的 label</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h5 id="Service-YAML-文件"><a href="#Service-YAML-文件" class="headerlink" title="Service YAML 文件"></a>Service YAML 文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span>  <span class="comment"># 或者 ClusterIP, LoadBalancer</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span> <span class="comment"># 与 pod 进行绑定</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30080</span>  <span class="comment"># 仅在 type: NodePort 时需要</span></span><br></pre></td></tr></table></figure><h5 id="应用-YAML-文件"><a href="#应用-YAML-文件" class="headerlink" title="应用 YAML 文件"></a>应用 YAML 文件</h5><ol><li><p><strong>保存 Deployment 和 Service YAML 文件</strong>：将上述内容分别保存到 <code>nginx-deploy.yaml</code> 和 <code>nginx-service.yaml</code> 文件中。</p></li><li><p><strong>应用 Deployment 和 Service</strong>：</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nginx-deploy.yaml</span><br><span class="line">kubectl apply -f nginx-service.yaml</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>验证 Deployment 和 Service</strong>：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployments</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc nginx-service</span><br></pre></td></tr></table></figure><p>通过这些步骤，你可以在 Kubernetes 集群中创建并管理服务，以确保应用程序能够被正确访问。</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>在你的 Kubernetes Deployment YAML 文件中，有三处与标签（labels）有关的配置。每一处标签的作用和含义如下：</p><h4 id="eployment-元数据中的标签"><a href="#eployment-元数据中的标签" class="headerlink" title="eployment 元数据中的标签"></a>eployment 元数据中的标签</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-dep</span></span><br></pre></td></tr></table></figure><h5 id="作用与含义："><a href="#作用与含义：" class="headerlink" title="作用与含义："></a>作用与含义：</h5><ul><li><strong>作用</strong>：为 Deployment 本身添加标签。</li><li><strong>含义</strong>：这些标签可以用于标识和查询 Deployment 资源。例如，你可以使用 <code>kubectl get deployments -l app=my-dep</code> 来查询所有带有 <code>app: my-dep</code> 标签的 Deployment。</li></ul><h4 id="Pod-模板元数据中的标签"><a href="#Pod-模板元数据中的标签" class="headerlink" title="Pod 模板元数据中的标签"></a>Pod 模板元数据中的标签</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">template:</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">my-dep</span></span><br></pre></td></tr></table></figure><h5 id="作用与含义：-1"><a href="#作用与含义：-1" class="headerlink" title="作用与含义："></a>作用与含义：</h5><ul><li><strong>作用</strong>：为由这个 Deployment 创建的 Pod 添加标签。</li><li><strong>含义</strong>：这些标签用于标识和查询 Pod 资源，并且与 Deployment 的选择器（selector）相匹配。确保这些 Pod 会被 Deployment 选择器识别和管理。例如，你可以使用 <code>kubectl get pods -l app=my-dep</code> 来查询所有带有 <code>app: my-dep</code> 标签的 Pod。</li></ul><h4 id="Deployment-选择器中的标签匹配"><a href="#Deployment-选择器中的标签匹配" class="headerlink" title="Deployment 选择器中的标签匹配"></a>Deployment 选择器中的标签匹配</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">selector:</span></span><br><span class="line">  <span class="attr">matchLabels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-dep</span></span><br></pre></td></tr></table></figure><h5 id="作用与含义：-2"><a href="#作用与含义：-2" class="headerlink" title="作用与含义："></a>作用与含义：</h5><ul><li><strong>作用</strong>：定义 Deployment 如何选择和匹配 Pod。</li><li><strong>含义</strong>：<code>matchLabels</code> 是一个键值对的集合，Deployment 会选择那些标签中包含 <code>app: my-dep</code> 的 Pod。这个选择器确保 Deployment 只管理那些具有匹配标签的 Pod。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><strong>Deployment 元数据中的标签</strong>：用于标识和查询 Deployment 资源。</li><li><strong>Pod 模板元数据中的标签</strong>：用于标识和查询由 Deployment 创建的 Pod，并确保这些 Pod 能被 Deployment 选择器匹配到。</li><li><strong>Deployment 选择器中的标签匹配</strong>：定义 Deployment 如何选择和管理 Pod，确保只管理那些具有特定标签的 Pod。</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h3><p><code>tree</code>命令是一个用于以树状结构显示文件和目录的命令行工具。它在Linux和Unix系统中非常常用，用于直观地展示目录结构。以下是<code>tree</code>命令的详细用法和一些常用选项：</p><h4 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree</span><br></pre></td></tr></table></figure><p>默认情况下，<code>tree</code>命令会在当前目录下递归显示所有的子目录和文件。</p><h4 id="常用选项："><a href="#常用选项：" class="headerlink" title="常用选项："></a>常用选项：</h4><ul><li><p><strong><code>-L</code> 指定递归的深度</strong>：例如，<code>tree -L 2</code>将只显示当前目录下的直接子目录和文件，不再递归显示子目录的内容。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -L 2</span><br></pre></td></tr></table></figure></li><li><p><strong><code>-d</code> 只显示目录</strong>：该选项只会显示目录，而不显示文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -d</span><br></pre></td></tr></table></figure></li><li><p><strong><code>-a</code> 显示所有文件和目录，包括隐藏文件</strong>：默认情况下，<code>tree</code>命令不显示以点开头的隐藏文件，使用<code>-a</code>选项可以显示所有文件和目录。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -a</span><br></pre></td></tr></table></figure></li><li><p><strong><code>-I</code> 排除特定模式的文件或目录</strong>：例如，<code>tree -I &quot;*.log&quot;</code>将排除所有扩展名为 <code>.log</code> 的文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -I <span class="string">&quot;*.log&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>-p</code> 显示权限模式</strong>：该选项会在每个文件和目录的名称前面显示权限模式。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -p</span><br></pre></td></tr></table></figure></li><li><p><strong><code>-h</code> 人类可读的文件大小</strong>：该选项会以人类可读的格式（例如 KB、MB）显示文件大小。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -h</span><br></pre></td></tr></table></figure></li></ul><p>这些选项可以根据你的需求组合使用，以便获取你想要的目录结构显示。<code>tree</code> 命令非常适合用于快速查看和分析目录结构，尤其是当你需要了解大型项目或者复杂目录结构时。</p><h3 id="firewall"><a href="#firewall" class="headerlink" title="firewall"></a>firewall</h3><p>在 CentOS 上，你可以使用 <code>firewalld</code> 来配置防火墙规则。以下是一些常见的防火墙操作命令：</p><ol><li><p><strong>检查防火墙状态</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --state</span><br></pre></td></tr></table></figure><p>这个命令会告诉你防火墙是启用（<code>running</code>）还是禁用（<code>not running</code>）。</p></li><li><p><strong>启用&#x2F;禁用防火墙</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用防火墙</span></span><br><span class="line">sudo systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止防火墙</span></span><br><span class="line">sudo systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置防火墙开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止防火墙开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure></li><li><p><strong>添加&#x2F;删除防火墙规则</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加规则（例如，打开端口 80）</span></span><br><span class="line">sudo firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除规则</span></span><br><span class="line">sudo firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>在这里，<code>--zone</code> 参数指定了规则应该应用在哪个区域（例如，<code>public</code>、<code>internal</code>、<code>trusted</code> 等）。<code>--add-port</code> 用于添加端口规则，<code>--permanent</code> 表示这个规则是持久的，会在防火墙重启后保留。</p></li><li><p><strong>查看所有开放的端口</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><p>这个命令会列出当前区域（public）开放的所有端口。</p></li></ol><h3 id="查看所有环境变量"><a href="#查看所有环境变量" class="headerlink" title="查看所有环境变量"></a>查看所有环境变量</h3><p>用 <code>printenv</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printenv</span></span><br></pre></td></tr></table></figure><p>该命令将列出所有环境变量及其值。</p><p>使用 <code>env</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">env</span></span><br></pre></td></tr></table></figure><p>这个命令也会列出所有环境变量及其值。</p><p>使用 <code>set</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span></span><br></pre></td></tr></table></figure><p><code>set</code>命令不仅列出所有环境变量，还列出所有 shell 变量</p><h3 id="CentOS-必备软件"><a href="#CentOS-必备软件" class="headerlink" title="CentOS 必备软件"></a>CentOS 必备软件</h3><ol><li><p><strong>文本编辑器</strong>：例如 Vim、Nano 或 Emacs，用于编辑配置文件和编写脚本。</p></li><li><p><strong>网络工具</strong>：例如 curl 和 wget 用于从网络上下载文件，net-tools 包含了一些网络工具如 ifconfig、netstat 等。</p></li><li><p><strong>系统监控工具</strong>：例如 htop 或 top，用于监视系统资源使用情况。</p></li><li><p><strong>版本控制工具</strong>：例如 Git 或 Subversion，用于管理代码版本。</p></li><li><p><strong>压缩&#x2F;解压工具</strong>：例如 gzip、tar 和 unzip，用于处理压缩文件。</p></li><li><p><strong>安全工具</strong>：例如 OpenSSH 客户端和服务器，用于远程登录和文件传输。</p></li></ol><p>您可以使用以下命令来安装这些软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y vim nano emacs curl wget net-tools htop gzip tar unzip openssh-clients openssh-server</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一文搞懂 Dockerfile</title>
      <link href="/dockerfile/"/>
      <url>/dockerfile/</url>
      
        <content type="html"><![CDATA[<h1 id="一文搞懂-Dockerfile"><a href="#一文搞懂-Dockerfile" class="headerlink" title="一文搞懂 Dockerfile"></a>一文搞懂 Dockerfile</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>每个指令以大写字母开头。</li><li>指令后面可以跟一个或多个参数。</li><li>注释以 <code>#</code> 开头。</li></ul><h2 id="常用关键字和指令"><a href="#常用关键字和指令" class="headerlink" title="常用关键字和指令"></a>常用关键字和指令</h2><h3 id="1-FROM"><a href="#1-FROM" class="headerlink" title="1. FROM"></a>1. <code>FROM</code></h3><p>指定基础镜像。每个 Dockerfile 必须以 <code>FROM</code> 指令开头。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br></pre></td></tr></table></figure><h3 id="2-LABEL"><a href="#2-LABEL" class="headerlink" title="2. LABEL"></a>2. <code>LABEL</code></h3><p>添加元数据到镜像中，例如维护者信息。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;your-email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-RUN"><a href="#3-RUN" class="headerlink" title="3. RUN"></a>3. <code>RUN</code></h3><p>在镜像构建过程中执行命令。常用于安装软件包。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y curl</span></span><br></pre></td></tr></table></figure><h3 id="4-COPY"><a href="#4-COPY" class="headerlink" title="4. COPY"></a>4. <code>COPY</code></h3><p>将文件或目录从构建上下文复制到镜像中。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> target/boot-dockerfile-1.0.jar /app/app.jar</span></span><br></pre></td></tr></table></figure><h3 id="5-ADD"><a href="#5-ADD" class="headerlink" title="5. ADD"></a>5. <code>ADD</code></h3><p>类似于 <code>COPY</code>，但功能更强大，可以自动解压 tar 文件，并支持从 URL 下载文件。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="language-bash"> https://example.com/file.tar.gz /app/</span></span><br></pre></td></tr></table></figure><h3 id="6-CMD"><a href="#6-CMD" class="headerlink" title="6. CMD"></a>6. <code>CMD</code></h3><p>指定容器启动时要执行的命令。可以被 <code>docker run</code> 命令行参数覆盖。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="7-ENTRYPOINT"><a href="#7-ENTRYPOINT" class="headerlink" title="7. ENTRYPOINT"></a>7. <code>ENTRYPOINT</code></h3><p>指定容器启动时要执行的主进程。不会被 <code>docker run</code> 命令行参数覆盖，但可以追加参数。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h4 id="CMD-和-ENTRYPOINT-区别"><a href="#CMD-和-ENTRYPOINT-区别" class="headerlink" title="CMD 和 ENTRYPOINT 区别"></a>CMD 和 ENTRYPOINT 区别</h4><p><code>CMD</code> 和 <code>ENTRYPOINT</code> 是 Dockerfile 中用于指定容器启动时要执行的命令的两种指令。它们有一些相似之处，但也有重要的区别。</p><p><code>CMD</code> 和 <code>ENTRYPOINT</code> 的区别</p><ul><li>**<code>CMD</code>**：指定容器启动时的默认命令和参数，但可以被 <code>docker run</code> 命令行参数覆盖。</li><li>**<code>ENTRYPOINT</code>**：指定容器启动时的主进程，不会被 <code>docker run</code> 命令行参数覆盖，但可以追加参数。</li></ul><p>示例</p><p>使用 <code>CMD</code></p><p>假设你有一个简单的 Dockerfile，使用 <code>CMD</code> 指令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 curl</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y curl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;Hello, World!&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>构建镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t cmd-example .</span><br></pre></td></tr></table></figure><p>运行容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run cmd-example</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><p>覆盖默认命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run cmd-example <span class="built_in">echo</span> <span class="string">&quot;Hello, Docker!&quot;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, Docker!</span><br></pre></td></tr></table></figure><p>使用 <code>ENTRYPOINT</code></p><p>假设你有一个简单的 Dockerfile，使用 <code>ENTRYPOINT</code> 指令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 curl</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y curl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置入口点</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;Hello, World!&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>构建镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t entrypoint-example .</span><br></pre></td></tr></table></figure><p>运行容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run entrypoint-example</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><p>追加参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run entrypoint-example <span class="string">&quot;Hello, Docker!&quot;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, World! Hello, Docker!</span><br></pre></td></tr></table></figure><p>结合使用 <code>ENTRYPOINT</code> 和 <code>CMD</code></p><p>你可以结合使用 <code>ENTRYPOINT</code> 和 <code>CMD</code>，其中 <code>CMD</code> 提供默认参数，<code>ENTRYPOINT</code> 提供主进程。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 curl</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y curl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置入口点</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认参数</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;Hello, World!&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>构建镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t combined-example .</span><br></pre></td></tr></table></figure><p>运行容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run combined-example</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><p>覆盖默认参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run combined-example <span class="string">&quot;Hello, Docker!&quot;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, Docker!</span><br></pre></td></tr></table></figure><p>总结</p><ul><li>**<code>CMD</code>**：用于指定容器启动时的默认命令和参数，可以被 <code>docker run</code> 命令行参数覆盖。</li><li>**<code>ENTRYPOINT</code>**：用于指定容器启动时的主进程，不会被 <code>docker run</code> 命令行参数覆盖，但可以追加参数。</li><li><strong>结合使用</strong>：可以结合使用 <code>ENTRYPOINT</code> 和 <code>CMD</code>，其中 <code>CMD</code> 提供默认参数，<code>ENTRYPOINT</code> 提供主进程。</li></ul><p>通过理解和正确使用 <code>CMD</code> 和 <code>ENTRYPOINT</code>，你可以更灵活地控制 Docker 容器的启动行为。</p><h3 id="8-ENV"><a href="#8-ENV" class="headerlink" title="8. ENV"></a>8. <code>ENV</code></h3><p>设置环境变量。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> ENV_VAR=production</span><br></pre></td></tr></table></figure><h3 id="9-ARG"><a href="#9-ARG" class="headerlink" title="9. ARG"></a>9. <code>ARG</code></h3><p>定义构建参数，可以在构建时传递值。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> VERSION</span><br></pre></td></tr></table></figure><h3 id="10-EXPOSE"><a href="#10-EXPOSE" class="headerlink" title="10. EXPOSE"></a>10. <code>EXPOSE</code></h3><p>声明容器运行时监听的端口。仅用于文档目的，不会实际开放端口。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h3 id="11-VOLUME"><a href="#11-VOLUME" class="headerlink" title="11. VOLUME"></a>11. <code>VOLUME</code></h3><p>创建挂载点，用于持久化数据。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /app/data</span></span><br></pre></td></tr></table></figure><h3 id="12-WORKDIR"><a href="#12-WORKDIR" class="headerlink" title="12. WORKDIR"></a>12. <code>WORKDIR</code></h3><p>设置工作目录。后续的 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code> 指令将以这个目录为当前目录。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br></pre></td></tr></table></figure><h3 id="13-USER"><a href="#13-USER" class="headerlink" title="13. USER"></a>13. <code>USER</code></h3><p>指定运行容器时的用户。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USER</span> appuser</span><br></pre></td></tr></table></figure><h3 id="14-ONBUILD"><a href="#14-ONBUILD" class="headerlink" title="14. ONBUILD"></a>14. <code>ONBUILD</code></h3><p>设置触发器，当这个镜像作为基础镜像时，触发器会被执行。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">COPY</span><span class="language-bash"> . /app/src</span></span><br></pre></td></tr></table></figure><h3 id="示例-Dockerfile"><a href="#示例-Dockerfile" class="headerlink" title="示例 Dockerfile"></a>示例 Dockerfile</h3><p>以下是一个完整的示例 Dockerfile，展示了如何使用上述指令构建一个 Spring Boot 应用的 Docker 镜像。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 OpenJDK 8 作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置维护者信息</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;your-email@example.com&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义构建参数</span></span><br><span class="line"><span class="keyword">ARG</span> VERSION</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /app/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将应用的 JAR 文件复制到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> target/boot-dockerfile-<span class="variable">$&#123;VERSION&#125;</span>.jar /app/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将配置文件复制到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> config/application.yml /app/config/application.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> ENV_VAR=production</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行应用</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app/app.jar&quot;</span>, <span class="string">&quot;--spring.config.location=file:/app/config/application.yml&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="构建和运行镜像"><a href="#构建和运行镜像" class="headerlink" title="构建和运行镜像"></a>构建和运行镜像</h3><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t boot-dockerfile:1.0-snapshot --build-arg VERSION=1.0 .</span><br></pre></td></tr></table></figure><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name boot-dockerfile -p 8080:8080 -e MY_ENV_VAR=myValue boot-dockerfile:1.0-snapshot</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过了解和使用 Dockerfile 中的各种指令和关键字，你可以灵活地构建和配置 Docker 镜像。这些指令使得 Dockerfile 具有强大的功能和灵活性，能够满足各种应用场景的需求。</p><h2 id="IDEA-Dockerfile"><a href="#IDEA-Dockerfile" class="headerlink" title="IDEA Dockerfile"></a>IDEA Dockerfile</h2><p>在 IntelliJ IDEA 的 Docker 运行配置窗口中，各个参数的作用如下：</p><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><ol><li><p><strong>Name</strong>：</p><ul><li>配置的名称，用于标识这个运行配置。</li><li>示例：<code>boot-dockerfile/Dockerfile</code></li></ul></li><li><p><strong>Allow parallel run</strong>：</p><ul><li>允许并行运行多个实例。</li><li>示例：勾选（如果你需要并行运行多个实例）</li></ul></li><li><p><strong>Store as project file</strong>：</p><ul><li>将配置存储为项目文件，以便在版本控制系统中共享。</li><li>示例：勾选（如果你希望将配置文件共享到版本控制系统）</li></ul></li><li><p><strong>Server</strong>：</p><ul><li>选择 Docker 服务器，通常是本地 Docker 守护进程。</li><li>示例：<code>Docker</code></li></ul></li><li><p><strong>Dockerfile</strong>：</p><ul><li>指定 Dockerfile 的路径，IDE 将使用这个 Dockerfile 构建镜像。</li><li>示例：<code>spring-boot/boot-origin/boot-dockerfile/Dockerfile</code></li></ul></li><li><p><strong>Context folder</strong>：</p><ul><li>指定构建上下文的目录，通常是包含 Dockerfile 的目录。</li><li>示例：<code>spring-boot/boot-origin/boot-dockerfile</code></li></ul></li><li><p><strong>Image tag</strong>：</p><ul><li>指定构建的 Docker 镜像的标签。</li><li>示例：<code>boot-dockerfile:1.0-snapshot</code></li></ul></li></ol><h3 id="构建参数"><a href="#构建参数" class="headerlink" title="构建参数"></a>构建参数</h3><ol start="8"><li><p><strong>Build args</strong>：</p><ul><li>构建参数，用于在构建镜像时传递参数给 Dockerfile。可以在 Dockerfile 中使用 <code>ARG</code> 指令来引用这些参数。</li><li>示例：<code>ARG_NAME=arg_value</code></li><li>示例：<code>ENV=production,VERSION=1.0</code></li></ul></li><li><p><strong>Build options</strong>：</p><ul><li>构建选项，可以指定额外的 Docker 构建选项。</li><li>示例：<code>--no-cache</code>（不使用缓存）</li><li>示例：<code>--pull</code>（总是尝试拉取最新的基础镜像）</li></ul></li><li><p><strong>Run built image</strong>：</p><ul><li>勾选后，构建完成后会自动运行构建的镜像。</li><li>示例：勾选（如果你希望构建完成后自动运行镜像）</li></ul></li></ol><h3 id="容器运行参数"><a href="#容器运行参数" class="headerlink" title="容器运行参数"></a>容器运行参数</h3><ol start="11"><li><p><strong>Container name</strong>：</p><ul><li>指定容器的名称。</li><li>示例：<code>boot-dockerfile</code></li></ul></li><li><p><strong>Executable</strong>：</p><ul><li><strong>Entrypoint</strong>：覆盖 Dockerfile 中的 <code>ENTRYPOINT</code> 指令。<code>ENTRYPOINT</code> 指令用于指定容器启动时要运行的主进程。<ul><li>示例：<code>/entrypoint.sh</code></li></ul></li><li><strong>Command</strong>：覆盖 Dockerfile 中的 <code>CMD</code> 指令，传递给容器的命令行参数。<code>CMD</code> 指令用于指定容器启动时的默认命令。<ul><li>示例：<code>--spring.config.location=file:/app/config/application.yml</code></li></ul></li></ul></li></ol><h3 id="端口和挂载"><a href="#端口和挂载" class="headerlink" title="端口和挂载"></a>端口和挂载</h3><ol start="13"><li><p><strong>Publish exposed ports to the host interfaces</strong>：</p><ul><li><strong>All</strong>：将所有暴露的端口发布到主机接口。</li><li><strong>Specify</strong>：指定要发布的端口。</li><li>示例：选择 <code>Specify</code></li></ul></li><li><p><strong>Bind ports</strong>：</p><ul><li>端口绑定，将主机端口映射到容器端口。</li><li>示例：<code>8080:8080</code></li></ul></li><li><p><strong>Bind mounts</strong>：</p><ul><li>绑定挂载，将主机目录或文件挂载到容器。用于在容器中访问主机上的文件或目录。</li><li>示例：<code>/path/to/config/application.yml:/app/config/application.yml</code></li><li>示例：<code>/host/path:/container/path</code></li></ul></li></ol><h3 id="环境变量和运行选项"><a href="#环境变量和运行选项" class="headerlink" title="环境变量和运行选项"></a>环境变量和运行选项</h3><ol start="16"><li><p><strong>Environment variables</strong>：</p><ul><li>环境变量，传递给容器的环境变量。用于在容器中设置环境变量。</li><li>示例：<code>MY_ENV_VAR=myValue</code></li><li>示例：<code>ENV=production,DEBUG=false</code></li></ul></li><li><p><strong>Run options</strong>：</p><ul><li>运行选项，可以指定额外的 Docker 运行选项。</li><li>示例：<code>--rm</code>（容器退出后自动删除）</li><li>示例：<code>--network=host</code>（使用主机网络）</li></ul></li></ol><h3 id="Command-preview"><a href="#Command-preview" class="headerlink" title="Command preview"></a>Command preview</h3><ol start="18"><li><strong>Command preview</strong>：<ul><li>显示最终生成的 Docker 命令预览。用于查看实际执行的 Docker 命令。</li></ul></li></ol><h3 id="完整示例配置"><a href="#完整示例配置" class="headerlink" title="完整示例配置"></a>完整示例配置</h3><p>假设你有以下需求：</p><ul><li>构建一个标签为 <code>boot-dockerfile:1.0-snapshot</code> 的镜像。</li><li>运行容器时，指定容器名称为 <code>boot-dockerfile</code>。</li><li>将主机的 8080 端口映射到容器的 8080 端口。</li><li>挂载主机的配置文件到容器。</li><li>传递环境变量和命令行参数。</li><li>使用一些构建参数和选项。</li></ul><p>你可以这样配置：</p><ul><li><strong>Name</strong>: <code>boot-dockerfile/Dockerfile</code></li><li><strong>Dockerfile</strong>: <code>spring-boot/boot-origin/boot-dockerfile/Dockerfile</code></li><li><strong>Context folder</strong>: <code>spring-boot/boot-origin/boot-dockerfile</code></li><li><strong>Image tag</strong>: <code>boot-dockerfile:1.0-snapshot</code></li><li><strong>Build args</strong>: <code>ENV=production,VERSION=1.0</code></li><li><strong>Build options</strong>: <code>--no-cache</code></li><li><strong>Run built image</strong>: 勾选</li><li><strong>Container name</strong>: <code>boot-dockerfile</code></li><li><strong>Entrypoint</strong>: 留空（使用 Dockerfile 中的默认值）</li><li><strong>Command</strong>: <code>--spring.config.location=file:/app/config/application.yml</code></li><li><strong>Bind ports</strong>: <code>8080:8080</code></li><li><strong>Bind mounts</strong>: <code>/path/to/config/application.yml:/app/config/application.yml</code></li><li><strong>Environment variables</strong>: <code>MY_ENV_VAR=myValue</code></li><li><strong>Run options</strong>: <code>--rm</code></li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>通过正确配置这些参数，你可以灵活地构建和运行 Docker 镜像和容器。确保每个字段都根据你的需求正确填写，以便 Docker 容器能够按照预期运行。</p><h2 id="Docker-Run"><a href="#Docker-Run" class="headerlink" title="Docker Run"></a>Docker Run</h2><p><code>docker run</code> 命令有许多参数，用于配置和控制容器的运行行为。以下是一些常用的参数及其作用：</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><h4 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h4><ul><li><p><strong><code>-d</code></strong> 或 **<code>--detach</code>**：</p><ul><li>在后台运行容器，并返回容器 ID。</li><li>示例：<code>docker run -d my-image</code></li></ul></li><li><p><strong><code>-i</code></strong> 或 **<code>--interactive</code>**：</p><ul><li>保持标准输入（stdin）打开，即使没有附加到容器上。</li><li>示例：<code>docker run -i my-image</code></li></ul></li><li><p><strong><code>-t</code></strong> 或 **<code>--tty</code>**：</p><ul><li>分配一个伪终端（pseudo-TTY）。</li><li>示例：<code>docker run -t my-image</code></li></ul></li><li><p>**<code>-it</code>**：</p><ul><li>组合使用 <code>-i</code> 和 <code>-t</code>，用于交互式会话。</li><li>示例：<code>docker run -it my-image /bin/bash</code></li></ul></li><li><p>**<code>--name</code>**：</p><ul><li>为容器指定一个名称。</li><li>示例：<code>docker run --name my-container my-image</code></li></ul></li><li><p>**<code>--rm</code>**：</p><ul><li>容器退出时自动删除容器。</li><li>示例：<code>docker run --rm my-image</code></li></ul></li></ul><h4 id="网络和端口"><a href="#网络和端口" class="headerlink" title="网络和端口"></a>网络和端口</h4><ul><li><p><strong><code>-p</code></strong> 或 **<code>--publish</code>**：</p><ul><li>将容器的端口映射到主机的端口。</li><li>示例：<code>docker run -p 8080:80 my-image</code></li></ul></li><li><p>**<code>--network</code>**：</p><ul><li>指定容器的网络模式。</li><li>示例：<code>docker run --network host my-image</code></li></ul></li><li><p>**<code>--link</code>**：</p><ul><li>将一个容器连接到另一个容器。</li><li>示例：<code>docker run --link another-container my-image</code></li></ul></li></ul><h4 id="环境变量和文件系统"><a href="#环境变量和文件系统" class="headerlink" title="环境变量和文件系统"></a>环境变量和文件系统</h4><ul><li><p><strong><code>-e</code></strong> 或 **<code>--env</code>**：</p><ul><li>设置环境变量。</li><li>示例：<code>docker run -e MY_ENV_VAR=myValue my-image</code></li></ul></li><li><p>**<code>--env-file</code>**：</p><ul><li>从文件中读取环境变量。</li><li>示例：<code>docker run --env-file ./env.list my-image</code></li></ul></li><li><p><strong><code>-v</code></strong> 或 **<code>--volume</code>**：</p><ul><li>挂载主机目录或数据卷到容器。</li><li>示例：<code>docker run -v /host/path:/container/path my-image</code></li></ul></li><li><p>**<code>--mount</code>**：</p><ul><li>更高级的挂载选项。</li><li>示例：<code>docker run --mount type=bind,source=/host/path,target=/container/path my-image</code></li></ul></li></ul><h4 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h4><ul><li><p><strong><code>-m</code></strong> 或 **<code>--memory</code>**：</p><ul><li>限制容器使用的内存。</li><li>示例：<code>docker run -m 512m my-image</code></li></ul></li><li><p>**<code>--cpus</code>**：</p><ul><li>限制容器使用的 CPU 数量。</li><li>示例：<code>docker run --cpus 1.5 my-image</code></li></ul></li><li><p>**<code>--cpu-shares</code>**：</p><ul><li>设置容器的 CPU 共享权重。</li><li>示例：<code>docker run --cpu-shares 512 my-image</code></li></ul></li></ul><h4 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h4><ul><li><p>**<code>--restart</code>**：</p><ul><li>设置容器的重启策略。</li><li>示例：<code>docker run --restart always my-image</code></li></ul></li><li><p>**<code>--log-driver</code>**：</p><ul><li>设置日志驱动。</li><li>示例：<code>docker run --log-driver json-file my-image</code></li></ul></li><li><p>**<code>--entrypoint</code>**：</p><ul><li>覆盖 Dockerfile 中的 <code>ENTRYPOINT</code> 指令。</li><li>示例：<code>docker run --entrypoint /bin/bash my-image</code></li></ul></li><li><p>**<code>--privileged</code>**：</p><ul><li>以特权模式运行容器。</li><li>示例：<code>docker run --privileged my-image</code></li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>以下是一些常见的 <code>docker run</code> 命令示例：</p><ol><li><strong>后台运行容器并映射端口</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 --name my-container my-image</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>运行交互式容器并分配伪终端</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name my-container my-image /bin/bash</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>设置环境变量并挂载卷</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e MY_ENV_VAR=myValue -v /host/path:/container/path --name my-container my-image</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>限制内存和 CPU 使用</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -m 512m --cpus 1.5 --name my-container my-image</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>使用特权模式运行容器</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --privileged --name my-container my-image</span><br></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p><code>docker run</code> 命令提供了丰富的参数选项，允许你灵活地配置和控制容器的运行行为。通过了解和使用这些参数，你可以更好地管理和优化 Docker 容器的运行。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 使用小结</title>
      <link href="/docker-use-summary/"/>
      <url>/docker-use-summary/</url>
      
        <content type="html"><![CDATA[<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker [OPTIONS] COMMAND</span><br></pre></td></tr></table></figure><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><ul><li><p><code>--config string</code>  </p><ul><li><strong>说明</strong>: 客户端配置文件的位置 (默认 “&#x2F;root&#x2F;.docker”)</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --config /path/to/config COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>-c, --context string</code>  </p><ul><li><strong>说明</strong>: 使用的上下文名称 (覆盖 DOCKER_HOST 环境变量和默认上下文)</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --context my-context COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>-D, --debug</code>  </p><ul><li><strong>说明</strong>: 启用调试模式</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --debug COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>-H, --host list</code>  </p><ul><li><strong>说明</strong>: 连接到的守护进程套接字</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --host tcp://0.0.0.0:2375 COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>-l, --log-level string</code>  </p><ul><li><strong>说明</strong>: 设置日志级别 (“debug”|”info”|”warn”|”error”|”fatal”) (默认 “info”)</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --log-level debug COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>--tls</code>  </p><ul><li><strong>说明</strong>: 使用 TLS; 隐含 –tlsverify</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --tls COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>--tlscacert string</code>  </p><ul><li><strong>说明</strong>: 仅信任由此 CA 签名的证书 (默认 “&#x2F;root&#x2F;.docker&#x2F;ca.pem”)</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --tlscacert /path/to/ca.pem COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>--tlscert string</code>  </p><ul><li><strong>说明</strong>: TLS 证书文件路径 (默认 “&#x2F;root&#x2F;.docker&#x2F;cert.pem”)</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --tlscert /path/to/cert.pem COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>--tlskey string</code>  </p><ul><li><strong>说明</strong>: TLS 密钥文件路径 (默认 “&#x2F;root&#x2F;.docker&#x2F;key.pem”)</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --tlskey /path/to/key.pem COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>--tlsverify</code>  </p><ul><li><strong>说明</strong>: 使用 TLS 并验证远程</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --tlsverify COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>-v, --version</code>  </p><ul><li><strong>说明</strong>: 打印版本信息并退出</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h2><ul><li><p><code>app*</code>  </p><ul><li><strong>说明</strong>: Docker App (Docker Inc., v0.9.1-beta3)</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker app COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>builder</code>  </p><ul><li><strong>说明</strong>: 管理构建</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker builder COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>buildx*</code>  </p><ul><li><strong>说明</strong>: 使用 BuildKit 构建 (Docker Inc., v0.5.1-docker)</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>config</code>  </p><ul><li><strong>说明</strong>: 管理 Docker 配置</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker config COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>container</code>  </p><ul><li><strong>说明</strong>: 管理容器</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>context</code>  </p><ul><li><strong>说明</strong>: 管理上下文</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker context COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>image</code>  </p><ul><li><strong>说明</strong>: 管理镜像</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>manifest</code>  </p><ul><li><strong>说明</strong>: 管理 Docker 镜像清单和清单列表</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker manifest COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>network</code>  </p><ul><li><strong>说明</strong>: 管理网络</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>node</code>  </p><ul><li><strong>说明</strong>: 管理 Swarm 节点</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>plugin</code>  </p><ul><li><strong>说明</strong>: 管理插件</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker plugin COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>scan*</code>  </p><ul><li><strong>说明</strong>: Docker 扫描 (Docker Inc., v0.23.0)</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker scan COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>secret</code>  </p><ul><li><strong>说明</strong>: 管理 Docker 秘密</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker secret COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>service</code>  </p><ul><li><strong>说明</strong>: 管理服务</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>stack</code>  </p><ul><li><strong>说明</strong>: 管理 Docker 堆栈</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>swarm</code>  </p><ul><li><strong>说明</strong>: 管理 Swarm</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>system</code>  </p><ul><li><strong>说明</strong>: 管理 Docker 系统</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>trust</code>  </p><ul><li><strong>说明</strong>: 管理 Docker 镜像的信任</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker trust COMMAND</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>volume</code>  </p><ul><li><strong>说明</strong>: 管理卷</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume COMMAND</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p><code>attach</code>  </p><ul><li><strong>说明</strong>: 将本地标准输入、输出和错误流附加到运行中的容器</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>build</code>  </p><ul><li><strong>说明</strong>: 从 Dockerfile 构建镜像</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my-image .</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>commit</code>  </p><ul><li><strong>说明</strong>: 从容器的更改创建新镜像</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit CONTAINER my-new-image</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>cp</code>  </p><ul><li><strong>说明</strong>: 在容器和本地文件系统之间复制文件&#x2F;文件夹</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> CONTAINER:/path/to/file /local/path</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>create</code>  </p><ul><li><strong>说明</strong>: 创建新容器</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create --name my-container my-image</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>diff</code>  </p><ul><li><strong>说明</strong>: 检查容器文件系统中文件或目录的更改</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker diff CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>events</code>  </p><ul><li><strong>说明</strong>: 获取服务器的实时事件</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker events</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>exec</code>  </p><ul><li><strong>说明</strong>: 在运行中的容器中运行命令</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it CONTAINER /bin/bash</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>export</code>  </p><ul><li><strong>说明</strong>: 将容器的文件系统导出为 tar 归档文件</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">export</span> CONTAINER -o /path/to/export.tar</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>history</code>  </p><ul><li><strong>说明</strong>: 显示镜像的历史记录</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">history</span> IMAGE</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>images</code>  </p><ul><li><strong>说明</strong>: 列出镜像</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>import</code>  </p><ul><li><strong>说明</strong>: 从 tar 包内容导入以创建文件系统镜像</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import /path/to/import.tar my-new-image</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>info</code>  </p><ul><li><strong>说明</strong>: 显示系统范围的信息</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>inspect</code>  </p><ul><li><strong>说明</strong>: 返回 Docker 对象的低级信息</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>kill</code>  </p><ul><li><strong>说明</strong>: 杀死一个或多个运行中的容器</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>load</code>  </p><ul><li><strong>说明</strong>: 从 tar 归档文件或 STDIN 加载镜像</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i /path/to/image.tar</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>login</code>  </p><ul><li><strong>说明</strong>: 登录到 Docker 注册表</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u username -p password</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>logout</code>  </p><ul><li><strong>说明</strong>: 从 Docker 注册表注销</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">logout</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>logs</code>  </p><ul><li><strong>说明</strong>: 获取容器的日志</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>pause</code>  </p><ul><li><strong>说明</strong>: 暂停一个或多个容器中的所有进程</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>port</code>  </p><ul><li><strong>说明</strong>: 列出容器的端口映射或特定映射</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>ps</code>  </p><ul><li><strong>说明</strong>: 列出容器</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>pull</code>  </p><ul><li><strong>说明</strong>: 从注册表中拉取镜像或仓库</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull IMAGE</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>push</code>  </p><ul><li><strong>说明</strong>: 将镜像或仓库推送到注册表</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push IMAGE</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>rename</code>  </p><ul><li><strong>说明</strong>: 重命名容器</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename OLD_NAME NEW_NAME</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>restart</code>  </p><ul><li><strong>说明</strong>: 重启一个或多个容器</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>rm</code>  </p><ul><li><strong>说明</strong>: 删除一个或多个容器</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>rmi</code>  </p><ul><li><strong>说明</strong>: 删除一个或多个镜像</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi IMAGE</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>run</code>  </p><ul><li><strong>说明</strong>: 在新容器中运行命令</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it IMAGE /bin/bash</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>save</code>  </p><ul><li><strong>说明</strong>: 将一个或多个镜像保存为 tar 归档文件 (默认流到 STDOUT)</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o /path/to/save.tar IMAGE</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>search</code>  </p><ul><li><strong>说明</strong>: 在 Docker Hub 中搜索镜像</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search IMAGE</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>start</code>  </p><ul><li><strong>说明</strong>: 启动一个或多个已停止的容器</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>stats</code>  </p><ul><li><strong>说明</strong>: 显示容器资源使用统计的实时流</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>stop</code>  </p><ul><li><strong>说明</strong>: 停止一个或多个运行中的容器</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>tag</code>  </p><ul><li><strong>说明</strong>: 创建一个标签 TARGET_IMAGE 指向 SOURCE_IMAGE</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag SOURCE_IMAGE TARGET_IMAGE</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>top</code>  </p><ul><li><strong>说明</strong>: 显示容器的运行进程</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>unpause</code>  </p><ul><li><strong>说明</strong>: 取消暂停一个或多个容器中的所有进程</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker unpause CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>update</code>  </p><ul><li><strong>说明</strong>: 更新一个或多个容器的配置</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --memory 512m CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>version</code>  </p><ul><li><strong>说明</strong>: 显示 Docker 版本信息</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>wait</code>  </p><ul><li><strong>说明</strong>: 阻塞直到一个或多个容器停止，然后打印它们的退出代码</li><li><strong>示例</strong>: <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">wait</span> CONTAINER</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="获取更多帮助"><a href="#获取更多帮助" class="headerlink" title="获取更多帮助"></a>获取更多帮助</h2><p>要获取特定命令的更多信息，请运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker COMMAND --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>要获取更多 Docker 帮助，请查看 <a href="https://docs.docker.com/go/guides/">Docker 指南</a>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>devops 之 gitlab 的 cicd 流水线</title>
      <link href="/devops-gitlab-cicd/"/>
      <url>/devops-gitlab-cicd/</url>
      
        <content type="html"><![CDATA[<h1 id="devops-之-gitlab-的-cicd-流水线"><a href="#devops-之-gitlab-的-cicd-流水线" class="headerlink" title="devops 之 gitlab 的 cicd 流水线"></a>devops 之 gitlab 的 cicd 流水线</h1><h2 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h2><p>在 CentOS 7 安装 Docker，参考文章：<a href="https://www.maysean.club/linux-install-docker">https://www.maysean.club/linux-install-docker</a></p><h2 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h2><h3 id="拉取-gitlab-和-gitlab-runner-镜像"><a href="#拉取-gitlab-和-gitlab-runner-镜像" class="headerlink" title="拉取 gitlab 和 gitlab-runner 镜像"></a>拉取 gitlab 和 gitlab-runner 镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/maysean/gitlab-ce:latest</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/maysean/gitlab-runner:latest</span><br></pre></td></tr></table></figure><h3 id="配置和启用-IPv4-转发"><a href="#配置和启用-IPv4-转发" class="headerlink" title="配置和启用 IPv4 转发"></a>配置和启用 IPv4 转发</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;net.ipv4.ip_forward=1&quot; &gt;&gt; /etc/sysctl.conf&#x27;</span> &amp;&amp; sudo systemctl restart network &amp;&amp; sudo sysctl net.ipv4.ip_forward</span><br></pre></td></tr></table></figure><h3 id="设置环境变量-GITLAB-HOME"><a href="#设置环境变量-GITLAB-HOME" class="headerlink" title="设置环境变量 GITLAB_HOME"></a>设置环境变量 GITLAB_HOME</h3><p>用于挂载 gitlab 容器卷的父目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GITLAB_HOME=/srv/gitlab</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$GITLAB_HOME</span></span><br></pre></td></tr></table></figure><h3 id="部署-gitlab-容器"><a href="#部署-gitlab-容器" class="headerlink" title="部署 gitlab 容器"></a>部署 gitlab 容器</h3><h4 id="默认-http-端口号映射"><a href="#默认-http-端口号映射" class="headerlink" title="默认 http 端口号映射"></a>默认 http 端口号映射</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">  --hostname 192.168.200.141 \</span><br><span class="line">  --publish 16443:443 --publish 80:80 --publish 1622:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/config:/etc/gitlab \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/logs:/var/log/gitlab \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/data:/var/opt/gitlab \</span><br><span class="line">  --<span class="built_in">env</span> GITLAB_ROOT_PASSWORD=maysean@gitlab \</span><br><span class="line">  --<span class="built_in">env</span> TZ=Asia/Shanghai \</span><br><span class="line">  --<span class="built_in">env</span> GITLAB_OMNIBUS_CONFIG=<span class="string">&quot;gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 1622;&quot;</span> \</span><br><span class="line">  registry.cn-hangzhou.aliyuncs.com/maysean/gitlab-ce:latest</span><br></pre></td></tr></table></figure><h4 id="自定义-http-端口号映射"><a href="#自定义-http-端口号映射" class="headerlink" title="自定义 http 端口号映射"></a>自定义 http 端口号映射</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">  --hostname 192.168.200.141 \</span><br><span class="line">  --publish 16443:443 --publish 1680:1680 --publish 1622:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/config:/etc/gitlab \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/logs:/var/log/gitlab \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/data:/var/opt/gitlab \</span><br><span class="line">  --<span class="built_in">env</span> GITLAB_ROOT_PASSWORD=maysean@gitlab \</span><br><span class="line">  --<span class="built_in">env</span> TZ=Asia/Shanghai \</span><br><span class="line">  --<span class="built_in">env</span> GITLAB_OMNIBUS_CONFIG=<span class="string">&quot;external_url &#x27;http://192.168.200.141:1680&#x27;; gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 1622;&quot;</span> \</span><br><span class="line">  registry.cn-hangzhou.aliyuncs.com/maysean/gitlab-ce:latest</span><br></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p><code>--hostname</code>：主机名</p><p><code>--env GITLAB_ROOT_PASSWORD</code>：管理员用户默认密码</p><p><code>--env GITLAB_OMNIBUS_CONFIG</code>：配置 gitlab 访问地址，以及 ssh 端口号</p><p>注意：</p><p>通过 SSH clone 代码需要在<code>用户设置/SSH密钥</code>下添加一个 ssh-key</p><p>ssh-key 生成命令；第一个输入 <code>y</code> 其他一直 <code>enter</code> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;maysean@126.com&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>英语语法中的 have 和 has 的用法</title>
      <link href="/english-grammer-have-has-use/"/>
      <url>/english-grammer-have-has-use/</url>
      
        <content type="html"><![CDATA[<h1 id="英语语法中的-have-和-has-的用法"><a href="#英语语法中的-have-和-has-的用法" class="headerlink" title="英语语法中的 have 和 has 的用法"></a>英语语法中的 have 和 has 的用法</h1><p>在英语语法中，have 和 has 是动词 to have 的不同形式，用于表示拥有、持有或经历某种状态。它们的使用取决于主语的人称和数。以下是它们的具体用法和一些示例。</p><h2 id="Have-的用法"><a href="#Have-的用法" class="headerlink" title="Have 的用法"></a>Have 的用法</h2><p>Have 用于以下情况：</p><ul><li><strong>第一人称单数和复数</strong>（I, we）</li><li><strong>第二人称单数和复数</strong>（you）</li><li><strong>第三人称复数</strong>（they）</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p><strong>第一人称单数</strong>：</p><ul><li>I have a book. (我有一本书。)</li><li>I have been to London. (我去过伦敦。)</li></ul></li><li><p><strong>第一人称复数</strong>：</p><ul><li>We have a meeting at 10 AM. (我们在上午10点有个会议。)</li><li>We have finished our homework. (我们已经完成了作业。)</li></ul></li><li><p><strong>第二人称单数和复数</strong>：</p><ul><li>You have a nice car. (你有一辆好车。)</li><li>You have done a great job. (你做得很好。)</li></ul></li><li><p><strong>第三人称复数</strong>：</p><ul><li>They have a big house. (他们有一栋大房子。)</li><li>They have traveled to many countries. (他们去过很多国家。)</li></ul></li></ul><h2 id="Has-的用法"><a href="#Has-的用法" class="headerlink" title="Has 的用法"></a>Has 的用法</h2><p>Has 用于以下情况：</p><ul><li><strong>第三人称单数</strong>（he, she, it）</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><ul><li><strong>第三人称单数</strong>：<ul><li>He has a dog. (他有一只狗。)</li><li>She has a beautiful dress. (她有一件漂亮的裙子。)</li><li>It has a new feature. (它有一个新功能。)</li></ul></li></ul><h2 id="现在完成时的用法"><a href="#现在完成时的用法" class="headerlink" title="现在完成时的用法"></a>现在完成时的用法</h2><p>Have 和 has 也用于现在完成时，表示从过去某个时间点持续到现在的动作或状态。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li><strong>主语 + have&#x2F;has + 过去分词</strong></li></ul><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><ul><li><p><strong>第一人称单数</strong>：</p><ul><li>I have seen that movie. (我看过那部电影。)</li></ul></li><li><p><strong>第三人称单数</strong>：</p><ul><li>She has finished her work. (她已经完成了工作。)</li></ul></li><li><p><strong>第三人称复数</strong>：</p><ul><li>They have visited Paris. (他们去过巴黎。)</li></ul></li></ul><h2 id="否定形式"><a href="#否定形式" class="headerlink" title="否定形式"></a>否定形式</h2><p>在否定句中，have 和 has 变为 have not (haven’t) 和 has not (hasn’t)。</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><ul><li><p><strong>第一人称单数</strong>：</p><ul><li>I haven’t seen that movie. (我没看过那部电影。)</li></ul></li><li><p><strong>第三人称单数</strong>：</p><ul><li>He hasn’t finished his homework. (他还没完成作业。)</li></ul></li><li><p><strong>第三人称复数</strong>：</p><ul><li>They haven’t been to Japan. (他们没去过日本。)</li></ul></li></ul><h2 id="疑问形式"><a href="#疑问形式" class="headerlink" title="疑问形式"></a>疑问形式</h2><p>在疑问句中，have 和 has 放在主语前面。</p><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><ul><li><p><strong>第一人称单数</strong>：</p><ul><li>Have I met you before? (我以前见过你吗？)</li></ul></li><li><p><strong>第三人称单数</strong>：</p><ul><li>Has she called you? (她给你打电话了吗？)</li></ul></li><li><p><strong>第三人称复数</strong>：</p><ul><li>Have they arrived? (他们到了吗？)</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>Have</strong> 用于第一人称单数和复数、第二人称单数和复数、第三人称复数。</li><li><strong>Has</strong> 用于第三人称单数。</li><li>在现在完成时中，have 和 has 与过去分词连用。</li><li>否定形式为 haven’t 和 hasn’t。</li><li>疑问形式将 have 和 has 放在主语前。</li></ul><p>希望这些信息对你有所帮助！如果有其他问题或需要更多示例，请随时提问。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/vmware-install-linux/"/>
      <url>/vmware-install-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="vmware-安装-linux"><a href="#vmware-安装-linux" class="headerlink" title="vmware 安装 linux"></a>vmware 安装 linux</h1><h2 id="安装-linux"><a href="#安装-linux" class="headerlink" title="安装 linux"></a>安装 linux</h2><p>通过 <code>↑</code> 或 <code>↓</code> 按键选择第一个选项然后 <code>enter</code></p><img src="/vmware-install-linux/image-20230404191606739.png" class="" title="image-20230404191606739"><p>选择简体中文</p><img src="/vmware-install-linux/image-20230404191726681.png" class="" title="image-20230404191726681"><p>分别点击 <code>安装位置</code> 和 <code>网络和主机名</code></p><img src="/vmware-install-linux/image-20230404192119401.png" class="" title="image-20230404192119401"><p>安装位置：直接点击完成</p><img src="/vmware-install-linux/image-20230404191907947.png" class="" title="image-20230404191907947"><p>网络和主机名：打开开关，点击完成</p><img src="/vmware-install-linux/image-20230404192028174.png" class="" title="image-20230404192028174"><p>开始安装</p><img src="/vmware-install-linux/image-20230404192201234.png" class="" title="image-20230404192201234"><p>设置 <code>root</code> 密码</p><img src="/vmware-install-linux/image-20230404192236026.png" class="" title="image-20230404192236026"><p>默认选择 <code>root</code> 作为密码</p><img src="/vmware-install-linux/image-20230404192328174.png" class="" title="image-20230404192328174"><p>出现这个界面点击 <code>重启</code></p><img src="/vmware-install-linux/image-20230404192435051.png" class="" title="image-20230404192435051"><p>输入用户名密码进行登录</p><blockquote><p>注意：输入密码时不会显示</p></blockquote><img src="/vmware-install-linux/image-20230404192534826.png" class="" title="image-20230404192534826"><p><code>ip addr</code> 命令查看 <code>ip</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><img src="/vmware-install-linux/image-20230404192557237.png" class="" title="image-20230404192557237"><p>配置 <code>ssh</code> 连接</p><img src="/vmware-install-linux/image-20230404192742639.png" class="" title="image-20230404192742639"><p>点击 <code>接收并保存</code></p><img src="/vmware-install-linux/image-20230404192830727.png" class="" title="image-20230404192830727"><p>再次使用 <code>ip addr</code> 命令查看 <code>ip</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><img src="/vmware-install-linux/image-20230404192936345.png" class="" title="image-20230404192936345"><h2 id="扩展：安装-vim-文本编辑器篇"><a href="#扩展：安装-vim-文本编辑器篇" class="headerlink" title="扩展：安装 vim 文本编辑器篇"></a>扩展：安装 vim 文本编辑器篇</h2><p>使用命令 <code>yum install vim</code> 安装 <code>vim</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vim</span><br></pre></td></tr></table></figure><img src="/vmware-install-linux/image-20230404193146110.png" class="" title="image-20230404193146110"><p>一直点击 <code>yes</code></p><img src="/vmware-install-linux/image-20230404193222937.png" class="" title="image-20230404193222937"><p>看到 <code>完毕</code> 表示安装成功</p><img src="/vmware-install-linux/image-20230404193306912.png" class="" title="image-20230404193306912"><h2 id="扩展：安装-docker-篇"><a href="#扩展：安装-docker-篇" class="headerlink" title="扩展：安装 docker 篇"></a>扩展：安装 docker 篇</h2><p>安装所需资源包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><img src="/vmware-install-linux/image-20230404195331368.png" class="" title="image-20230404195331368"><p>配置 <code>docker</code> 镜像源，并安装 <code>docker</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 docker 镜像源</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装docker</span></span><br><span class="line">sudo yum install -y docker-ce-20.10.7 docker-ce-cli-20.10.7 containerd.io</span><br></pre></td></tr></table></figure><img src="/vmware-install-linux/image-20230404195457933.png" class="" title="image-20230404195457933"><p>启动 <code>docker</code> 并配置开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><p>查看 <code>docker</code> 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><p>配置镜像加速</p><p>由于 <code>docker</code> 官方镜像仓库网速较差，我们需要设置国内镜像服务：</p><p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://8aklptao.mirror.aliyuncs.com&quot;,</span><br><span class="line">        &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">        &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">        &quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br><span class="line">        ],</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">  &quot;storage-opts&quot;: [</span><br><span class="line">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><img src="/vmware-install-linux/image-20230404195959329.png" class="" title="image-20230404195959329"><h3 id="扩展：docker-开启远程调用"><a href="#扩展：docker-开启远程调用" class="headerlink" title="扩展：docker 开启远程调用"></a>扩展：docker 开启远程调用</h3><ol><li><p>编辑 Docker systemd 服务文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>ExecStart</code> 行：</p><p>将 <code>ExecStart</code> 行修改为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ExecStart</span>=/usr/bin/dockerd -H fd:// -H tcp://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2375</span> --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure><p>如果你希望使用 TLS 保护连接，可以使用：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ExecStart</span>=/usr/bin/dockerd -H fd:// -H tcp://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2376</span> --containerd=/run/containerd/containerd.sock --tlsverify --tlscacert=/path/to/ca.pem --tlscert=/path/to/server-cert.pem --tlskey=/path/to/server-key.pem</span><br></pre></td></tr></table></figure></li><li><p>重新加载 systemd 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p>重启 Docker 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>验证 Docker 服务状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure></li></ol><h4 id="验证远程连接"><a href="#验证远程连接" class="headerlink" title="验证远程连接"></a>验证远程连接</h4><p>你可以使用 <code>docker -H</code> 命令来测试远程连接。例如，如果 Docker 守护进程运行在 IP 地址 <code>192.168.1.100</code> 上，你可以这样测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -H tcp://192.168.1.100:2375 info</span><br></pre></td></tr></table></figure><p>如果你使用了 TLS 保护连接，可以这样测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --tlsverify --tlscacert=/path/to/ca.pem --tlscert=/path/to/cert.pem --tlskey=/path/to/key.pem -H=tcp://192.168.1.100:2376 info</span><br></pre></td></tr></table></figure><h3 id="安全性注意事项"><a href="#安全性注意事项" class="headerlink" title="安全性注意事项"></a>安全性注意事项</h3><p>默认情况下，Docker 远程连接是不安全的，因为它没有启用任何身份验证或加密。为了提高安全性，建议使用 TLS 来保护 Docker 远程连接。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过修改 Docker 的 systemd 服务文件，你可以启用 Docker 的远程连接。请务必注意，开启远程连接可能会带来安全风险，因此建议在生产环境中使用 TLS 进行加密和认证。</p><h2 id="扩展：配置静态-ip-篇"><a href="#扩展：配置静态-ip-篇" class="headerlink" title="扩展：配置静态 ip 篇"></a>扩展：配置静态 ip 篇</h2><blockquote><p><strong>写在前面：</strong>建议先安装 <code>docker</code> 再配置静态 <code>ip</code>，如果先修改了静态 <code>ip</code> 后面再安装 <code>docker</code> 会出现网段冲突的问题，目前笔者还未找到解决的方法。</p><p>2024年06月09日，题主终于找到了解决的办法，在某些情况下，NetworkManager 可能会干扰静态 IP 配置，停止并禁用 NetworkManager，缺点是无法再进行网络配置了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop NetworkManager</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> NetworkManager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> NetworkManager</span><br><span class="line">sudo systemctl start NetworkManager</span><br></pre></td></tr></table></figure></blockquote><p>进入 <code>/etc/sysconfig/network-scripts</code> 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts</span><br></pre></td></tr></table></figure><img src="/vmware-install-linux/image-20230404193537798.png" class="" title="image-20230404193537798"><p>使用 <code>vim</code> 编辑器打开 <code>ifcfg-ens33</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ifcfg-ens33</span><br></pre></td></tr></table></figure><p><code>ifcfg-ens33</code> 文件初始</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TYPE</span>=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line"><span class="attr">PROXY_METHOD</span>=<span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="attr">BROWSER_ONLY</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">BOOTPROTO</span>=<span class="string">&quot;dhcp&quot; # 动态获取</span></span><br><span class="line"></span><br><span class="line"><span class="attr">DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV4_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">IPV6INIT</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_AUTOCONF</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">IPV6_ADDR_GEN_MODE</span>=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line"><span class="attr">NAME</span>=<span class="string">&quot;ens33&quot;</span></span><br><span class="line"><span class="attr">UUID</span>=<span class="string">&quot;4f2bd0f7-59a4-463a-9416-1d2399bd9cb7&quot;</span></span><br><span class="line"><span class="attr">DEVICE</span>=<span class="string">&quot;ens33&quot;</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="string">&quot;yes&quot;</span></span><br></pre></td></tr></table></figure><p>根据虚拟机网络编辑器查看子网 <code>ip</code></p><img src="/vmware-install-linux/image-20230404194049913.png" class="" title="image-20230404194049913"><p>设置的静态 ip 地址一定要是起始 ip 地址和结束 ip 地址之间的地址</p><img src="/vmware-install-linux/image-20230404194142655.png" class="" title="image-20230404194142655"><p>注意绿色标注的需要与子网的保持一致，此处为 <code>200</code></p><img src="/vmware-install-linux/image-20230404194435152.png" class="" title="image-20230404194435152"><p>修改后的 <code>ifcfg-ens33</code> 文件内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TYPE</span>=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line"><span class="attr">PROXY_METHOD</span>=<span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="attr">BROWSER_ONLY</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">BOOTPROTO</span>=<span class="string">&quot;static&quot;</span></span><br><span class="line"><span class="attr">IPADDR</span>=<span class="string">&quot;192.168.200.128&quot;        # 设置的静态 IP 地址</span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="string">&quot;255.255.255.0&quot;         # 子网掩码</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="string">&quot;192.168.200.2&quot;         # 网关地址</span></span><br><span class="line"><span class="attr">DNS1</span>=<span class="string">&quot;192.168.200.2&quot;            # DNS 服务器</span></span><br><span class="line"></span><br><span class="line"><span class="attr">DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV4_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">IPV6INIT</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_AUTOCONF</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">IPV6_ADDR_GEN_MODE</span>=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line"><span class="attr">NAME</span>=<span class="string">&quot;ens33&quot;</span></span><br><span class="line"><span class="attr">UUID</span>=<span class="string">&quot;78bf6771-924b-4075-bfa7-ae03f14661a5&quot;</span></span><br><span class="line"><span class="attr">DEVICE</span>=<span class="string">&quot;ens33&quot;</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="string">&quot;yes&quot;</span></span><br></pre></td></tr></table></figure><p>按 <code>esc</code> 之后使用 <code>:wq</code> 保存并退出</p><img src="/vmware-install-linux/image-20230404194710073.png" class="" title="image-20230404194710073"><p><code>ip</code> 地址修改完毕之后，需要重启网络服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><img src="/vmware-install-linux/image-20230404194843835.png" class="" title="image-20230404194843835"><p>重新配置连接地址，即可连接上</p><img src="/vmware-install-linux/image-20230404194924172.png" class="" title="image-20230404194924172"><p>使用 <code>ip addr</code> 命令查看 <code>ip</code></p><img src="/vmware-install-linux/image-20230404195017424.png" class="" title="image-20230404195017424"><p>小技巧：快速修改静态 ip</p><p><code>s/192\.168\.200\.128/192.168.200.130/g</code>：前面是当前 ip 后面是要修改的结果 ip</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/192\.168\.200\.128/192.168.200.130/g&#x27;</span> /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><h2 id="安装桌面环境-GNOME"><a href="#安装桌面环境-GNOME" class="headerlink" title="安装桌面环境 GNOME"></a>安装桌面环境 GNOME</h2><p>安装 GNOME 桌面环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum groupinstall -y <span class="string">&quot;GNOME Desktop&quot;</span> <span class="string">&quot;Graphical Administration Tools&quot;</span></span><br></pre></td></tr></table></figure><p>将系统的默认启动级别设置为图形界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -sf /lib/systemd/system/runlevel5.target /etc/systemd/system/default.target</span><br></pre></td></tr></table></figure><p>重启系统以应用更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>重启后，系统应该会自动启动到 GNOME 桌面环境。如果没有自动启动，可以手动启动图形界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础 - 第 5 天</title>
      <link href="/javascript-base-day-five/"/>
      <url>/javascript-base-day-five/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-基础-第-5-天"><a href="#JavaScript-基础-第-5-天" class="headerlink" title="JavaScript 基础 - 第 5 天"></a>JavaScript 基础 - 第 5 天</h1><blockquote><p>知道对象数据类型的特征，能够利用数组对象渲染页面</p></blockquote><ul><li>理解什么是对象，掌握定义对象的语法</li><li>掌握数学对象的使用</li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><blockquote><p>对象是 JavaScript 数据类型的一种，之前已经学习了数值类型、字符串类型、布尔类型、undefined。对象数据类型可以被理解成是一种数据集合。它由属性和方法两部分构成。</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>声明一个对象类型的变量与之前声明一个数值或字符串类型的变量没有本质上的区别。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明字符串类型变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明数值类型变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num = <span class="number">199</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明对象类型变量，使用一对花括号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// user 便是一个对象了，目前它是一个空对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> user = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性和访问"><a href="#属性和访问" class="headerlink" title="属性和访问"></a>属性和访问</h3><p>数据描述性的信息称为属性，如人的姓名、身高、年龄、性别等，一般是名词性的。</p><ol><li>属性都是成 对出现的，包括属性名和值，它们之间使用英文 <code>:</code> 分隔</li><li>多个属性之间使用英文 <code>,</code> 分隔</li><li>属性就是依附在对象上的变量</li><li>属性名可以使用 <code>&quot;&quot;</code> 或 <code>&#39;&#39;</code>，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过对象描述一个人的数据信息</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// person 是一个对象，它包含了一个属性 name</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 属性都是成对出现的，属性名 和 值，它们之间使用英文 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="comment">// 描述人的姓名</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 描述人的年龄</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">stature</span>: <span class="number">185</span>, <span class="comment">// 描述人的身高</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>, <span class="comment">// 描述人的性别</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>声明对象，并添加了若干属性后，可以使用 <code>.</code> 或 <code>[]</code> 获得对象中属性对应的值，我称之为属性访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过对象描述一个人的数据信息</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// person 是一个对象，它包含了一个属性 name</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 属性都是成对出现的，属性名 和 值，它们之间使用英文 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="comment">// 描述人的姓名</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>, <span class="comment">// 描述人的年龄</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">stature</span>: <span class="number">185</span>, <span class="comment">// 描述人的身高</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>, <span class="comment">// 描述人的性别</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问人的名字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// 结果为 小明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问人性别</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">gender</span>) <span class="comment">// 结果为 男</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问人的身高</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&#x27;stature&#x27;</span>]) <span class="comment">// 结果为 185</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 或者</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">stature</span>) <span class="comment">// 结果同为 185</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>扩展：也可以动态为对象添加属性，动态添加与直接定义是一样的，只是语法上更灵活。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明一个空的对象（没有任何属性）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> user = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态追加属性</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    user[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态添加与直接定义是一样的，只是语法上更灵活</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方法和调用"><a href="#方法和调用" class="headerlink" title="方法和调用"></a>方法和调用</h3><p>数据行为性的信息称为方法，如跑步、唱歌等，一般是动词性的，其本质是函数。</p><ol><li>方法是由方法名和函数两部分构成，它们之间使用 : 分隔</li><li>多个属性之间使用英文 <code>,</code> 分隔</li><li>方法是依附在对象中的函数</li><li>方法名可以使用 <code>&quot;&quot;</code> 或 <code>&#39;&#39;</code>，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法是依附在对象上的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 方法是由方法名和函数两部分构成，它们之间使用 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">singing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;两只老虎，两只老虎，跑的快，跑的快...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">run</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我跑的非常快...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>声明对象，并添加了若干方法后，可以使用 <code>.</code> 或 <code>[]</code> 调用对象中函数，我称之为方法调用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法是依附在对象上的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 方法是由方法名和函数两部分构成，它们之间使用 : 分隔</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">singing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;两只老虎，两只老虎，跑的快，跑的快...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">run</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我跑的非常快...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用对象中 singing 方法</span></span></span><br><span class="line"><span class="language-javascript">    person.<span class="title function_">singing</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用对象中的 run 方法</span></span></span><br><span class="line"><span class="language-javascript">    person.<span class="title function_">run</span>()</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>扩展：也可以动态为对象添加方法，动态添加与直接定义是一样的，只是语法上更灵活。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 对象方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明一个空的对象（没有任何属性，也没有任何方法）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> user = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态追加属性</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    user.[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态添加方法</span></span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">move</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;移动一点距离...&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注：无论是属性或是方法，同一个对象中出现名称一样的，后面的会覆盖前面的。</strong></p><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>null 也是 JavaScript 中数据类型的一种，通常只用它来表示不存在的对象。使用 typeof 检测类型它的类型时，结果为 <code>object</code>。</p><h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// k 属性名 字符串 带引号 obj.&#x27;uname&#x27; k === &#x27;uname&#x27;</span></span><br><span class="line">    <span class="comment">// obj[k] 属性值 obj[&#x27;uname&#x27;] obj[k]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for in 不提倡遍历数组 因为 k 是 字符串  </p><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>回想一下我们曾经使用过的 <code>console.log</code>，<code>console</code>其实就是 JavaScript 中内置的对象，该对象中存在一个方法叫 <code>log</code>，然后调用 <code>log</code> 这个方法，即 <code>console.log()</code>。</p><p>除了 <code>console</code> 对象外，JavaScript 还有其它的内置的对象</p><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p><code>Math</code> 是 JavaScript 中内置的对象，称为数学对象，这个对象下即包含了属性，也包含了许多的方法。</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>Math.PI，获取圆周率</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 圆周率</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>Math.random，生成 0 到 1 间的随机数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0 ~ 1 之间的随机数, 包含 0 不包含 1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br></pre></td></tr></table></figure><ul><li>Math.ceil，数字向上取整</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 舍弃小数部分，整数部分加1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">3.4</span>)</span><br></pre></td></tr></table></figure><ul><li>Math.floor，数字向下取整</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 舍弃小数部分，整数部分不变</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">4.68</span>)</span><br></pre></td></tr></table></figure><ul><li>Math.round，四舍五入取整</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取整，四舍五入原则</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">5.46539</span>)</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.849</span>)</span><br></pre></td></tr></table></figure><ul><li>Math.max，在一组数中找出最大的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找出最大值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">10</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">13</span>)</span><br></pre></td></tr></table></figure><ul><li>Math.min，在一组数中找出最小的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找出最小值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">24</span>, <span class="number">18</span>, <span class="number">6</span>, <span class="number">19</span>, <span class="number">21</span>)</span><br></pre></td></tr></table></figure><ul><li>Math.pow，幂方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求某个数的多少次方</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">4</span>, <span class="number">2</span>) <span class="comment">// 求 4 的 2 次方</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 求 2 的 3 次方</span></span><br></pre></td></tr></table></figure><ul><li>Math.sqrt，平方根</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求某数的平方根</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>数学对象提供了比较多的方法，这里不要求强记，通过演示数学对象的使用，加深对对象的理解。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础 - 第 4 天</title>
      <link href="/javascript-base-day-four/"/>
      <url>/javascript-base-day-four/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-基础-第-4-天"><a href="#JavaScript-基础-第-4-天" class="headerlink" title="JavaScript 基础 - 第 4 天"></a>JavaScript 基础 - 第 4 天</h1><blockquote><p>理解封装的意义，能够通过函数的声明实现逻辑的封装，知道对象数据类型的特征，结合数学对象实现简单计算功能。</p></blockquote><ul><li>理解函数的封装的特征</li><li>掌握函数声明的语法</li><li>理解什么是函数的返回值</li><li>知道并能使用常见的内置函数</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote><p>理解函数的封装特性，掌握函数的语法规则</p></blockquote><h3 id="声明和调用"><a href="#声明和调用" class="headerlink" title="声明和调用"></a>声明和调用</h3><p>函数可以把具有相同或相似逻辑的代码 <code>包裹</code> 起来，通过函数调用执行这些被 <code>包裹</code> 的代码逻辑，这么做的优势是有利于精简代码方便复用。</p><h4 id="声明（定义）"><a href="#声明（定义）" class="headerlink" title="声明（定义）"></a>声明（定义）</h4><p>声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值 5 个部分</p><img src="/javascript-base-day-four/function.jpg" class=""><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p>声明（定义）的函数必须调用才会真正被执行，使用 <code>()</code> 调用函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 声明和调用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 声明（定义）了最简单的函数，既没有形式参数，也没有返回值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨 ~&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 函数调用，这些函数体内的代码逻辑会被执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 函数名()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 可以重复被调用，多少次都可以</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：函数名的命名规则与变量是一致的，并且尽量保证函数名的语义。</p></blockquote><p>小案例：小星星</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数声明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// document.write(&#x27;hai~&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*&lt;br&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`**&lt;br&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`***&lt;br&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`****&lt;br&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*****&lt;br&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`******&lt;br&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*******&lt;br&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`********&lt;br&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`*********&lt;br&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数调用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>通过向函数传递参数，可以让函数更加灵活多变，参数可以理解成是一个变量。</p><p>声明（定义）一个功能为打招呼的函数</p><ul><li>传入数据列表</li><li>声明这个函数需要传入几个数据</li><li>多个数据用逗号隔开</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 函数参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明（定义）一个功能为打招呼的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// function sayHi() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&#x27;嗨~&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// sayHi()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这个函数似乎没有什么价值，除非能够向不同的人打招呼</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这就需要借助参数来实现了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 参数 name 可以被理解成是一个变量</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;嗨~&#x27;</span> + name)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用 sayHi 函数，括号中多了 &#x27;小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这时相当于为参数 name 赋值了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>(<span class="string">&#x27;小明&#x27;</span>)<span class="comment">// 结果为 小明</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 再次调用 sayHi 函数，括号中多了 &#x27;小红&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这时相当于为参数 name 赋值了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>(<span class="string">&#x27;小红&#x27;</span>) <span class="comment">// 结果为 小红</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>声明（定义）函数时的形参没有数量限制，当有多个形参时使用 <code>,</code> 分隔</li><li>调用函数传递的实参要与形参的顺序一致</li></ol><h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p>形参：声明函数时写在函数名右边小括号里的叫形参（形式上的参数）</p><p>实参：调用函数时写在函数名右边小括号里的叫实参（实际上的参数）</p><p>形参可以理解为是在这个函数内声明的变量（比如 num1 &#x3D; 10）实参可以理解为是给这个变量赋值</p><p>开发中尽量保持形参和实参个数一致</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 函数参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明（定义）一个计算任意两数字和的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 形参 x 和 y 分别表示任意两个数字，它们是两个变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数，传入两个具体的数字做为实参</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此时 10 赋值给了形参 x</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此时 5  赋值给了形参 y</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">count</span>(<span class="number">10</span>, <span class="number">5</span>); <span class="comment">// 结果为 15</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>函数的本质是封装（包裹），函数体内的逻辑执行完毕后，函数外部如何获得函数内部的执行结果呢？要想获得函数内部逻辑的执行结果，需要通过 <code>return</code> 这个关键字，将内部执行结果传递到函数外部，这个被传递到外部的结果就是返回值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 函数返回值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义求和函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">a, b</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> s = a + b</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// s 即为 a + b 的结果</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过 return 将 s 传递到外部</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> s</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数，如果一个函数有返回值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 那么可将这个返回值赋值给外部的任意变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> total = <span class="title function_">count</span>(<span class="number">5</span>, <span class="number">12</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>在函数体中使用 return 关键字能将内部的执行结果交给函数外部使用</li><li>函数内部只能出现 1 次 return，并且 return 下一行代码不会再被执行，所以 return 后面的数据不要换行写</li><li>return 会立即结束当前函数</li><li>函数可以没有 return，这种情况默认返回值为 undefined</li></ol><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</p><p>作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><p>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件</p><p>处于全局作用域内的变量，称为全局变量</p><h4 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h4><p>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。</p><p>处于局部作用域内的变量称为局部变量</p><blockquote><p>如果函数内部，变量没有声明，直接赋值，也当全局变量看，但是强烈不推荐</p><p>但是有一种情况，函数内部的形参可以看做是局部变量。</p></blockquote><p>在能够访问到的情况下先局部，局部没有在找全局</p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>函数可以分为具名函数和匿名函数</p><p>匿名函数：没有名字的函数，无法直接使用。</p><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数表达式&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123; xxx &#125;)();</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123; xxxx&#125;());</span><br></pre></td></tr></table></figure><blockquote><p>无需调用，立即执行，其实本质已经调用了</p><p>多个立即执行函数之间用分号隔开</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础 - 第 3 天</title>
      <link href="/javascript-base-day-three/"/>
      <url>/javascript-base-day-three/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-基础-第-3-天"><a href="#JavaScript-基础-第-3-天" class="headerlink" title="JavaScript 基础 - 第 3 天"></a>JavaScript 基础 - 第 3 天</h1><p><strong>if 多分支语句和 switch 的区别：</strong></p><ol><li><p>共同点</p><ul><li>都能实现多分支选择，多选 1 </li><li>大部分情况下可以互换</li></ul></li><li><p>区别：</p><ul><li>switch … case 语句通常处理 case 为比较<strong>确定值</strong>的情况，而 if … else … 语句更加灵活，通常用于<strong>范围判断</strong>(大于，等于某个范围)。</li><li>switch 语句进行判断后直接执行到程序的语句，效率更高，而if … else语句有几种判断条件，就得判断多少次</li><li>switch 一定要注意 必须是 &#x3D;&#x3D;&#x3D;  全等，一定注意数据类型，同时注意 break 否则会有穿透效果</li><li>结论：<ul><li>当分支比较少时，if … else 语句执行效率高。</li><li>当分支比较多时，switch 语句执行效率高，而且结构更清晰。</li></ul></li></ul></li></ol><h2 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h2><blockquote><p>掌握 for 循环语句，让程序具备重复执行能力</p></blockquote><p><code>for</code> 是 JavaScript 提供的另一种循环控制的话句，它和 <code>while</code> 只是语法上存在差异。</p><h3 id="for语句的基本使用"><a href="#for语句的基本使用" class="headerlink" title="for语句的基本使用"></a>for语句的基本使用</h3><ol><li>实现循环的 3 要素</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 语法格式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// for(起始值; 终止条件; 变化量) &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   // 要重复执行的代码</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 示例：在网页中输入标题标签</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 起始值为 1</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 变化量 i++</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 终止条件 i &lt;= 6</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;h<span class="subst">$&#123;i&#125;</span>&gt;循环控制，即重复执行&lt;h<span class="subst">$&#123;i&#125;</span>&gt;`</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>变化量和死循环，<code>for</code> 循环和 <code>while</code> 一样，如果不合理设置增量和终止条件，便会产生死循环。</p></li><li><p>跳出和终止循环</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. continue </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">continue</span>  <span class="comment">// 结束本次循环，继续下一次循环</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. break</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>  <span class="comment">// 退出结束整个循环</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结论：</p><ul><li><code>JavaScript</code> 提供了多种语句来实现循环控制，但无论使用哪种语句都离不开循环的 3 个特征，即起始值、变化量、终止条件，做为初学者应着重体会这 3 个特征，不必过多纠结三种语句的区别。</li><li>起始值、变化量、终止条件，由开发者根据逻辑需要进行设计，规避死循环的发生。</li><li>当如果明确了循环的次数的时候推荐使用 <code>for</code> 循环,当不明确循环的次数的时候推荐使用 <code>while</code> 循环</li></ul><blockquote><p>注意：<code>for</code> 的语法结构更简洁，故 <code>for</code> 循环的使用频次会更多。</p></blockquote><h3 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h3><p>利用循环的知识来对比一个简单的天文知识，我们知道地球在自转的同时也在围绕太阳公转，如果把自转和公转都看成是循环的话，就相当于是循环中又嵌套了另一个循环。</p><img src="/javascript-base-day-three/universe.gif" class=""><p>实际上 JavaScript 中任何一种循环语句都支持循环的嵌套，如下代码所示：</p><img src="/javascript-base-day-three/1647918261399.png" class=""><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 1. 外面的循环 记录第n天 </span><br><span class="line">for (let i = 1; i &lt; 4; i++) &#123;</span><br><span class="line">    document.write(`第$&#123;i&#125;天 <span class="tag">&lt;<span class="name">br</span>&gt;</span>`)</span><br><span class="line">    // 2. 里层的循环记录 几个单词</span><br><span class="line">    for (let j = 1; j &lt; 6; j++) &#123;</span><br><span class="line">        document.write(`记住第$&#123;j&#125;个单词<span class="tag">&lt;<span class="name">br</span>&gt;</span>`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记住，外层循环循环一次，里层循环循环全部</p><h4 id="倒三角"><a href="#倒三角" class="headerlink" title="倒三角"></a>倒三角</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 外层打印几行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 里层打印几个星星</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;★&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <img src="/javascript-base-day-three/1647918678956.png" class=""><h4 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h4><p>样式 css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">192</span>, <span class="number">203</span>, .<span class="number">4</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">192</span>, <span class="number">203</span>, .<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: hotpink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>javascript </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 外层打印几行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 里层打印几个星星</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        <span class="comment">// 只需要吧 ★ 换成  1 x 1 = 1   </span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt; <span class="subst">$&#123;j&#125;</span> x <span class="subst">$&#123;i&#125;</span> = <span class="subst">$&#123;j * i&#125;</span> &lt;/div&gt;</span></span><br><span class="line"><span class="string">     `</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/javascript-base-day-three/1647918734677.png" class=""><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>知道什么是数组及其应用的场景，掌握数组声明及访问的语法。</p></blockquote><h3 id="数组是什么？"><a href="#数组是什么？" class="headerlink" title="数组是什么？"></a>数组是什么？</h3><p><strong>数组：</strong>(Array)是一种可以按顺序保存数据的数据类型</p><p><strong>使用场景：</strong>如果有多个数据可以用数组保存起来，然后放到一个变量中，管理非常方便</p><h3 id="数组的基本使用"><a href="#数组的基本使用" class="headerlink" title="数组的基本使用"></a>数组的基本使用</h3><h4 id="定义数组和数组单元"><a href="#定义数组和数组单元" class="headerlink" title="定义数组和数组单元"></a>定义数组和数组单元</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 语法，使用 [] 来定义一个空数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义一个空数组，然后赋值给变量 classes</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// let classes = [];</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 定义非空数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> classes = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小刚&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 <code>[]</code> 定义数组，数据中可以存放真正的数据，如小明、小刚、小红等这些都是数组中的数据，我们这些数据称为数组单元，数组单元之间使用英文逗号分隔。</p><h4 id="访问数组和数组索引"><a href="#访问数组和数组索引" class="headerlink" title="访问数组和数组索引"></a>访问数组和数组索引</h4><p>使用数组存放数据并不是最终目的，关键是能够随时的访问到数组中的数据（单元）。其实 JavaScript 为数组中的每一个数据单元都编了号，通过数据单元在数组中的编号便可以轻松访问到数组中的数据单元了。</p><p>我们将数据单元在数组中的编号称为索引值，也有人称其为下标。</p><p>索引值实际是按着数据单元在数组中的位置依次排列的，注意是从 <code> 0</code> 开始的，如下图所示：</p><img src="/javascript-base-day-three/array.jpg" class=""><p>观察上图可以数据单元【小明】对应的索引值为【0】，数据单元【小红】对应的索引值为【2】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> classes = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小刚&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 访问数组，语法格式为：变量名[索引值]</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">0</span>]) <span class="comment">// 结果为：小明</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">1</span>]) <span class="comment">// 结果为：小刚</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">4</span>]) <span class="comment">// 结果为：小米</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 通过索引值还可以为数组单重新赋值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(classes[<span class="number">3</span>]) <span class="comment">// 结果为：小丽</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 重新为索引值为 3 的单元赋值</span></span></span><br><span class="line"><span class="language-javascript">  classes[<span class="number">3</span>] = <span class="string">&#x27;小小丽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">wirte</span>(classes[<span class="number">3</span>]); <span class="comment">// 结果为： 小小丽</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数据单元值类型"><a href="#数据单元值类型" class="headerlink" title="数据单元值类型"></a>数据单元值类型</h4><p>数组做为数据的集合，它的单元值可以是任意数据类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 6. 数组单值类型可以是任意数据类型</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// a) 数组单元值的类型为字符类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> list = [<span class="string">&#x27;HTML&#x27;</span>, <span class="string">&#x27;CSS&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// b) 数组单元值的类型为数值类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> scores = [<span class="number">78</span>, <span class="number">84</span>, <span class="number">70</span>, <span class="number">62</span>, <span class="number">75</span>]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// c) 混合多种类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> mixin = [<span class="literal">true</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="string">&#x27;hello&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数组长度属性"><a href="#数组长度属性" class="headerlink" title="数组长度属性"></a>数组长度属性</h4><p>重申一次，数组在 JavaScript 中并不是新的数据类型，它属于对象类型。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义一个数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> arr = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 数组对应着一个 length 属性，它的含义是获取数组的长度</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>) <span class="comment">// 3</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h3><p>数组做为对象数据类型，不但有 <code>length</code> 属性可以使用，还提供了许多方法：</p><ol><li>push 动态向数组的尾部添加一个单元</li><li>unshit 动态向数组头部添加一个单元</li><li>pop 删除最后一个单元</li><li>shift 删除第一个单元</li><li>splice 动态删除任意单元</li></ol><p>使用以上 4 个方法时，都是直接在原数组上进行操作，即成功调任何一个方法，原数组都跟着发生相应的改变。并且在添加或删除单元时 <code>length</code> 并不会发生错乱。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义一个数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> arr = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. push 动态向数组的尾部添加一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">push</span>(<span class="string">&#x27;Nodejs&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">push</span>(<span class="string">&#x27;Vue&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. unshit 动态向数组头部添加一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">unshift</span>(<span class="string">&#x27;VS Code&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 3. splice 动态删除任意单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>) <span class="comment">// 从索引值为2的位置开始删除1个单元</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 4. pop 删除最后一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">pop</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 5. shift 删除第一个单元</span></span></span><br><span class="line"><span class="language-javascript">  arr.<span class="title function_">shift</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础 - 第 2 天</title>
      <link href="/javascript-base-day-two/"/>
      <url>/javascript-base-day-two/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-基础-第-2-天"><a href="#JavaScript-基础-第-2-天" class="headerlink" title="JavaScript 基础 - 第 2 天"></a>JavaScript 基础 - 第 2 天</h1><blockquote><p>理解什么是流程控制，知道条件控制的种类并掌握其对应的语法规则，具备利用循环编写简易ATM 取款机程序能力</p></blockquote><ul><li>运算符</li><li>语句</li><li>综合案例</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>数字是用来计算的，比如：乘法 * 、除法 &#x2F; 、加法 + 、减法 - 等等，所以经常和算术运算符一起。</p><p>算术运算符：也叫数学运算符，主要包括加、减、乘、除、取余（求模）等</p><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>+</td><td>求和</td></tr><tr><td>-</td><td>求差</td></tr><tr><td>*</td><td>求积</td></tr><tr><td>&#x2F;</td><td>求商</td></tr><tr><td><strong>%</strong></td><td>取模（取余数），开发中经常用于作为某个数字是否被整除</td></tr></tbody></table><blockquote><p>注意：在计算失败时，显示的结果是 NaN （not a number）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算术运算符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span> / <span class="number">2</span>) <span class="comment">//  4 </span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="number">10</span>)  <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + num)  <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 取模(取余数)  使用场景： 用来判断某个数是否能够被整除</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span> % <span class="number">2</span>) <span class="comment">//  0  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span> % <span class="number">3</span>) <span class="comment">//  0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> % <span class="number">3</span>) <span class="comment">//  2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> % <span class="number">5</span>) <span class="comment">//  3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 注意事项：如果我们计算失败，则返回的结果是 NaN (not a number)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> - <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> * <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> + <span class="number">2</span>)   <span class="comment">// pink 老师 2</span></span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符：对变量进行赋值的运算符</p><p> &#x3D; 将等号右边的值赋予给左边，要求左边必须是一个容器（变量）</p><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>+&#x3D;</td><td>加法赋值</td></tr><tr><td>-+</td><td>减法赋值</td></tr><tr><td>*&#x3D;</td><td>乘法赋值</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值</td></tr><tr><td>%&#x3D;</td><td>取余赋值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line">    <span class="comment">// num = num + 1</span></span><br><span class="line">    <span class="comment">// 采取赋值运算符</span></span><br><span class="line">    <span class="comment">// num += 1</span></span><br><span class="line">    num += <span class="number">3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="自增-自减运算符"><a href="#自增-自减运算符" class="headerlink" title="自增&#x2F;自减运算符"></a>自增&#x2F;自减运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>++</td><td>自增</td><td>变量自身的值加 1，例如：x++</td></tr><tr><td>–</td><td>自减</td><td>变量自身的值减 1，例如：x–</td></tr></tbody></table><ol><li>++ 在前和 ++ 在后在单独使用时二者并没有差别，而且一般开发中我们都是独立使用</li><li>++ 在后（后缀式）我们会使用更多</li></ol><blockquote><p>注意：</p><ol><li>只有变量能够使用自增和自减运算符</li><li>++、– 可以在变量前面也可以在变量后面，比如：x++ 或者 ++x</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// let num = 10</span></span><br><span class="line">    <span class="comment">// num = num + 1</span></span><br><span class="line">    <span class="comment">// num += 1</span></span><br><span class="line">    <span class="comment">// // 1. 前置自增</span></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// ++i</span></span><br><span class="line">    <span class="comment">// console.log(i)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// console.log(++i + 1)</span></span><br><span class="line">    <span class="comment">// 2. 后置自增</span></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// i++</span></span><br><span class="line">    <span class="comment">// console.log(i)</span></span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// console.log(i++ + 1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 了解 </span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i++ + ++i + i)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>使用场景：比较两个数据大小、是否相等，根据比较结果返回一个布尔值（true&#x2F;false）</p><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>&gt;</td><td>左边是否大于右边</td></tr><tr><td>&lt;</td><td>左边是否小于右边</td></tr><tr><td>&gt;&#x3D;</td><td>左边是否大于或等于右边</td></tr><tr><td>&lt;&#x3D;</td><td>左边是否小于或等于右边</td></tr><tr><td>&#x3D;&#x3D;&#x3D;</td><td>左右两边是否<code>类型</code>和<code>值</code>都相等（重点）</td></tr><tr><td>&#x3D;&#x3D;</td><td>左右两边<code>值</code>是否相等</td></tr><tr><td>!&#x3D;</td><td>左右值不相等</td></tr><tr><td>!&#x3D;&#x3D;</td><td>左右两边是否不全等</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt; <span class="number">5</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt;= <span class="number">3</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> == <span class="number">2</span>)</span><br><span class="line">  <span class="comment">// 比较运算符有隐式转换 把 &#x27;2&#x27; 转换为 2 双等号只判断值</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> == <span class="string">&#x27;2&#x27;</span>)  <span class="comment">// true</span></span><br><span class="line">  <span class="comment">// console.log(undefined === null)</span></span><br><span class="line">  <span class="comment">// === 全等：判断 值 和 数据类型 都一样才行</span></span><br><span class="line">  <span class="comment">// 以后判断是否相等 请用 ===  </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> === <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>) <span class="comment">// NaN 不等于任何人，包括他自己</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> !== <span class="string">&#x27;2&#x27;</span>)  <span class="comment">// true  </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> != <span class="string">&#x27;2&#x27;</span>) <span class="comment">// false </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------------------&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span> &lt; <span class="string">&#x27;b&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aa&#x27;</span> &lt; <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aa&#x27;</span> &lt; <span class="string">&#x27;aac&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------------------&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>使用场景：可以把多个布尔值放到一起运算，最终返回一个布尔值</p><table><thead><tr><th>符号</th><th>名称</th><th>日常读法</th><th>特点</th><th>口诀</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td><td>并且</td><td>符号两边有一个假的结果为假</td><td>一假则假</td></tr><tr><td>||</td><td>逻辑或</td><td>或者</td><td>符号两边有一个真的结果为真</td><td>一真则真</td></tr><tr><td>!</td><td>逻辑非</td><td>取反</td><td>true 变 false  false 变 true</td><td>真变假，假变真</td></tr></tbody></table><table><thead><tr><th>A</th><th>B</th><th>A &amp;&amp; B</th><th>A || B</th><th>!A</th></tr></thead><tbody><tr><td>false</td><td>false</td><td>false</td><td>false</td><td>true</td></tr><tr><td>false</td><td>true</td><td>false</td><td>true</td><td>true</td></tr><tr><td>true</td><td>false</td><td>false</td><td>true</td><td>false</td></tr><tr><td>true</td><td>true</td><td>true</td><td>true</td><td>false</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 逻辑与 一假则假</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &amp;&amp; <span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &amp;&amp; <span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &lt; <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line">    <span class="comment">// 逻辑或 一真则真</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> || <span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> || <span class="literal">false</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line">    <span class="comment">// 逻辑非 取反</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">true</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">false</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">6</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num &gt; <span class="number">5</span> &amp;&amp; num &lt; <span class="number">10</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><blockquote><p>逻辑运算符优先级： ！&gt; &amp;&amp; &gt; ||  </p></blockquote><img src="/javascript-base-day-two/1671017843443.png" class=""><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h3><img src="/javascript-base-day-two/1671017924981.png" class=""><h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><p>分支语句可以根据条件判定真假，来选择性的执行想要的代码</p><p>分支语句包含：</p><ol><li>if 分支语句（重点）</li><li>三元运算符</li><li>switch 语句</li></ol><h4 id="if-分支语句"><a href="#if-分支语句" class="headerlink" title="if 分支语句"></a>if 分支语句</h4><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式) &#123;</span><br><span class="line">  <span class="comment">// 满足条件要执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小括号内的条件结果是布尔值，为 true 时，进入大括号里执行代码；为 false，则不执行大括号里面代码</p><p>小括号内的结果若不是布尔类型时，会发生类型转换为布尔值，类似 Boolean()</p><img src="/javascript-base-day-two/1671017800406.png" class=""><p>如果大括号只有一个语句，大括号可以省略，但是，俺们不提倡这么做 ~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 单分支语句</span></span><br><span class="line">    <span class="comment">// if (false) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if (3 &gt; 5) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if (2 === &#x27;2&#x27;) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">//  1. 除了0 所有的数字都为真</span></span><br><span class="line">    <span class="comment">//   if (0) &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// 2.除了 &#x27;&#x27; 所有的字符串都为真 true</span></span><br><span class="line">    <span class="comment">// if (&#x27;pink老师&#x27;) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if (&#x27;&#x27;) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// // if (&#x27;&#x27;) console.log(&#x27;执行语句&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 用户输入</span></span><br><span class="line">    <span class="keyword">let</span> score = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入成绩&#x27;</span>)</span><br><span class="line">    <span class="comment">// 2. 进行判断输出</span></span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">700</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;恭喜考入黑马程序员&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="if-双分支语句"><a href="#if-双分支语句" class="headerlink" title="if 双分支语句"></a>if 双分支语句</h4><p>如果有两个条件的时候，可以使用 if else 双分支语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式)&#123;</span><br><span class="line">  <span class="comment">// 满足条件要执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 不满足条件要执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. 用户输入</span></span><br><span class="line">    <span class="keyword">let</span> uname = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入用户名:&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> pwd = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入密码:&#x27;</span>)</span><br><span class="line">    <span class="comment">// 2. 判断输出</span></span><br><span class="line">    <span class="keyword">if</span> (uname === <span class="string">&#x27;pink&#x27;</span> &amp;&amp; pwd === <span class="string">&#x27;123456&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;恭喜登录成功&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;用户名或者密码错误&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="if-多分支语句"><a href="#if-多分支语句" class="headerlink" title="if 多分支语句"></a>if 多分支语句</h4><p>使用场景： 适合于有多个条件的时候</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. 用户输入</span></span><br><span class="line">    <span class="keyword">let</span> score = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入成绩：&#x27;</span>)</span><br><span class="line">    <span class="comment">// 2. 判断输出</span></span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;成绩优秀，宝贝，你是我的骄傲&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;成绩良好，宝贝，你要加油哦~~&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;成绩及格，宝贝，你很危险~&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;成绩不及格，宝贝，我不想和你说话，我只想用鞭子和你说话 ~&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="三元运算符（三元表达式）"><a href="#三元运算符（三元表达式）" class="headerlink" title="三元运算符（三元表达式）"></a>三元运算符（三元表达式）</h4><p><strong>使用场景</strong>：一些简单的双分支，可以使用三元运算符（三元表达式），写起来比 if else 双分支 更简单</p><p><strong>符号</strong>：? 与 : 配合使用</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件 ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三元运算符（三元表达式）</span></span><br><span class="line"><span class="comment">// 1. 语法格式</span></span><br><span class="line"><span class="comment">// 条件 ? 表达式1 : 表达式2 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 执行过程 </span></span><br><span class="line"><span class="comment">// 2.1 如果条件为真，则执行表达式1</span></span><br><span class="line"><span class="comment">// 2.2 如果条件为假，则执行表达式2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 验证</span></span><br><span class="line"><span class="comment">// 5 &gt; 3 ? &#x27;真的&#x27; : &#x27;假的&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> &lt; <span class="number">3</span> ? <span class="string">&#x27;真的&#x27;</span> : <span class="string">&#x27;假的&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// let age = 18 </span></span><br><span class="line"><span class="comment">// age = age + 1</span></span><br><span class="line"><span class="comment">//  age++</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 用户输入 </span></span><br><span class="line"><span class="keyword">let</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入一个数字:&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 判断输出- 小于10才补0</span></span><br><span class="line"><span class="comment">// num = num &lt; 10 ? 0 + num : num</span></span><br><span class="line">num = num &gt;= <span class="number">10</span> ? num : <span class="number">0</span> + num</span><br><span class="line"><span class="title function_">alert</span>(num)</span><br></pre></td></tr></table></figure><h4 id="switch-语句（了解）"><a href="#switch-语句（了解）" class="headerlink" title="switch 语句（了解）"></a>switch 语句（了解）</h4><p>使用场景： 适合于有多个条件的时候，也属于分支语句，大部分情况下和 if 多分支语句 功能相同</p><p>注意：</p><ol><li>switch case 语句一般用于等值判断，if 适合于区间判断</li><li>switch case一般需要配合 break 关键字使用 没有 break 会造成 case 穿透</li><li>if 多分支语句开发要比 switch 更重要，使用也更多</li></ol><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// switch 分支语句</span></span><br><span class="line"><span class="comment">// 1. 语法</span></span><br><span class="line"><span class="comment">// switch (表达式) &#123;</span></span><br><span class="line"><span class="comment">//   case 值1:</span></span><br><span class="line"><span class="comment">//     代码1</span></span><br><span class="line"><span class="comment">//     break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   case 值2:</span></span><br><span class="line"><span class="comment">//     代码2</span></span><br><span class="line"><span class="comment">//     break</span></span><br><span class="line"><span class="comment">//   ...</span></span><br><span class="line"><span class="comment">//   default:</span></span><br><span class="line"><span class="comment">//     代码n</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是1&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>  <span class="comment">// 退出 switch</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是2&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>  <span class="comment">// 退出 switch</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您选择的是3&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span>  <span class="comment">// 退出 switch</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有符合条件的&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h4><p><strong>作用：</strong>学习时可以帮助更好的理解代码运行，工作时可以更快找到 bug</p><p>浏览器打开调试界面</p><ol><li>按 F12 打开开发者工具</li><li>点到源代码一栏（sources）</li><li>选择代码文件</li></ol><img src="/javascript-base-day-two/1671018401624.png" class=""><p><strong>断点：</strong>在某句代码上加的标记就叫断点，当程序执行到这句有标记的代码时会暂停下来</p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>使用场景：重复执行 指定的一段代码，比如我们想要输出10次 ‘我学的很棒’</p><p>学习路径：</p><p>1.while 循环</p><p>2.for 循环（重点）</p><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><p>while：在 … 期间，所以 while 循环就是在满足条件期间，重复执行某些代码。</p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">   <span class="comment">// 循环体    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while 循环: 重复执行代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 需求: 利用循环重复打印 3 次 &#x27;月薪过万不是梦，毕业时候见英雄&#x27;</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;月薪过万不是梦，毕业时候见英雄~&lt;br&gt;&#x27;</span>)</span><br><span class="line">  i++   <span class="comment">// 这里千万不要忘了变量自增否则造成死循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环三要素：</p><ol><li><p>初始值（经常用变量）</p></li><li><p>终止条件</p></li><li><p>变量的变化量</p></li></ol><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// // 1. 变量的起始值</span></span><br><span class="line">  <span class="comment">// let i = 1</span></span><br><span class="line">  <span class="comment">// // 2. 终止条件</span></span><br><span class="line">  <span class="comment">// while (i &lt;= 3) &#123;</span></span><br><span class="line">  <span class="comment">//   document.write(&#x27;我要循环三次 &lt;br&gt;&#x27;)</span></span><br><span class="line">  <span class="comment">//   // 3. 变量的变化量</span></span><br><span class="line">  <span class="comment">//   i++</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// 1. 变量的起始值</span></span><br><span class="line">    <span class="keyword">let</span> end = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入次数:&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="comment">// 2. 终止条件</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= end) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;我要循环三次 &lt;br&gt;&#x27;</span>)</span><br><span class="line">      <span class="comment">// 3. 变量的变化量</span></span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="中止循环"><a href="#中止循环" class="headerlink" title="中止循环"></a>中止循环</h4><p><code>break</code> 中止整个循环，一般用于结果已经得到, 后续的循环不需要的时候可以使用（提高效率）  </p><p><code>continue</code> 中止本次循环，一般用于排除或者跳过某一个选项的时候</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// let i = 1</span></span><br><span class="line">    <span class="comment">// while (i &lt;= 5) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(i)</span></span><br><span class="line">    <span class="comment">//   if (i === 3) &#123;</span></span><br><span class="line">    <span class="comment">//     break  // 退出循环</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">//   i++</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><ol><li><p>while(true) 来构造<code>无限</code>循环，需要使用 break 退出循环。（常用）</p></li><li><p>for(;;) 也可以来构造<code>无限</code>循环，同样需要使用 break 退出循环。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无限循环  </span></span><br><span class="line"><span class="comment">// 需求： 页面会一直弹窗询问你爱我吗？</span></span><br><span class="line"><span class="comment">// (1). 如果用户输入的是 &#x27;爱&#x27;，则退出弹窗</span></span><br><span class="line"><span class="comment">// (2). 否则一直弹窗询问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. while(true) 无限循环</span></span><br><span class="line"><span class="comment">// while (true) &#123;</span></span><br><span class="line"><span class="comment">//   let love = prompt(&#x27;你爱我吗?&#x27;)</span></span><br><span class="line"><span class="comment">//   if (love === &#x27;爱&#x27;) &#123;</span></span><br><span class="line"><span class="comment">//     break</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. for(;;) 无限循环</span></span><br><span class="line"><span class="keyword">for</span> (; ;) &#123;</span><br><span class="line">  <span class="keyword">let</span> love = <span class="title function_">prompt</span>(<span class="string">&#x27;你爱我吗?&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (love === <span class="string">&#x27;爱&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="综合案例-ATM-存取款机"><a href="#综合案例-ATM-存取款机" class="headerlink" title="综合案例-ATM 存取款机"></a>综合案例-ATM 存取款机</h2><img src="/javascript-base-day-two/1671018781557.png" class=""><p>分析：</p><ol><li><p>提示输入框写到循环里面（无限循环）</p></li><li><p>用户输入 4 则退出循环 break</p></li><li><p>提前准备一个金额预先存储一个数额 money</p></li><li><p>根据输入不同的值，做不同的操作</p><ol><li>取钱则是减法操作， 存钱则是加法操作，查看余额则是直接显示金额</li><li>可以使用 if else if 多分支 来执行不同的操作</li></ol></li></ol><p>完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. 开始循环 输入框写到 循环里面</span></span><br><span class="line">    <span class="comment">// 3. 准备一个总的金额</span></span><br><span class="line">    <span class="keyword">let</span> money = <span class="number">100</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> re = +<span class="title function_">prompt</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        请您选择操作：</span></span><br><span class="line"><span class="string">        1.存钱</span></span><br><span class="line"><span class="string">        2.取钱</span></span><br><span class="line"><span class="string">        3.查看余额</span></span><br><span class="line"><span class="string">        4.退出</span></span><br><span class="line"><span class="string">        `</span>)</span><br><span class="line">      <span class="comment">// 2. 如果用户输入的 4 则退出循环，break 写到 if 里面，没有写到 switch 里面， 因为 4 需要 break 退出循环</span></span><br><span class="line">      <span class="keyword">if</span> (re === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 4. 根据输入做操作</span></span><br><span class="line">      <span class="keyword">switch</span> (re) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          <span class="comment">// 存钱</span></span><br><span class="line">          <span class="keyword">let</span> cun = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入存款金额&#x27;</span>)</span><br><span class="line">          money = money + cun</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          <span class="comment">// 存钱</span></span><br><span class="line">          <span class="keyword">let</span> qu = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入取款金额&#x27;</span>)</span><br><span class="line">          money = money - qu</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">          <span class="comment">// 存钱</span></span><br><span class="line">          <span class="title function_">alert</span>(<span class="string">`您的银行卡余额是<span class="subst">$&#123;money&#125;</span>`</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础 - 第 1 天</title>
      <link href="/javascript-base-day-one/"/>
      <url>/javascript-base-day-one/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-基础-第-1-天"><a href="#JavaScript-基础-第-1-天" class="headerlink" title="JavaScript 基础 - 第 1 天"></a>JavaScript 基础 - 第 1 天</h1><blockquote><p>了解变量、数据类型、运算符等基础概念，能够实现数据类型的转换，结合四则运算体会如何编程。</p></blockquote><ul><li>体会现实世界中的事物与计算机的关系</li><li>理解什么是数据并知道数据的分类</li><li>理解变量存储数据的<code>容器</code></li><li>掌握常见运算符的使用，了解优先级关系</li><li>知道 JavaScript 数据类型隐式转换的特征</li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>掌握 JavaScript 的引入方式，初步认识 JavaScript 的作用</p></blockquote><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><p>JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 <code>script</code> 标签将 JavaScript 代码引入到 HTML 中，有两种方式：</p><h4 id="内部方式"><a href="#内部方式" class="headerlink" title="内部方式"></a>内部方式</h4><p>通过 <code>script</code> 标签包裹 JavaScript 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内联形式：通过 script 标签包裹 JavaScript 代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="外部形式"><a href="#外部形式" class="headerlink" title="外部形式"></a>外部形式</h4><p>一般将 JavaScript 代码写在独立的以 .js 结尾的文件中，然后通过 <code>script</code> 标签的 <code>src</code> 属性引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 script 标签使用 src 属性引入了某 .js 文件，那么标签的代码会被忽略！！！如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此处的代码会被忽略掉！！！！</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="number">666</span>);  </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注释和结束符"><a href="#注释和结束符" class="headerlink" title="注释和结束符"></a>注释和结束符</h3><p>通过注释可以屏蔽代码被执行或者添加备注信息，JavaScript 支持两种形式注释语法：</p><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>使用 <code>// </code> 注释单行代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 注释<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这种是单行注释的语法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 一次只能注释一行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以重复注释</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>使用 <code>/* */</code> 注释多行代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 注释<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 这种的是多行注释的语法 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    更常见的多行注释是这种写法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    在些可以任意换行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    多少行都可以</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注：编辑器中单行注释的快捷键为 <code>ctrl + /</code></strong></p><h3 id="结束符"><a href="#结束符" class="headerlink" title="结束符"></a>结束符</h3><p>在 JavaScript 中 <code>;</code> 代表一段代码的结束，多数情况下可以省略 <code>;</code> 使用回车（enter）替代。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 结束符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line">    alert(1);</span><br><span class="line">    alert(2);</span><br><span class="line">    alert(1)</span><br><span class="line">    alert(2)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际开发中有许多人主张书写 JavaScript 代码时省略结束符 <code>;</code></p><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>输出和输入也可理解为人和计算机的交互，用户通过键盘、鼠标等向计算机输入信息，计算机处理后再展示结果给用户，这便是一次输入和输出的过程。</p><p>举例说明：如按键盘上的方向键，向上&#x2F;下键可以滚动页面，按向上&#x2F;下键这个动作叫作输入，页面发生了滚动了这便叫输出。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>JavaScript 可以接收用户的输入，然后再将输入的结果输出：</p><p><code>alert()</code>、<code>document.wirte()</code></p><p>以数字为例，向 <code>alert()</code> 或 <code>document.write()</code>输入任意数字，他都会以弹窗形式展示（输出）给用户。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>向 <code>prompt()</code> 输入任意内容会以弹窗形式出现在浏览器中，一般提示用户输入一些内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 输入输出<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 输入的任意数字，都会以弹窗形式展示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;要输出的内容&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;要输出的内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 以弹窗形式提示用户输入姓名，注意这里的文字使用英文的引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">prompt</span>(<span class="string">&#x27;请输入您的姓名:&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>理解变量是计算机存储数据的<code>容器</code>，掌握变量的声明方式</p></blockquote><p>变量是计算机中用来存储数据的<code>容器</code>，它可以让计算机变得有记忆，通俗的理解变量就是使用【某个符号】来代表【某个具体的数值】（数据）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// x 符号代表了 5 这个数值</span></span></span><br><span class="line"><span class="language-javascript">  x = <span class="number">5</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// y 符号代表了 6 这个数值</span></span></span><br><span class="line"><span class="language-javascript">  y = <span class="number">6</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//举例：在 JavaScript 中使用变量可以将某个数据（数值）记录下来！</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 将用户输入的内容保存在 num 这个变量（容器）中</span></span></span><br><span class="line"><span class="language-javascript">  num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入一数字!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 通过 num 变量（容器）将用户输入的内容输出出来</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(num)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(num)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>声明(定义)变量有两部分构成：声明关键字、变量名（标识）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 声明和赋值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 变量名</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明(定义)变量有两部分构成：声明关键字、变量名（标识）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age 即变量的名称，也叫标识符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关键字是 JavaScript 中内置的一些英文词汇（单词或缩写），它们代表某些特定的含义，如 <code>let</code> 的含义是声明变量的，看到 <code>let</code>  后就可想到这行代码的意思是在声明变量，如 <code>let age;</code> </p><p><code>let</code> 和 <code>var</code> 都是 JavaScript 中的声明变量的关键字，推荐使用 <code>let</code> 声明变量！！！</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>声明（定义）变量相当于创造了一个空的<code>容器</code>，通过赋值向这个容器中添加数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 声明和赋值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明(定义)变量有两部分构成：声明关键字、变量名（标识）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// age 即变量的名称，也叫标识符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 赋值，将 18 这个数据存入了 age 这个容器中</span></span></span><br><span class="line"><span class="language-javascript">    age = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这样 age 的值就成了 18</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(age)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 也可以声明和赋值同时进行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(str);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>JavaScript 使用专门的关键字 <code>let</code> 和 <code>var</code> 来声明（定义）变量，在使用时需要注意一些细节：</p><p>以下是使用 <code>let</code> 时的注意事项：</p><ol><li>允许声明和赋值同时进行</li><li>不允许重复声明</li><li>允许同时声明多个变量并赋值</li><li>JavaScript 中内置的一些关键字不能被当做变量名</li></ol><p>以下是使用 <code>var</code> 时的注意事项：</p><ol start="2"><li>允许声明和赋值同时进行</li><li>允许重复声明</li><li>允许同时声明多个变量并赋值</li></ol><p>大部分情况使用 <code>let</code> 和 <code>var</code> 区别不大，但是 <code>let</code> 相较 <code>var</code> 更严谨，因此推荐使用 <code>let</code>，后期会更进一步介绍二者间的区别。</p><h3 id="变量名命名规则"><a href="#变量名命名规则" class="headerlink" title="变量名命名规则"></a>变量名命名规则</h3><p>关于变量的名称（标识符）有一系列的规则需要遵守：</p><ol><li>只能是字母、数字、下划线、$，且不能能数字开头</li><li>字母区分大小写，如 Age 和 age 是不同的变量</li><li>JavaScript 内部已占用于单词（关键字或保留字）不允许使用</li><li>尽量保证变量具有一定的语义，见字知义</li></ol><p>注：所谓关键字是指 JavaScript 内部使用的词语，如 <code>let</code> 和<code>var</code>，保留字是指 JavaScript 内部目前没有使用的词语，但是将来可能会使用词语。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 变量名命名规则<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> age1 = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> _age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let 1age = 18; // 错误，不可以数字开头</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> $age = <span class="number">18</span> <span class="comment">// 正确</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title class_">Age</span> = <span class="number">24</span> <span class="comment">// 正确，它与小写的 age 是不同的变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let let = 18; // 错误，let 是关键字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> int = <span class="number">123</span> <span class="comment">// 不推荐，int 是保留字</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>概念：使用 const 声明的变量称为<code>常量</code>。</p><p>使用场景：当某个变量永远不会改变的时候，就可以使用 const 来声明，而不是let。</p><p>命名规范：和变量一致</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：常量不允许重新赋值，声明的时候必须赋值（初始化）</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p>计算机世界中的万事成物都是数据。</p></blockquote><p>计算机程序可以处理大量的数据，为了方便数据的管理，将数据分成了不同的类型：</p><p>注：通过 typeof 关键字检测数据类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 检测 1 是什么类型数据，结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>即我们数学中学习到的数字，可以是整数、小数、正数、负数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> score = <span class="number">100</span> <span class="comment">// 正整数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> price = <span class="number">12.345</span> <span class="comment">// 小数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> temperature = -<span class="number">40</span> <span class="comment">// 负数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> score) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> price) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> temperature) <span class="comment">// 结果为 number</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript 中的数值类型与数学中的数字是一样的，分为正数、负数、小数等。</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>通过单引号（<code>&#39;&#39;</code>） 、双引号（<code>&quot;&quot;</code>）或反引号包裹的数据都叫字符串，单引号和双引号没有本质上的区别，推荐使用单引号。</p><p>注意事项：</p><ol><li>无论单引号或是双引号必须成对使用</li><li>单引号&#x2F;双引号可以互相嵌套，但是不以自已嵌套自已</li><li>必要时可以使用转义符 <code>\</code>，输出单引号或双引号</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> user_name = <span class="string">&#x27;小明&#x27;</span> <span class="comment">// 使用单引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> gender = <span class="string">&quot;男&quot;</span> <span class="comment">// 使用双引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;123&#x27;</span> <span class="comment">// 看上去是数字，但是用引号包裹了就成了字符串了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str1 = <span class="string">&#x27;&#x27;</span> <span class="comment">// 这种情况叫空字符串</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> user_name) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> gender) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">    documeent.<span class="title function_">write</span>(<span class="keyword">typeof</span> str) <span class="comment">// 结果为 string</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>表示肯定或否定时在计算机中对应的是布尔类型数据，它有两个固定的值 <code>true</code> 和 <code>false</code>，表示肯定的数据用 <code>true</code>，表示否定的数据用 <code>false</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  pink老师帅不帅？回答 是 或 否</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> isCool = <span class="literal">true</span> <span class="comment">// 是的，摔死了！</span></span></span><br><span class="line"><span class="language-javascript">    isCool = <span class="literal">false</span> <span class="comment">// 不，套马杆的汉子！</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> isCool) <span class="comment">// 结果为 boolean</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>表示没有值或空对象引用</p><h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>未定义是比较特殊的类型，只有一个值 undefined，只声明变量，不赋值的情况下，变量的默认值为 undefined，一般很少【直接】为某个变量赋值为 undefined。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 只声明了变量，并末赋值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> tmp;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> tmp) <span class="comment">// 结果为 undefined</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注：JavaScript 中变量的值决定了变量的数据类型。</strong></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><blockquote><p>理解弱类型语言的特征，掌握显式类型转换的方法</p></blockquote><p>在 JavaScript 中数据被分成了不同的类型，如数值、字符串、布尔值、undefined，在实际编程的过程中，不同数据类型之间存在着转换的关系。</p><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 隐式转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num = <span class="number">13</span> <span class="comment">// 数值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num2 = <span class="string">&#x27;2&#x27;</span> <span class="comment">// 字符串</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 结果为 132</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原因是将数值 num 转换成了字符串，相当于 &#x27;13&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 然后 + 将两个字符串拼接到了一起</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num + num2)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 结果为 11</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原因是将字符串 num2 转换成了数值，相当于 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 然后数值 13 减去 数值 2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num - num2)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> a = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入一个数字&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b = <span class="title function_">prompt</span>(<span class="string">&#x27;请再输入一个数字&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(a + b);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：数据类型的隐式转换是 JavaScript 的特征，后续学习中还会遇到，目前先需要理解什么是隐式转换。</p><p>补充介绍模板字符串的拼接的使用</p><h3 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h3><p>编写程序时过度依靠系统内部的隐式转换是不严禁的，因为隐式转换规律并不清晰，大多是靠经验总结的规律。为了避免因隐式转换带来的问题，通常根逻辑需要对数据进行显示转换。</p><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>通过 <code>Number</code> 显示转换成数值类型，当转换失败时结果为 <code>NaN</code>（Not a Number）即不是一个数字。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 隐式转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> t = <span class="string">&#x27;12&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> f = <span class="number">8</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 显式将字符串 12 转换成数值 12</span></span></span><br><span class="line"><span class="language-javascript">    t = <span class="title class_">Number</span>(t)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 检测转换后的类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(typeof t);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t + f) <span class="comment">// 结果为 20</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 并不是所有的值都可以被转成数值类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> str = <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将 hello 转成数值是不现实的，当无法转换成</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数值时，得到的结果为 NaN （Not a Number）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(str))</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Maven 构建项目</title>
      <link href="/maven-build-project/"/>
      <url>/maven-build-project/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Maven-构建项目"><a href="#使用-Maven-构建项目" class="headerlink" title="使用 Maven 构建项目"></a>使用 Maven 构建项目</h1><h2 id="使用-Maven-构建-SpringBoot-项目"><a href="#使用-Maven-构建-SpringBoot-项目" class="headerlink" title="使用 Maven 构建 SpringBoot 项目"></a>使用 Maven 构建 SpringBoot 项目</h2><blockquote><p>使用 maven 构建一个 springboot 项目，简单几步</p></blockquote><p>maven + JBLSpringBootAppGen 插件（可在 idea 插件商店安装）</p><p><code>pom.xml</code> 文件示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- configuration 可选配置，如果存在启动类可配置，不存在启动类可不配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.example.demo.DemoApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用-Maven-构建-SpringCloud-项目"><a href="#使用-Maven-构建-SpringCloud-项目" class="headerlink" title="使用 Maven 构建 SpringCloud 项目"></a>使用 Maven 构建 SpringCloud 项目</h2><blockquote><p>使用 maven 构建一个 springcloud 项目，简单几步</p></blockquote><p>父项目 <code>pom.xml</code> 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.maysean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>father<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>son<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR9<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 微服务项目必须的依赖管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 非必须 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子模块 <code>pom.xml</code> 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>father<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.maysean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>son<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- configuration 可选配置，如果存在启动类可配置，不存在启动类可不配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.example.demo.DemoApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker 部署 elasticsearch</title>
      <link href="/docker-run-elasticsearch/"/>
      <url>/docker-run-elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-部署-elasticsearch-8-4-3"><a href="#docker-部署-elasticsearch-8-4-3" class="headerlink" title="docker 部署 elasticsearch 8.4.3"></a>docker 部署 elasticsearch 8.4.3</h1><h2 id="使用-docker-拉取-8-4-3-镜像"><a href="#使用-docker-拉取-8-4-3-镜像" class="headerlink" title="使用 docker 拉取 8.4.3 镜像"></a>使用 docker 拉取 8.4.3 镜像</h2><p>这里先创建一个网络，用于 <code>elasticsearch</code> 和 <code>kibana</code> 容器互联</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create es-net</span><br></pre></td></tr></table></figure><p>本次拉取的是 <code>elasticsearch 8.4.3</code> 版本的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:8.4.3</span><br></pre></td></tr></table></figure><p>本次拉取的是 <code>kibana 8.4.3</code> 版本的镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull kibana:8.4.3</span><br></pre></td></tr></table></figure><h2 id="使用-docker-运行-8-4-3-镜像，形成容器"><a href="#使用-docker-运行-8-4-3-镜像，形成容器" class="headerlink" title="使用 docker 运行 8.4.3 镜像，形成容器"></a>使用 docker 运行 8.4.3 镜像，形成容器</h2><h3 id="运行-elasticsearch-8-4-3-容器"><a href="#运行-elasticsearch-8-4-3-容器" class="headerlink" title="运行 elasticsearch 8.4.3 容器"></a>运行 <code>elasticsearch 8.4.3</code> 容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name elasticsearch \</span><br><span class="line">--net es-net \</span><br><span class="line">-e &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot; \</span><br><span class="line">-p 9200:9200 -p 9300:9300 \</span><br><span class="line">-v /usr/share/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">--restart unless-stopped \</span><br><span class="line">elasticsearch:8.4.3</span><br></pre></td></tr></table></figure><p>如果是 <code>8.x.x</code> 需要重置下密码</p><p>进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it elasticsearch /bin/bash</span><br></pre></td></tr></table></figure><p>切换目录到 <code>bin</code> 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd bin</span><br></pre></td></tr></table></figure><p>重置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-reset-password -u elastic</span><br></pre></td></tr></table></figure><p><code>Please confirm that you would like to continue [y/N]</code> 填 <code>y</code></p><blockquote><p>注意：这个界面不要退出，<code>8.x.x</code> 还需要生成一个后续 <code>kibana</code> 链接使用的<code>enrollment token</code></p></blockquote><img src="/docker-run-elasticsearch/image-20221114122742692.png" class=""><p>通过 <a href="https://192.168.200.160:9200/">https://192.168.200.160:9200</a> 访问 <code>elasticsearch 8.4.3</code></p><blockquote><p>注意：如果是 7.x.x 可以使用 http，如果是 8.x.x 必须使用 https</p></blockquote><p>默认账户名是：<code>elastic</code> 密码是重置之后的密码：<code>vMVS-+P0PLUE3*8TFYW5</code></p><p>输入用户名、密码后出现这个页面，就表示部署成功了</p><img src="/docker-run-elasticsearch/image-20221114123259898.png" class=""><p>生成一个 <code>kibana</code> 链接使用的<code>enrollment token</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-create-enrollment-token -s kibana</span><br></pre></td></tr></table></figure><img src="/docker-run-elasticsearch/image-20221114123707476.png" class=""><p>生成的 <code>enrollment token</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ2ZXIiOiI4LjQuMyIsImFkciI6WyIxNzIuMTguMC4yOjkyMDAiXSwiZmdyIjoiNTM2ZGZiNWI0ZmE1YzI2YWEwMGZhMTkxYTQ3YmYzOTgzZTY1ODljOTg2ZjUwNDE5MTJjYzkyZWM1Y2I0NDFiYyIsImtleSI6IlEtTnNkSVFCQ3NvRXZtamZkSFRGOk9jdjRQVkV2UzNPYmJYak9FOVRSTXcifQ==</span><br></pre></td></tr></table></figure><h3 id="运行-kibana-8-4-3-容器"><a href="#运行-kibana-8-4-3-容器" class="headerlink" title="运行 kibana 8.4.3 容器"></a>运行 <code>kibana 8.4.3</code> 容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name kibana \</span><br><span class="line">--net es-net \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">--restart unless-stopped \</span><br><span class="line">kibana:8.4.3</span><br></pre></td></tr></table></figure><p>通过 <a href="http://192.168.200.160:5601/">http://192.168.200.160:5601</a> 访问 <code>kibana 8.4.3</code></p><blockquote><p>如果是 7.x.x 可以直接进来，如果是 8.x.x 还需要完成授权验证</p></blockquote><img src="/docker-run-elasticsearch/image-20221114124742192.png" class=""><p>接下来会请你输入验证码，可以通过命令查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f kibana</span><br></pre></td></tr></table></figure><img src="/docker-run-elasticsearch/image-20221114125038654.png" class=""><p>输入控制台打印的密码，点击 <code>Verify</code>，进入 <code>kibana</code></p><img src="/docker-run-elasticsearch/image-20221114125014731.png" class=""><p>界面会提示请你登录，用户名和密码为 <code>elasticsearch</code> 的用户名密码</p><p>默认账户名是：<code>elastic</code> 密码是重置之后的密码：<code>vMVS-+P0PLUE3*8TFYW5</code></p><img src="/docker-run-elasticsearch/image-20221114125358290.png" class=""><p>进入 <code>kibana</code> 如果看到这个页面表示成功了</p><img src="/docker-run-elasticsearch/image-20221114125517310.png" class=""><h2 id="elasticsearch-8-4-3-集成-ik-8-4-3-分词器"><a href="#elasticsearch-8-4-3-集成-ik-8-4-3-分词器" class="headerlink" title="elasticsearch 8.4.3 集成 ik 8.4.3 分词器"></a>elasticsearch 8.4.3 集成 ik 8.4.3 分词器</h2><p><code>ik</code> 分词器版本一定要和 <code>elasticsearch</code> 相同</p><blockquote><p><code>ik</code> 分词器<code> Github</code> 链接</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v8.4.3/elasticsearch-analysis-ik-8.4.3.zip">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v8.4.3/elasticsearch-analysis-ik-8.4.3.zip</a></p></blockquote><p>如果要下载其他版本，修改链接中的版本号即可</p><img src="/docker-run-elasticsearch/image-20221114130141794.png" class=""><p>记得重启 <code>elasticsearch</code> 容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure><p>分词测试，”你要想得到这世界上最美好的东西，就要让生活看见努力的你！”</p><p>ik 分词器包含两种模式：</p><ul><li><p><code>ik_smart</code>：最少切分</p></li><li><p><code>ik_max_word</code>：最细切分</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你要想得到这世界上最美好的东西，就要让生活看见努力的你！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><img src="/docker-run-elasticsearch/image-20221114130821225.png" class=""><p>可以看到分词结果，一切都大功告成了！</p><h1 id="docker-部署-elasticsearch-7-17-6"><a href="#docker-部署-elasticsearch-7-17-6" class="headerlink" title="docker 部署 elasticsearch 7.17.6"></a>docker 部署 elasticsearch 7.17.6</h1><h2 id="使用-docker-拉取-7-17-6-镜像"><a href="#使用-docker-拉取-7-17-6-镜像" class="headerlink" title="使用 docker 拉取 7.17.6 镜像"></a>使用 docker 拉取 7.17.6 镜像</h2><p>这里先创建一个网络，用于 <code>elasticsearch</code> 和 <code>kibana</code> 容器互联</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create es-net</span><br></pre></td></tr></table></figure><p>本次拉取的是 <code>elasticsearch 7.17.6</code> 版本的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.17.6</span><br></pre></td></tr></table></figure><p>本次拉取的是 <code>kibana 7.17.6</code> 版本的镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull kibana:7.17.6</span><br></pre></td></tr></table></figure><h2 id="使用-docker-运行-7-17-6-镜像，形成容器"><a href="#使用-docker-运行-7-17-6-镜像，形成容器" class="headerlink" title="使用 docker 运行 7.17.6 镜像，形成容器"></a>使用 docker 运行 7.17.6 镜像，形成容器</h2><h3 id="运行-elasticsearch-7-17-6-容器"><a href="#运行-elasticsearch-7-17-6-容器" class="headerlink" title="运行 elasticsearch 7.17.6 容器"></a>运行 <code>elasticsearch 7.17.6</code> 容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name elasticsearch \</span><br><span class="line">--net es-net \</span><br><span class="line">-e &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot; \</span><br><span class="line">-p 9200:9200 -p 9300:9300 \</span><br><span class="line">-v /usr/share/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">--restart unless-stopped \</span><br><span class="line">elasticsearch:7.17.6</span><br></pre></td></tr></table></figure><p>通过 <a href="http://192.168.200.160:9200/">http://192.168.200.160:9200</a> 访问 <code>elasticsearch 7.17.6</code></p><p>出现这个页面，就表示部署成功了</p><img src="/docker-run-elasticsearch/image-20221118094110326.png" class=""><h3 id="运行-kibana-7-17-6-容器"><a href="#运行-kibana-7-17-6-容器" class="headerlink" title="运行 kibana 7.17.6 容器"></a>运行 <code>kibana 7.17.6</code> 容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name kibana \</span><br><span class="line">--net es-net \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">--restart unless-stopped \</span><br><span class="line">kibana:7.17.6</span><br></pre></td></tr></table></figure><p>通过 <a href="http://192.168.200.160:5601/">http://192.168.200.160:5601</a> 访问 <code>kibana 7.17.6</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 安装 vim 文本编辑工具</title>
      <link href="/linux-install-vim/"/>
      <url>/linux-install-vim/</url>
      
        <content type="html"><![CDATA[<h2 id="CentOS-安装-vim"><a href="#CentOS-安装-vim" class="headerlink" title="CentOS 安装 vim"></a>CentOS 安装 vim</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vim</span><br></pre></td></tr></table></figure><p>安装过程中，会有确认提示，此时输入 y，然后回车，继续安装</p><h2 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h2><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><ol><li><p>命令模式下可以查看文件内容、移动光标（上下左右箭头、gg、G）</p></li><li><p>通过 vim 命令打开文件后，默认进入命令模式</p></li><li><p>另外两种模式需要首先进入命令模式，才能进入彼此</p></li></ol><table><thead><tr><th>命令模式指令</th><th>含义</th></tr></thead><tbody><tr><td>gg</td><td>定位到文本内容的第一行</td></tr><tr><td>G</td><td>定位到文本内容的最后一行</td></tr><tr><td>dd</td><td>删除光标所在行的数据</td></tr><tr><td>ndd</td><td>删除当前光标所在行及之后的n行数据</td></tr><tr><td>u</td><td>撤销操作</td></tr><tr><td>shift + zz</td><td>保存并退出</td></tr><tr><td>i 或 a 或 o</td><td>进入插入模式</td></tr></tbody></table><h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h3><ol><li><p>插入模式下可以对文件内容进行编辑</p></li><li><p>在命令模式下按下<code>[i, a, o]</code>任意一个，可以进入插入模式。进入插入模式后，下方会出现 <code>【insert】</code> 字样</p></li><li><p>在插入模式下按下 <code>ESC</code> 键，回到命令模式</p></li></ol><h3 id="底行模式"><a href="#底行模式" class="headerlink" title="底行模式"></a>底行模式</h3><ol><li><p>底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作</p></li><li><p>在命令模式下按下<code>[: , /]</code>任意一个，可以进入底行模式</p></li><li><p>通过 <code>/</code> 方式进入底行模式后，可以对文件内容进行查找</p></li><li><p>通过 <code>:</code> 方式进入底行模式后，可以输入 <code>wq</code>（保存并退出）、<code>q!</code>（不保存退出）、<code>set nu</code>（显示行号）</p></li></ol><table><thead><tr><th>底行模式命令</th><th>含义</th></tr></thead><tbody><tr><td>:wq</td><td>保存并退出</td></tr><tr><td>:q!</td><td>不保存退出</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>取消行号显示</td></tr><tr><td>:n</td><td>定位到第 n 行，如 :10 就是定位到第 10 行</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装 MinIO</title>
      <link href="/docker-install-minio/"/>
      <url>/docker-install-minio/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-安装-MinIO"><a href="#Docker-安装-MinIO" class="headerlink" title="Docker 安装 MinIO"></a>Docker 安装 MinIO</h1><h2 id="Docker-拉取-MinIO-镜像"><a href="#Docker-拉取-MinIO-镜像" class="headerlink" title="Docker 拉取 MinIO 镜像"></a>Docker 拉取 MinIO 镜像</h2><p>通过 <code>docker pull </code> 命令拉取最新版的 <code>minio </code>镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure><p>通过 <code>docker images</code> 命令查看当前已经下载的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="Docker-创建-MinIO-容器"><a href="#Docker-创建-MinIO-容器" class="headerlink" title="Docker 创建 MinIO 容器"></a>Docker 创建 MinIO 容器</h2><p>创建 <code>minio</code> 配置文件映射到容器外部的文件夹目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/minio/config</span><br><span class="line">mkdir -p /home/minio/data</span><br></pre></td></tr></table></figure><p>通过 <code>docker run</code> 命令创建 <code>minio</code> 容器</p><blockquote><p>-p 9000:9000 -p 9090:9090 将容器内的 9090 和 9000 端口映射到外部宿主机</p><p>-e “MINIO_ACCESS_KEY&#x3D;maysean” 登录用户名为 maysean</p><p>-e “MINIO_SECRET_KEY&#x3D;maysean16” 登录的密码为 maysean16</p><p>-v &#x2F;home&#x2F;minio&#x2F;data:&#x2F;data 容器卷文件映射</p><p>-v &#x2F;home&#x2F;minio&#x2F;config:&#x2F;root&#x2F;.minio 容器卷文件映射</p><p>–console-address “:9090” 控制台通过 9090 端口进入</p><p>-address “:9000” SpringBoot 集成 MinIO 通过 9000 端口连接</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9000:9000 -p 9090:9090 \</span><br><span class="line">     --name minio \</span><br><span class="line">     -d --restart=always \</span><br><span class="line">     -e &quot;MINIO_ACCESS_KEY=maysean&quot; \</span><br><span class="line">     -e &quot;MINIO_SECRET_KEY=maysean16&quot; \</span><br><span class="line">     -v /home/minio/data:/data \</span><br><span class="line">     -v /home/minio/config:/root/.minio \</span><br><span class="line">     minio/minio server \</span><br><span class="line">     /data --console-address &quot;:9090&quot; -address &quot;:9000&quot;</span><br></pre></td></tr></table></figure><p>通过 <code>docker ps</code> 命令查看正在运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>通过 <a href="http://192.168.200.160:9090/login">http://192.168.200.160:9090/login</a> 进入登录界面</p><ul><li><p>用户名：<code>maysean</code></p></li><li><p>密码：<code>maysean16</code></p></li></ul><img src="/docker-install-minio/login-Interface.png" class=""><p>至此 MinIO 就安装完毕了！</p><h2 id="延伸-SpringBoot-集成-MinIO"><a href="#延伸-SpringBoot-集成-MinIO" class="headerlink" title="延伸 SpringBoot 集成 MinIO"></a>延伸 SpringBoot 集成 MinIO</h2><p>创建一个 <code>SpringBoot </code>项目 <code>springboot-minio</code></p><img src="/docker-install-minio/springboot-minio.png" class=""><p><code>pom.xml</code> 依赖配置 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MinIO 版本为 8.x.x 对应的 okhttp 的版本要大于 4.8.1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hutool --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建提供服务的账户，其实就是 <code>SpringBoot</code> 项目连接 <code>MinIO</code> 的账户</p><img src="/docker-install-minio/image-20221029105228113.png" class=""><p>点击 <code>create</code> 创建用户名密码</p><img src="/docker-install-minio/image-20221029105312100.png" class=""><p>可以将用户名密码下载下来会生成一个文件 <code>credentials.json</code></p><img src="/docker-install-minio/image-20221029105519346.png" class=""><p><code>credentials.json</code> 文件，用户名和密码界面上也相对应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;console&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;access_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NJBPKYV95NWUCP5MDDF2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;secret_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v0ZkNxRDSMm7+AxbQM4+BKnNzF3obYSDeS+6NIDT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>SpringBoot 配置文件 <code>application.yml</code></p><blockquote><p>秘钥对应着之前的 credentials.json 文件里面的秘钥</p><p>accessKey: WT6NIKBB8GOVG9ZPV6GL</p><p>secretKey: FNmyv5tnsi9+PLRpebh8VPTO4vcSdPfduyNIszzj</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springboot-minio</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="comment"># 配置文件上传单个文件最大大小</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="comment"># 访问的 url</span></span><br><span class="line">  <span class="attr">endPoint:</span> <span class="string">http://minio-server:9000</span></span><br><span class="line">  <span class="comment"># 秘钥</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">WT6NIKBB8GOVG9ZPV6GL</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">FNmyv5tnsi9+PLRpebh8VPTO4vcSdPfduyNIszzj</span></span><br><span class="line">  <span class="attr">bucketName:</span> <span class="string">maysean</span> <span class="comment"># 桶名我这是给出了一个默认桶名</span></span><br></pre></td></tr></table></figure><p>补充一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maysean.minio.pojo.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectItemVo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String objectName;</span><br><span class="line">    <span class="keyword">private</span> Long size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MinIO 工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.maysean.minio.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.maysean.minio.config.MinioClientConfig;</span><br><span class="line"><span class="keyword">import</span> com.maysean.minio.pojo.vo.ObjectItemVo;</span><br><span class="line"><span class="keyword">import</span> io.minio.*;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.DeleteError;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.DeleteObject;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.http.fileupload.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MinioClientConfig minioClientConfig;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinioUtil</span><span class="params">(MinioClientConfig minioClientConfig, MinioClient minioClient)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.minioClientConfig = minioClientConfig;</span><br><span class="line">        <span class="built_in">this</span>.minioClient = minioClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断存储桶是否存在，不存在则创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">existBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());</span><br><span class="line">            <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">                minioClient.makeBucket(MakeBucketArgs.builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .build());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建存储桶</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否创建成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">makeBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除存储桶</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">removeBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.removeBucket(RemoveBucketArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单个文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件访问路径 urls</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = upload(Collections.singletonList(file));</span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isNotEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;文件上传失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量上传文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> files 文件集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件访问路径 urls</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">upload</span><span class="params">(List&lt;MultipartFile&gt; files)</span> &#123;</span><br><span class="line">        List&lt;String&gt; urls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(files.size());</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">            <span class="keyword">assert</span> fileName != <span class="literal">null</span>;</span><br><span class="line">            String[] split = fileName.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (split.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                fileName = split[<span class="number">0</span>] + <span class="string">&quot;_&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;.&quot;</span> + split[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fileName = fileName + System.currentTimeMillis();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in = file.getInputStream();</span><br><span class="line">                minioClient.putObject(PutObjectArgs.builder()</span><br><span class="line">                        .bucket(minioClientConfig.getBucketName())</span><br><span class="line">                        .object(fileName)</span><br><span class="line">                        .stream(in, in.available(), -<span class="number">1</span>)</span><br><span class="line">                        .contentType(file.getContentType())</span><br><span class="line">                        .build()</span><br><span class="line">                );</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        in.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            urls.add(minioClientConfig.getEndPoint() + <span class="string">&quot;/&quot;</span> + minioClientConfig.getBucketName() + <span class="string">&quot;/&quot;</span> + fileName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> urls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应体实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; download(String fileName) &#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.hasBlank(fileName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(<span class="string">&quot;文件名为空&quot;</span>.getBytes(), HttpStatus.BAD_REQUEST);</span><br><span class="line">        &#125;</span><br><span class="line">        ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = minioClient.getObject(GetObjectArgs.builder()</span><br><span class="line">                    .bucket(minioClientConfig.getBucketName())</span><br><span class="line">                    .object(fileName).build());</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            IOUtils.copy(in, out);</span><br><span class="line">            <span class="comment">// 封装返回值</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = out.toByteArray();</span><br><span class="line">            <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            headers.setContentLength(bytes.length);</span><br><span class="line">            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">            headers.setAccessControlExposeHeaders(Collections.singletonList(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">            responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, HttpStatus.OK);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(<span class="string">&quot;未找到该文件&quot;</span>.getBytes(), HttpStatus.NOT_FOUND);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        in.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> responseEntity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看存储桶里面的文件对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ObjectItemVo&gt; <span class="title function_">listObjects</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(</span><br><span class="line">                ListObjectsArgs.builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .build());</span><br><span class="line">        List&lt;ObjectItemVo&gt; objectItems = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Result&lt;Item&gt; result : results) &#123;</span><br><span class="line">                <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> result.get();</span><br><span class="line">                <span class="type">ObjectItemVo</span> <span class="variable">objectItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectItemVo</span>();</span><br><span class="line">                objectItem.setObjectName(item.objectName());</span><br><span class="line">                objectItem.setSize(item.size());</span><br><span class="line">                objectItems.add(objectItem);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> objectItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储桶名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects    对象名集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Iterable&lt;Result&lt;DeleteError&gt;&gt; <span class="title function_">removeObjects</span><span class="params">(String bucketName, List&lt;String&gt; objects)</span> &#123;</span><br><span class="line">        List&lt;DeleteObject&gt; dos = objects.stream().map(DeleteObject::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> minioClient.removeObjects(RemoveObjectsArgs.builder()</span><br><span class="line">                .bucket(bucketName)</span><br><span class="line">                .objects(dos)</span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven 配置文件</title>
      <link href="/maven-config/"/>
      <url>/maven-config/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven-配置文件"><a href="#Maven-配置文件" class="headerlink" title="Maven 配置文件"></a>Maven 配置文件</h1><h2 id="用于本地开发环境，对-JDK-版本有所要求"><a href="#用于本地开发环境，对-JDK-版本有所要求" class="headerlink" title="用于本地开发环境，对 JDK 版本有所要求"></a>用于本地开发环境，对 JDK 版本有所要求</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置本地仓库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/develop/maven_repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置镜像 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置指定JDK版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 定义的编译器插件 ID，全局唯一 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插件标记，activeByDefault 默认编译器，jdk提供编译器版本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置信息 source-源信息，target-字节码信息，compilerVersion-编译过程版本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="用于本地测试环境，对-JDK-版本没有什么要求"><a href="#用于本地测试环境，对-JDK-版本没有什么要求" class="headerlink" title="用于本地测试环境，对 JDK 版本没有什么要求"></a>用于本地测试环境，对 JDK 版本没有什么要求</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置本地仓库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/develop/maven_repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置镜像 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>oracle 基本语法使用</title>
      <link href="/oracle-base-grammer/"/>
      <url>/oracle-base-grammer/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle-基本语法"><a href="#Oracle-基本语法" class="headerlink" title="Oracle 基本语法"></a>Oracle 基本语法</h1><h2 id="修改表语法"><a href="#修改表语法" class="headerlink" title="修改表语法"></a>修改表语法</h2><p>增加字段语法：<code>alter table 表名称 add (列名1 类型 [default 默认值], 列名2 类型 [default 默认值]...);</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给用户表增加 id 和 name 两个字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t_user <span class="keyword">add</span> (id varchar2(<span class="number">16</span>), name varchar2(<span class="number">32</span>));</span><br></pre></td></tr></table></figure><p>修改字段语法：<code>alter table 表名称 modify (列名1 类型 [default 默认值], 列名 2 类型 [default 默认值]...);</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改用户表 id 和 name 两个字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t_user modify (id <span class="type">char</span>(<span class="number">16</span>), name <span class="type">char</span>(<span class="number">32</span>));</span><br></pre></td></tr></table></figure><p>修改字段名语法：<code>alter table 表名称 rename column 原列名 to 新列名;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将用户表 id 字段名修改为 user_id</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t_user rename <span class="keyword">column</span> id <span class="keyword">to</span> user_id;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nodeJs 配置安装路径</title>
      <link href="/nodejs-config/"/>
      <url>/nodejs-config/</url>
      
        <content type="html"><![CDATA[<p>配置安装路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\nodejs\node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\nodejs\node_cache&quot;</span></span><br></pre></td></tr></table></figure><p>配置镜像站</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>显示所有配置信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure><p>查看镜像源配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>看看能否获得 vue 的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm info vue</span><br></pre></td></tr></table></figure><p>如果 <code>npm install</code> 命令报错，需要在 path 变量中配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\nodejs</span><br><span class="line">D:\nodejs\node_global</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis 集群搭建</title>
      <link href="/redis-cluster-build/"/>
      <url>/redis-cluster-build/</url>
      
        <content type="html"><![CDATA[<h1 id="redis-集群搭建"><a href="#redis-集群搭建" class="headerlink" title="redis 集群搭建"></a>redis 集群搭建</h1><h2 id="拉取-redis-镜像"><a href="#拉取-redis-镜像" class="headerlink" title="拉取 redis 镜像"></a>拉取 redis 镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><h2 id="创建-redis-数据文件目录"><a href="#创建-redis-数据文件目录" class="headerlink" title="创建 redis 数据文件目录"></a>创建 redis 数据文件目录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /mnt/redis/r1/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /mnt/redis/r2/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /mnt/redis/r3/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /mnt/redis/r4/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /mnt/redis/r5/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /mnt/redis/r6/data</span><br></pre></td></tr></table></figure><h2 id="准备-redis-配置文件"><a href="#准备-redis-配置文件" class="headerlink" title="准备 redis 配置文件"></a>准备 redis 配置文件</h2><p>需要准备 6 份 redis 配置文件，分别对应 redis-cluster（redis 集群） 中的 6 个结点。</p><p>准备第 1 份 redis 配置文件</p><p>执行命令 <code>vi /mnt/redis/r1/redis.conf</code> 内容为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">port 7001</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line">databases 1</span><br><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启集群</span></span><br><span class="line">cluster-enabled <span class="built_in">yes</span></span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><p>第 <code>2、3、4、5、6</code> 份 <code>redis</code> 配置文件，除了执行命令的目录不同，还有配置文件内容端口号 <code>port</code> 不同，为 <code>7002 ~ 7006</code>，其他保持一致，故此处只展示一份。</p><h2 id="准备-docker-compose-yml-配置文件"><a href="#准备-docker-compose-yml-配置文件" class="headerlink" title="准备 docker-compose.yml 配置文件"></a>准备 docker-compose.yml 配置文件</h2><p>执行命令 <code>vim /mnt/redis/docker-compose.yml</code>，内容为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3.6&quot;</span></span><br><span class="line">services:</span><br><span class="line">  redis1:</span><br><span class="line">    container_name: redis1</span><br><span class="line">    image: redis:latest</span><br><span class="line">    network_mode: host</span><br><span class="line">    volumes:</span><br><span class="line">      - /mnt/redis/r1/redis.conf:/config/redis.conf</span><br><span class="line">      - /mnt/redis/r1/data:/data</span><br><span class="line">    <span class="built_in">command</span>: [ <span class="string">&quot;redis-server&quot;</span>, /config/redis.conf ]</span><br><span class="line">    restart: always</span><br><span class="line">  redis2:</span><br><span class="line">    container_name: redis2</span><br><span class="line">    image: redis:latest</span><br><span class="line">    network_mode: host</span><br><span class="line">    volumes:</span><br><span class="line">      - /mnt/redis/r2/redis.conf:/config/redis.conf</span><br><span class="line">      - /mnt/redis/r2/data:/data</span><br><span class="line">    <span class="built_in">command</span>: [ <span class="string">&quot;redis-server&quot;</span>, /config/redis.conf ]</span><br><span class="line">    restart: always</span><br><span class="line">  redis3:</span><br><span class="line">    container_name: redis3</span><br><span class="line">    image: redis:latest</span><br><span class="line">    network_mode: host</span><br><span class="line">    volumes:</span><br><span class="line">      - /mnt/redis/r3/redis.conf:/config/redis.conf</span><br><span class="line">      - /mnt/redis/r3/data:/data</span><br><span class="line">    <span class="built_in">command</span>: [ <span class="string">&quot;redis-server&quot;</span>, /config/redis.conf ]</span><br><span class="line">    restart: always</span><br><span class="line">  redis4:</span><br><span class="line">    container_name: redis4</span><br><span class="line">    image: redis:latest</span><br><span class="line">    network_mode: host</span><br><span class="line">    volumes:</span><br><span class="line">      - /mnt/redis/r4/redis.conf:/config/redis.conf</span><br><span class="line">      - /mnt/redis/r4/data:/data</span><br><span class="line">    <span class="built_in">command</span>: [ <span class="string">&quot;redis-server&quot;</span>, /config/redis.conf ]</span><br><span class="line">    restart: always</span><br><span class="line">  redis5:</span><br><span class="line">    container_name: redis5</span><br><span class="line">    image: redis:latest</span><br><span class="line">    network_mode: host</span><br><span class="line">    volumes:</span><br><span class="line">      - /mnt/redis/r5/redis.conf:/config/redis.conf</span><br><span class="line">      - /mnt/redis/r5/data:/data</span><br><span class="line">    <span class="built_in">command</span>: [ <span class="string">&quot;redis-server&quot;</span>, /config/redis.conf ]</span><br><span class="line">    restart: always</span><br><span class="line">  redis6:</span><br><span class="line">    container_name: redis6</span><br><span class="line">    image: redis:latest</span><br><span class="line">    network_mode: host</span><br><span class="line">    volumes:</span><br><span class="line">      - /mnt/redis/r6/redis.conf:/config/redis.conf</span><br><span class="line">      - /mnt/redis/r6/data:/data</span><br><span class="line">    <span class="built_in">command</span>: [ <span class="string">&quot;redis-server&quot;</span>, /config/redis.conf ]</span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure><blockquote><p>注意：redis-server 是在 host 文件中配置了 192.168.200.160 redis-server</p></blockquote><p>在此也推荐一款可以很方便配置 <code>host</code> 的软件，<code>SwitchHosts</code></p><h2 id="执行-redis-cluster-服务编排"><a href="#执行-redis-cluster-服务编排" class="headerlink" title="执行 redis-cluster 服务编排"></a>执行 redis-cluster 服务编排</h2><p>在这之前最好检查有没有安装 <code>docker-compose</code></p><p>如若没有安装，下载链接：<a href="https://meixiang.lanzouj.com/iSnZV09u8vze">https://meixiang.lanzouj.com/iSnZV09u8vze</a></p><p>下载完之后，压缩包解压，将文件上传到 <code>/usr/local/bin/</code> 目录下</p><h3 id="执行-redis-cluster-服务编排-1"><a href="#执行-redis-cluster-服务编排-1" class="headerlink" title="执行 redis-cluster 服务编排"></a>执行 redis-cluster 服务编排</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入指定路径</span></span><br><span class="line"><span class="built_in">cd</span> /mnt/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务编排启动 redis 集群</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis1 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 redis 集群创建命令，注意要修改所有的 192.168.200.160 为自己设备的实际 IP，如果使用云服务器，则使用公网 IP</span></span><br><span class="line">redis-cli --cluster create 192.168.200.160:7001 192.168.200.160:7002 192.168.200.160:7003 192.168.200.160:7004 192.168.200.160:7005 192.168.200.160:7006 --cluster-replicas 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群节点信息</span></span><br><span class="line">redis-cli -p 7001 cluster nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接集群</span></span><br><span class="line">redis-cli -h 127.0.0.1 -p 7001 -c</span><br></pre></td></tr></table></figure><p>如果卡在 <code>Waiting for the cluster to join </code> 这一步，检查端口号是否开放。redis 集群除了需要使用 <code>7001 ~ 7006</code> ，还需要开通集群总线端口，端口号为 redis 端口号 + 10000，在这里就是端口号为 <code>17001 ~ 17006</code> 的都需要开放</p><h3 id="查看端口开放状态"><a href="#查看端口开放状态" class="headerlink" title="查看端口开放状态"></a>查看端口开放状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --query-port=7001/tcp</span><br><span class="line">firewall-cmd --query-port=17001/tcp</span><br><span class="line">firewall-cmd --query-port=7002/tcp</span><br><span class="line">firewall-cmd --query-port=17002/tcp</span><br><span class="line">firewall-cmd --query-port=7003/tcp</span><br><span class="line">firewall-cmd --query-port=17003/tcp</span><br><span class="line">firewall-cmd --query-port=7004/tcp</span><br><span class="line">firewall-cmd --query-port=17004/tcp</span><br><span class="line">firewall-cmd --query-port=7005/tcp</span><br><span class="line">firewall-cmd --query-port=17005/tcp</span><br><span class="line">firewall-cmd --query-port=7006/tcp</span><br><span class="line">firewall-cmd --query-port=17006/tcp</span><br></pre></td></tr></table></figure><h3 id="开放端口-7001-7006-和-17001-17006"><a href="#开放端口-7001-7006-和-17001-17006" class="headerlink" title="开放端口 7001 ~ 7006 和 17001 ~ 17006"></a>开放端口 7001 ~ 7006 和 17001 ~ 17006</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=7001/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=17001/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=7002/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=17002/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=7003/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=17003/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=7004/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=17004/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=7005/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=17005/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=7006/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=17006/tcp</span><br></pre></td></tr></table></figure><h3 id="重启防火墙，配置生效"><a href="#重启防火墙，配置生效" class="headerlink" title="重启防火墙，配置生效"></a>重启防火墙，配置生效</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><blockquote><p>firwall-cmd：是 Linux 提供的操作 firewall 的一个工具；<br>–permanent：表示设置为持久；<br>–add-port：标识添加的端口；</p></blockquote><h2 id="后续操作视情况而定"><a href="#后续操作视情况而定" class="headerlink" title="后续操作视情况而定"></a>后续操作视情况而定</h2><p>集群启动成功后，需要在宿主机中检查集群节点的配置文件（Ctrl+d可以退出容器）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看配置文件命令：</span></span><br><span class="line"><span class="built_in">cat</span> /mnt/redis/r1/data/nodes.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果出现内网 IP（例如：172.x.x.x），则需要修改宿主机的集群配置文件</span></span><br><span class="line"><span class="comment"># 检查 6 个配置文件，把所有的内网 IP 都改为当前公网 IP</span></span><br><span class="line"><span class="comment"># 在宿主机分别执行以下命令，分别进行修改：</span></span><br><span class="line">vi /mnt/redis/r1/data/nodes.conf</span><br><span class="line">vi /mnt/redis/r2/data/nodes.conf</span><br><span class="line">vi /mnt/redis/r3/data/nodes.conf</span><br><span class="line">vi /mnt/redis/r4/data/nodes.conf</span><br><span class="line">vi /mnt/redis/r5/data/nodes.conf</span><br><span class="line">vi /mnt/redis/r6/data/nodes.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入指定路径</span></span><br><span class="line"><span class="built_in">cd</span> /mnt/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务编排停止 redis 集群并删除容器</span></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务编排启动 redis 集群</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows 安装 vmware</title>
      <link href="/windows-install-vmware/"/>
      <url>/windows-install-vmware/</url>
      
        <content type="html"><![CDATA[<p>待完善..</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安装 docker 以及基本命令的使用</title>
      <link href="/linux-install-docker/"/>
      <url>/linux-install-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-docker-以及基本命令的使用"><a href="#安装-docker-以及基本命令的使用" class="headerlink" title="安装 docker 以及基本命令的使用"></a>安装 docker 以及基本命令的使用</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><blockquote><p>操作系统：CentOS 7 64位</p></blockquote><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="附：卸载"><a href="#附：卸载" class="headerlink" title="附：卸载"></a>附：卸载</h3><p>如果你的 CentOS 7 64位原来就安装过 docker，请执行一下命令卸载。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                docker-client \</span><br><span class="line">                docker-client-latest \</span><br><span class="line">                docker-common \</span><br><span class="line">                docker-latest \</span><br><span class="line">                docker-latest-logrotate \</span><br><span class="line">                docker-logrotate \</span><br><span class="line">                docker-engine</span><br></pre></td></tr></table></figure><h3 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装所需资源包</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 docker 镜像源</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="启动-docker"><a href="#启动-docker" class="headerlink" title="启动 docker"></a>启动 docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="配置开机自启动"><a href="#配置开机自启动" class="headerlink" title="配置开机自启动"></a>配置开机自启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="查看-docker-版本"><a href="#查看-docker-版本" class="headerlink" title="查看 docker 版本"></a>查看 docker 版本</h3><p>以下命令二选一执行即可查看版本号。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><p>由于 docker 官方镜像仓库网速较差，我们需要设置国内镜像服务：</p><p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://upt0253l.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="基本命令的使用"><a href="#基本命令的使用" class="headerlink" title="基本命令的使用"></a>基本命令的使用</h2><h3 id="Docker-容器使用"><a href="#Docker-容器使用" class="headerlink" title="Docker 容器使用"></a>Docker 容器使用</h3><h4 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><blockquote><p>参数说明：</p><p><code>-i</code>：允许你对容器内的标准输入（STDIN）进行交互，<code>-i</code> 对应英文 <code>interactive</code></p><p><code>-t</code>：在新容器内指定一个伪终端或终端，<code>-t</code> 对应英文 <code>terminal</code></p><p><code>ubuntu</code>：<code>ubuntu</code> 镜像</p><p><code>/bin/bash</code>：放在镜像名后的是命令，这里我们希望有个交互式 Shell</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>要退出终端，直接输入 exit</p><h4 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h4><p>在大部分的场景下，我们希望 docker 的服务是在后台运行的，我们可以过 <code>-d</code> 指定容器的运行模式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name ubuntu-test ubuntu /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p>注：加了 <code>-d</code> 参数默认不会进入容器，想要进入容器需要使用指令 <code>docker exec</code></p></blockquote><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><p>在使用 <code>-d</code> 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入</p><p><code>docker exec</code>：推荐大家使用 <code>docker exec</code> 命令，因为此命令会退出容器终端，但不会导致容器的停止</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker 安装 oracle11g</title>
      <link href="/docker-install-oracle11g/"/>
      <url>/docker-install-oracle11g/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-安装-Oracle11g"><a href="#Docker-安装-Oracle11g" class="headerlink" title="Docker 安装 Oracle11g"></a>Docker 安装 Oracle11g</h1><h2 id="Oracler11g-安装"><a href="#Oracler11g-安装" class="headerlink" title="Oracler11g 安装"></a>Oracler11g 安装</h2><p>Docker 拉取<code>阿里云</code> Oracle11g 镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it -p 1521:1521 --name oracle11g --restart=always registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br></pre></td></tr></table></figure><p>进入容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it oracle11g bash</span><br></pre></td></tr></table></figure><p>切换到 <code>root</code> 用户，密码 <code>helowin</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/oracle/.bashrc</span><br></pre></td></tr></table></figure><p>在文件的最后加上</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2</span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=helowin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ORACLE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>保存退出 <code>:wq</code></p><p>刷新环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /home/oracle/.bashrc</span><br></pre></td></tr></table></figure><p>进入命令行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlplus /nolog</span><br></pre></td></tr></table></figure><p>大功告成！</p><blockquote><p>如果使用阿里云服务器或者虚拟机则还需要释放 1521 端口号，不建议关闭防火墙</p></blockquote><h2 id="InstantClient-安装"><a href="#InstantClient-安装" class="headerlink" title="InstantClient 安装"></a>InstantClient 安装</h2><p>蓝奏云：<a href="https://meixiang.lanzouj.com/iZ7zk07jcjwf">https://meixiang.lanzouj.com/iZ7zk07jcjwf</a></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量名：TNS_ADMIN</span><br><span class="line">变量值：D:\develop\instantclient_11_2 <span class="comment"># InstantClient 安装目录</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：tnsnames.ora 不是必须要建的，如果不创建，连接时数据库时需使用全 url 不可缩写</p></blockquote><p>在 InstantClient 安装目录下新建 network\admin 目录</p><p>在 D:\develop\instantclient_11_2\network\admin下新建 tnsnames.ora 文件</p><p>tnsnames.ora 文件内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HELOWIN =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = helowin)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>首行 <code>HELOWIN</code> 为连接数据库名，可随意</p><p>第三行 <code>127.0.0.1</code> 为服务器地址，按照个人情况修改</p><h2 id="PLSQL14-安装"><a href="#PLSQL14-安装" class="headerlink" title="PLSQL14 安装"></a>PLSQL14 安装</h2><p>蓝奏云：<a href="https://meixiang.lanzouj.com/iFKWu07jcn6d">https://meixiang.lanzouj.com/iFKWu07jcn6d</a></p><img src="/docker-install-oracle11g/image-20220708104204863.png" class=""><p>重启 PLSQL，相关安装教程以及注册密钥可行百度！</p><p>PLSQL 远程连接 Oracle 并登录</p><img src="/docker-install-oracle11g/image-20220708110705333.png" class=""><p>至此，完毕！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 自动装配原理</title>
      <link href="/springboot-automatic-assembly/"/>
      <url>/springboot-automatic-assembly/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p><code>@SpringBootApplication</code> 是 <code>SpringBoot</code> 项目启动类上的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaySeanApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MaySeanApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@SpringBootApplication</code> 注解内部包含的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">// 启动类注解</span></span><br><span class="line">├─<span class="meta">@ComponentScan</span> <span class="comment">// 扫描组件</span></span><br><span class="line">├─<span class="meta">@SpringBootConfiguration</span> <span class="comment">// 标识类是一个 SpringBoot 配置类</span></span><br><span class="line">│└─<span class="meta">@Configuration</span> <span class="comment">// 主要是通过这个注解进行配置，配置其他 @Bean</span></span><br><span class="line">└─<span class="meta">@EnableAutoConfiguration</span> <span class="comment">// 主要是通过这个注解实现自动装配</span></span><br><span class="line">└─<span class="meta">@import</span> <span class="comment">// 自动装配的关键</span></span><br></pre></td></tr></table></figure><h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><p><code>@ComponentScan</code> 可以扫描到的组件注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 标识组件类</span></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">// 标识为控制层类</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">// 标识为服务层类</span></span><br><span class="line"><span class="meta">@Repository</span> <span class="comment">// 标识为 DAO 层类</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span> <span class="comment">// 标识为全局异常处理类</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 标识为配置类</span></span><br></pre></td></tr></table></figure><p><code>@ComponentScan</code> 扫描范围<strong>默认</strong>是当前类（加了 <code>@ComponentScan</code> 注解的类）所在的包以及子包</p><p><code>@ComponentScan(&quot;要扫描的包&quot;)</code> <strong>自定义</strong>扫描范围，如：<code>@ComponentScan(&quot;com.maysean.mapper&quot;)</code></p><h2 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h2><p><code>@SpringBootConfiguration</code> 注解内部包含的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span> <span class="comment">// 标识类是一个 SpringBoot 配置类</span></span><br><span class="line">└─<span class="meta">@Configuration</span> <span class="comment">// 主要是通过这个注解进行配置，配置其他 @Bean</span></span><br></pre></td></tr></table></figure><p><code>@Bean</code> 标注的方法，返回值会被 <code>Spring</code> 管理</p><h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><p><code>@EnableAutoConfiguration</code> 注解内部包含的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span> <span class="comment">// 主要是通过这个注解实现自动装配</span></span><br><span class="line">└─<span class="meta">@import(&#123;AutoConfigurationImportSelector.class&#125;)</span> <span class="comment">// @import 自动装配的关键</span></span><br></pre></td></tr></table></figure><p><code>@import(&#123;AutoConfigurationImportSelector.class&#125;)</code> </p><p><code>@import</code> 作用：导入其他的配置类</p><h2 id="AutoConfigurationImportSelector-内部方法"><a href="#AutoConfigurationImportSelector-内部方法" class="headerlink" title="AutoConfigurationImportSelector 内部方法"></a>AutoConfigurationImportSelector 内部方法</h2><h3 id="selectImports-方法"><a href="#selectImports-方法" class="headerlink" title="selectImports 方法"></a>selectImports 方法</h3><p>自动装配的核心实现，它主要是读取 <code>META-INF/spring.factories</code> 文件，经过去重、过滤，返回需要装配的配置类集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        AutoConfigurationImportSelector.<span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> <span class="built_in">this</span>.getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">        <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="selectImports-调用的-getAutoConfigurationEntry-方法"><a href="#selectImports-调用的-getAutoConfigurationEntry-方法" class="headerlink" title="selectImports 调用的 getAutoConfigurationEntry 方法"></a>selectImports 调用的 getAutoConfigurationEntry 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> AutoConfigurationImportSelector.AutoConfigurationEntry <span class="title function_">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 由于源码有很多，笔者只列出关键的部分，其他代码以 ... 表示</span></span><br><span class="line">        List&lt;String&gt; configurations = <span class="built_in">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationImportSelector</span>.AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getAutoConfigurationEntry-调用的-getCandidateConfigurations-方法"><a href="#getAutoConfigurationEntry-调用的-getCandidateConfigurations-方法" class="headerlink" title="getAutoConfigurationEntry 调用的 getCandidateConfigurations 方法"></a>getAutoConfigurationEntry 调用的 getCandidateConfigurations 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="built_in">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="built_in">this</span>.getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpringFactoriesLoader.loadFactoryNames(<span class="built_in">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="built_in">this</span>.getBeanClassLoader());</span><br></pre></td></tr></table></figure><p><code>SpringFactoriesLoader</code> 的 <code>loadFactoryNames</code> 会去扫描 <code>SpringBoot</code> 的各个依赖包下的 <code>META-INF/spring.factories</code> 文件，在该 <code>spring.factories</code> 中以 <code>key=value</code> 的方式存储了一些自动配置类的名称，根据配置文件内容以及条件筛选的方式，把不符合的配置类移除掉，最终完成自动装配。</p><p><code>spring.factories</code> 文件内容示例</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span></span><br><span class="line"><span class="string">....</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>@SpringBootApplication</code> 内部有 <code>@EnableAutoConfiguration</code>，而在它的内部还有一个 <code>@import</code> 注解，这个注解是实现自动装配的关键，它的作用是导入自动配置类，通过装配 <code>AutoConfigurationImportSelector.class</code>，而它有一个 <code>selectImports</code> 方法，又调用了 <code>getAutoConfigurationEntry</code> 方法，在这个方法里又层级调用了 <code>getCandidateConfigurations</code> 方法，关键在于这个方法里面有 <code>SpringFactoriesLoader</code> 调用了 <code>loadFactoryNames</code> 方法，而<code>SpringFactoriesLoader</code> 的 <code>loadFactoryNames</code> 会去扫描 <code>SpringBoot</code> 的各个依赖包下的 <code>META-INF/spring.factories</code> 文件，在该 <code>spring.factories</code> 中以 <code>key=value</code> 的方式存储了一些自动配置类的名称，根据配置文件内容以及条件筛选的方式，把不符合的配置类移除掉，最终完成自动装配。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微服务之间的相互调用</title>
      <link href="/feign-remote-call/"/>
      <url>/feign-remote-call/</url>
      
        <content type="html"><![CDATA[<h2 id="微服务环境搭建"><a href="#微服务环境搭建" class="headerlink" title="微服务环境搭建"></a>微服务环境搭建</h2><h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">parent <span class="comment">// 父模块</span></span><br><span class="line">├─feign-api <span class="comment">// feig-api 模块</span></span><br><span class="line">├─gateway <span class="comment">// 网关模块</span></span><br><span class="line">├─order-service <span class="comment">// 订单服务</span></span><br><span class="line">└─user-service <span class="comment">// 用户服务</span></span><br></pre></td></tr></table></figure><h3 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a><strong>业务需求</strong></h3><p>订单服务需要根据用户 <code>id</code>，查询用户信息并存入到订单中</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>启动 <code>Nacos</code></p><h4 id="feign-api-模块环境搭建"><a href="#feign-api-模块环境搭建" class="headerlink" title="feign-api 模块环境搭建"></a>feign-api 模块环境搭建</h4><p>在 <code>feign-api</code> 模块的 <code>pom.xml</code> 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- feign 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="gateway-模块环境搭建"><a href="#gateway-模块环境搭建" class="headerlink" title="gateway 模块环境搭建"></a>gateway 模块环境搭建</h4><p>在 <code>gateway</code> 模块的 <code>pom.xml</code> 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringCloud 网关依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Nacos 服务发现依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>gateway</code> 模块的 <code>application.yml</code> 添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment"># 配置网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment"># 配置网关服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos 注册中心地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 路由 id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址 lb 就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 这个是按照路径匹配</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span> <span class="comment"># 路由 id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://orderservice</span> <span class="comment"># 路由的目标地址 lb 就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span> <span class="comment"># 这个是按照路径匹配</span></span><br></pre></td></tr></table></figure><h4 id="order-service-服务环境搭建"><a href="#order-service-服务环境搭建" class="headerlink" title="order-service 服务环境搭建"></a>order-service 服务环境搭建</h4><p>在 <code>order-service</code> 服务的 <code>pom.xml</code> 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 feign-api 模块坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.maysean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- feign 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Nacos 服务发现依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>order-service</code> 服务的 <code>application.yml</code> 添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span> <span class="comment"># 配置 order-service 服务端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span> <span class="comment"># 服务名，此处与网关配置的 lib:// 后面的地址对应</span></span><br><span class="line">  <span class="attr">datasource:</span> </span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/maysean?useSSL=false</span> <span class="comment"># 连接数据库的 url</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span> <span class="comment"># 密码</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span> <span class="comment"># 驱动名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos 注册中心地址</span></span><br></pre></td></tr></table></figure><h4 id="user-service-服务环境搭建"><a href="#user-service-服务环境搭建" class="headerlink" title="user-service 服务环境搭建"></a>user-service 服务环境搭建</h4><p>在 <code>user-service</code> 服务的 <code>pom.xml</code> 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 feign-api 模块坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.maysean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- feign 依赖，如果 user-service 模块不使用 feign 远程调用，可以不配置此依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Nacos 服务发现依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>user-service</code> 服务的 <code>application.yml</code> 添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span> <span class="comment"># 配置 user-service 服务端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span> <span class="comment"># 服务名，此处与网关配置的 lib:// 后面的地址对应</span></span><br><span class="line">  <span class="attr">datasource:</span> </span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/maysean?useSSL=false</span> <span class="comment"># 连接数据库的 url</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span> <span class="comment"># 密码</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span> <span class="comment"># 驱动名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos 注册中心地址</span></span><br></pre></td></tr></table></figure><p>看到此处，会发现 <code>order-service</code> 和 <code>user-service</code> 配置基本一致</p><h2 id="业务实现"><a href="#业务实现" class="headerlink" title="业务实现"></a>业务实现</h2><h3 id="feign-api-业务实现"><a href="#feign-api-业务实现" class="headerlink" title="feign-api 业务实现"></a>feign-api 业务实现</h3><h4 id="feign-api-服务目录结构"><a href="#feign-api-服务目录结构" class="headerlink" title="feign-api 服务目录结构"></a>feign-api 服务目录结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">feign-api <span class="comment">// 模块</span></span><br><span class="line">├─client <span class="comment">// 控制层</span></span><br><span class="line">│└─UserClient.java <span class="comment">// 用户控制层</span></span><br><span class="line">├─pojo # 实体类</span><br><span class="line">│└─User.java <span class="comment">// 用户实体类</span></span><br><span class="line">└─UserApplication.java <span class="comment">// 启动类</span></span><br></pre></td></tr></table></figure><h4 id="feign-api-部分业务代码"><a href="#feign-api-部分业务代码" class="headerlink" title="feign-api 部分业务代码"></a>feign-api 部分业务代码</h4><p><code>UserClient.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span> <span class="comment">// 服务名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与 UserController 方法一致，但是不要方法实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> User</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span> </span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="order-service-业务实现"><a href="#order-service-业务实现" class="headerlink" title="order-service 业务实现"></a>order-service 业务实现</h3><h4 id="order-service-服务目录结构"><a href="#order-service-服务目录结构" class="headerlink" title="order-service 服务目录结构"></a>order-service 服务目录结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">order-service <span class="comment">// 服务</span></span><br><span class="line">├─mapper <span class="comment">// 数据访问层</span></span><br><span class="line">│└─OrderMapper.java <span class="comment">// 订单 Mapper</span></span><br><span class="line">├─pojo # 实体类</span><br><span class="line">│└─Order.java <span class="comment">// 订单实体类</span></span><br><span class="line">├─service # 服务层</span><br><span class="line">│├─OrderService.java <span class="comment">// 订单服务</span></span><br><span class="line">│└─impl <span class="comment">// 服务实现类</span></span><br><span class="line">│└─OrderServiceImpl.java <span class="comment">// 订单服务实现类</span></span><br><span class="line">├─controller <span class="comment">// 控制层</span></span><br><span class="line">│└─OrderController.java <span class="comment">// 订单控制层</span></span><br><span class="line">└─OrderApplication.java <span class="comment">// 启动类</span></span><br></pre></td></tr></table></figure><h4 id="order-service-部分业务代码"><a href="#order-service-部分业务代码" class="headerlink" title="order-service 部分业务代码"></a>order-service 部分业务代码</h4><p><code>OrderApplication.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients(clients = UserClient.class)</span> <span class="comment">// 开启 Feign 的功能，并扫包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SearchApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Order.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>OrderController.java</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService service;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">getOrderById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> service.getOrderById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>OrderServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient; <span class="comment">// 注入 UserClient</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">getOrderById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.getById(id);</span><br><span class="line">        <span class="comment">// 2. 用 Feign 远程调用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userClient.getUserById(order.getUserId());</span><br><span class="line">        <span class="comment">// 3. 封装 user 到 Order</span></span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="comment">// 4. 返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="user-service-业务实现"><a href="#user-service-业务实现" class="headerlink" title="user-service 业务实现"></a>user-service 业务实现</h3><h4 id="user-service-服务目录结构"><a href="#user-service-服务目录结构" class="headerlink" title="user-service 服务目录结构"></a>user-service 服务目录结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">user-service <span class="comment">// 服务</span></span><br><span class="line">├─mapper <span class="comment">// 数据访问层</span></span><br><span class="line">│└─UserMapper.java <span class="comment">// 用户 Mapper</span></span><br><span class="line">├─pojo <span class="comment">// 实体类</span></span><br><span class="line">│└─User.java <span class="comment">// 用户实体类</span></span><br><span class="line">├─service <span class="comment">// 服务层</span></span><br><span class="line">│├─UserService.java <span class="comment">// 用户服务</span></span><br><span class="line">│└─impl <span class="comment">// 服务实现类</span></span><br><span class="line">│└─UserServiceImpl.java <span class="comment">// 用户服务实现类</span></span><br><span class="line">├─controller <span class="comment">// 控制层</span></span><br><span class="line">│└─UserController.java <span class="comment">// 用户控制层</span></span><br><span class="line">└─UserApplication.java <span class="comment">// 启动类</span></span><br></pre></td></tr></table></figure><h4 id="user-service-部分业务代码"><a href="#user-service-部分业务代码" class="headerlink" title="user-service 部分业务代码"></a>user-service 部分业务代码</h4><p> <code>UserController.java</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService service;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> service.getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动运行"><a href="#启动运行" class="headerlink" title="启动运行"></a>启动运行</h2><p>访问 <a href="http://localhost:10010/order?id=101">http://localhost:10010/order?id=101</a></p><p>响应结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">699900</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Apple 苹果 iPhone 12 &quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;num&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;柳岩&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖南省衡阳市&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>idea build 项目卡住</title>
      <link href="/idea-build-problem/"/>
      <url>/idea-build-problem/</url>
      
        <content type="html"><![CDATA[<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>电脑：联想小新 Pro 16 2021</p><p>开发软件：</p><ul><li>IntelliJ IDEA 2020.3.2</li></ul><p>电脑软件：</p><ul><li>联想电脑管家 5.0.0.3292</li></ul><h2 id="状态描述"><a href="#状态描述" class="headerlink" title="状态描述"></a>状态描述</h2><img src="/idea-build-problem/status-des.png" class=""><h2 id="误操作"><a href="#误操作" class="headerlink" title="误操作"></a>误操作</h2><p>使用联想电脑管家，将 <code>Java SE Development Kit 8 Update 311</code> 的联网功能禁用掉了</p><img src="/idea-build-problem/network.png" class=""><img src="/idea-build-problem/operation.png" class=""><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>重新将 <code>Java SE Development Kit 8 Update 311</code> 的联网功能打开即可</p><img src="/idea-build-problem/solve.png" class="">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>雪崩问题及解决方案</title>
      <link href="/avalanche-problem/"/>
      <url>/avalanche-problem/</url>
      
        <content type="html"><![CDATA[<h2 id="雪崩问题"><a href="#雪崩问题" class="headerlink" title="雪崩问题"></a>雪崩问题</h2><p>微服务中，服务间调用关系错综复杂，一个微服务往往依赖于多个其它微服务。</p><p>服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务都不可用，那么当前服务也就不可用了。</p><p>那么，依赖于当前服务的其它服务随着时间的推移，最终也都会变的不可用，形成级联失败，雪崩就发生了：</p><img src="/avalanche-problem/principle.png" class="" title="雪崩问题原理图"><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="超时处理"><a href="#超时处理" class="headerlink" title="超时处理"></a>超时处理</h3><h3 id="仓壁模式"><a href="#仓壁模式" class="headerlink" title="仓壁模式"></a>仓壁模式</h3><h3 id="断路器"><a href="#断路器" class="headerlink" title="断路器"></a>断路器</h3><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis 持久化</title>
      <link href="/redis-persistence/"/>
      <url>/redis-persistence/</url>
      
        <content type="html"><![CDATA[<h2 id="RDB-持久化（默认方式）"><a href="#RDB-持久化（默认方式）" class="headerlink" title="RDB 持久化（默认方式）"></a>RDB 持久化（默认方式）</h2><p><strong>原理</strong>：在指定的时间间隔内将内存中的数据集<strong>快照</strong>写入磁盘。</p><p><strong>优点</strong>：</p><ol><li>只有一份 <code>RDB</code> 文件，可以随时备份。</li><li>比 <code>AOF</code> 文件小，加载效率高。</li><li>只提供 <code>fork</code> 子进程，不阻塞主进程，<code>IO</code> 操作比较少。</li></ol><h2 id="AOF-持久化"><a href="#AOF-持久化" class="headerlink" title="AOF 持久化"></a>AOF 持久化</h2><p><strong>原理</strong>：以<strong>日志</strong>的形式记录服务器所处理的每一个写操作，在 <code>redis</code> 服务器启动之初会读取该文件来重新构建数据库，以保证启动后数据库中的数据是完整的。</p><p><strong>优点</strong>：</p><ol><li>每次改动同步数据安全性好。</li><li><code>append</code> 方式追加日志，不会对旧日志文件产生影响。</li></ol><h2 id="无持久化"><a href="#无持久化" class="headerlink" title="无持久化"></a>无持久化</h2><p>我们可以通过配置的方式禁用 <code>redis</code> 服务器的持久化功能，这样我们就可以将 <code>redis</code> 视为一个功能加强版的 <code>memcached</code> 了</p><h2 id="同时应用-AOF-和-RDB（推荐用）"><a href="#同时应用-AOF-和-RDB（推荐用）" class="headerlink" title="同时应用 AOF 和 RDB（推荐用）"></a>同时应用 AOF 和 RDB（推荐用）</h2><p>用 <code>AOF</code> 来保证数据不丢失，作为恢复数据的第一选择。</p><p>用 <code>RDB</code> 来做不同程度的冷备，在 <code>AOF</code> 文件都丢失或者损坏不可用的时候，可以使用 <code>RDB</code> 进行快速的数据恢复。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>介绍 hexo-image-link 插件的使用</title>
      <link href="/hexo-image-link/"/>
      <url>/hexo-image-link/</url>
      
        <content type="html"><![CDATA[<h2 id="基于-Typora-与-MarkDown-的写作"><a href="#基于-Typora-与-MarkDown-的写作" class="headerlink" title="基于 Typora 与 MarkDown 的写作"></a>基于 Typora 与 MarkDown 的写作</h2><h3 id="Typora-设置"><a href="#Typora-设置" class="headerlink" title="Typora 设置"></a>Typora 设置</h3><p><code>偏好设置 -&gt; 图像 -&gt; 插入图片时 -&gt; 复制到指定路径</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./$&#123;filename&#125;</span><br></pre></td></tr></table></figure><p>当插入图片时，会生成一个和文件名相同的文件夹，并将图片存入这个文件夹内。</p><h3 id="Hexo-插件安装"><a href="#Hexo-插件安装" class="headerlink" title="Hexo 插件安装"></a>Hexo 插件安装</h3><h4 id="安装-hexo-renderer-marked"><a href="#安装-hexo-renderer-marked" class="headerlink" title="安装 hexo-renderer-marked"></a>安装 hexo-renderer-marked</h4><p>hexo-renderer-marked 是 Hexo 默认自带的 Markdown 渲染器，此步<strong>可忽略</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-marked</span><br></pre></td></tr></table></figure><p>之后更改根目录下的 <code>_config.yml</code> 配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="安装-hexo-image-link"><a href="#安装-hexo-image-link" class="headerlink" title="安装 hexo-image-link"></a>安装 hexo-image-link</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-image-link --save</span><br></pre></td></tr></table></figure><h3 id="路径是如何转化的？看以下实例"><a href="#路径是如何转化的？看以下实例" class="headerlink" title="路径是如何转化的？看以下实例"></a>路径是如何转化的？看以下实例</h3><p>文件名：<code>./readme.md</code></p><p>图片路径：<code>./readme/image.png</code></p><p>当插入图片 image.png 到 readme.md 中时，typora 的引用路径为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% asset_img "image.png" "" %}</span><br></pre></td></tr></table></figure><p>Hexo 发布后的引用路径为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./readme/image.png</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 使用小结</title>
      <link href="/git-use-summary/"/>
      <url>/git-use-summary/</url>
      
        <content type="html"><![CDATA[<h2 id="仓库初始化"><a href="#仓库初始化" class="headerlink" title="仓库初始化"></a>仓库初始化</h2><h3 id="master-分支何时出现？"><a href="#master-分支何时出现？" class="headerlink" title="master 分支何时出现？"></a>master 分支何时出现？</h3><ol><li>切换到 git-practice-warehouse 目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:/develop/git_repository_summary/git-practice-warehouse</span><br></pre></td></tr></table></figure><ol start="2"><li>初始化 git 仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ol start="3"><li>检查本地仓库分支，会发现什么都没有</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><ol start="4"><li>尝试切换到 master 分支，会报错</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">error: pathspec <span class="string">&#x27;master&#x27;</span> did not match any file(s) known to git</span><br></pre></td></tr></table></figure><ol start="5"><li>连接远程仓库。<code>注：建立连接之后查询远程仓库分支 git branch -r ，会发现查不到</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://gitee.com/MaySean/git-practice-warehouse.git</span><br></pre></td></tr></table></figure><ol start="6"><li>此时再次查看本地仓库分支，依然会发现什么都没有</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><ol start="7"><li>尝试切换到 master 分支，会报错</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">error: pathspec <span class="string">&#x27;master&#x27;</span> did not match any file(s) known to git</span><br></pre></td></tr></table></figure><ol start="8"><li>拉取远程仓库，会发现有如下提示</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line"></span><br><span class="line">remote: Enumerating objects: 6, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 6 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">From https://gitee.com/MaySean/git-practice-warehouse</span><br><span class="line"> * [new branch]      dev        -&gt; origin/dev</span><br><span class="line"> * [new branch]      master     -&gt; origin/master</span><br><span class="line">There is no tracking information <span class="keyword">for</span> the current branch.</span><br><span class="line">Please specify <span class="built_in">which</span> branch you want to merge with.</span><br><span class="line">See git-pull(1) <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to <span class="built_in">set</span> tracking information <span class="keyword">for</span> this branch you can <span class="keyword">do</span> so with:</span><br><span class="line"></span><br><span class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; master</span><br></pre></td></tr></table></figure><ol start="9"><li>此时再次查看本地仓库分支，依然会发现什么都没有。<code>注：pull 之后查询远程仓库分支 git branch -r ，会发现此时已经可以看到远程仓库的分支信息了</code>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><ol start="10"><li>关于提示的 git branch –set-upstream-to&#x3D;origin&#x2F;master master，该命令的作用是：可以<code>关联</code>分支，<code>关联</code>后，通过指令可以 pull 代码，不需要指定从哪个分支 pull。由于后面的 git checkout master 就已经将远程仓库的 master 分支，拉取到了本地仓库，所以此处不再使用</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git branch --set-upstream-to=origin/&lt;远程分支&gt; &lt;本地分支&gt;</span></span><br><span class="line">git branch --set-upstream-to=origin/master master</span><br></pre></td></tr></table></figure><ol start="11"><li>尝试切换到 master 分支，这次没有报错，而且此次操作也将远程仓库的 master 分支，拉取到了本地仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">Already on <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Branch <span class="string">&#x27;master&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;master&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br></pre></td></tr></table></figure><img src="/git-use-summary/local-master.png" class=""><ol start="12"><li>此时再次查看本地仓库分支，会看到 master 分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><ol start="13"><li>得出结论，使用 git init 的方式对仓库进行初始化，在第一次 pull 远程仓库之后，再次进行切换 master 分支，master 分支才会真的出现</li></ol><h3 id="有没有其他方式让本地仓库的-master-分支出现？"><a href="#有没有其他方式让本地仓库的-master-分支出现？" class="headerlink" title="有没有其他方式让本地仓库的 master 分支出现？"></a>有没有其他方式让本地仓库的 master 分支出现？</h3><p>答：有，在工作目录任意创建一个文件，然后进行 add -&gt; commit，在此之后，master 分支就会出现。<code>注：当我们与仓库建立连接之后，可以通过 git fetch 命令来提前查到分支</code></p><ol><li>拉取远程仓库，给出了警告，阅读提示</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line"></span><br><span class="line">warning: no common commits</span><br><span class="line">remote: Enumerating objects: 6, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 6 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">From https://gitee.com/MaySean/git-practice-warehouse</span><br><span class="line"> * [new branch]      dev        -&gt; origin/dev</span><br><span class="line"> * [new branch]      master     -&gt; origin/master</span><br><span class="line">There is no tracking information <span class="keyword">for</span> the current branch.</span><br><span class="line">Please specify <span class="built_in">which</span> branch you want to merge with.</span><br><span class="line">See git-pull(1) <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to <span class="built_in">set</span> tracking information <span class="keyword">for</span> this branch you can <span class="keyword">do</span> so with:</span><br><span class="line"></span><br><span class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; master</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取 master 分支，发现失败，原因是两个分支（本地仓库 master 和 远程仓库 master）是两个不同的版本，具有不同的提交历史</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line">From https://gitee.com/MaySean/git-practice-warehouse</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure><ol start="3"><li>解决方式，强制合并，后面加上 –allow-unrelated-histories</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br><span class="line">From https://gitee.com/MaySean/git-practice-warehouse</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> README.en.md | 36 ++++++++++++++++++++++++++++++++++++</span><br><span class="line"> README.md    | 39 +++++++++++++++++++++++++++++++++++++++</span><br><span class="line"> 2 files changed, 75 insertions(+)</span><br><span class="line"> create mode 100644 README.en.md</span><br><span class="line"> create mode 100644 README.md</span><br></pre></td></tr></table></figure><h3 id="如何拉取远程仓库的分支到本地仓库？"><a href="#如何拉取远程仓库的分支到本地仓库？" class="headerlink" title="如何拉取远程仓库的分支到本地仓库？"></a>如何拉取远程仓库的分支到本地仓库？</h3><img src="/git-use-summary/long-master.png" class=""><img src="/git-use-summary/long-dev.png" class=""><p><strong>实验场景：</strong>如上所说，我们此时本地仓库只有一个 master 分支，而远程仓库有 master 和 dev 分支，之前我们已经通过上面的方式将 远程仓库的 master 分支拉取到了本地，那么我们如何能将远程仓库的 dev 分支拉取到本地呢？</p><p>当前条件：本地仓库没有 dev 分支</p><p><strong>方式一：</strong>尝试在本地仓库创建 dev 分支，再进行拉取</p><ol><li>尝试在本地仓库创建 dev 分支，当前分支 <code>master</code> 则为分支起点</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br></pre></td></tr></table></figure><ol start="2"><li>切换分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">Switched to branch <span class="string">&#x27;dev&#x27;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>再进行拉取，可以看到，原本地仓库已有的 README.en.md 被删除掉了，远程仓库覆盖本地仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev</span><br><span class="line">From https://gitee.com/MaySean/git-practice-warehouse</span><br><span class="line"> * branch            dev        -&gt; FETCH_HEAD</span><br><span class="line">Updating 62244d9..9262f9c</span><br><span class="line">Fast-forward</span><br><span class="line"> README.en.md | 36 ------------------------------------</span><br><span class="line"> 1 file changed, 36 deletions(-)</span><br><span class="line"> delete mode 100644 README.en.md</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong>在本地创建分支 dev 并切换到该分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git checkout -b dev(本地分支名称) origin/dev(远程分支名称)</span></span><br><span class="line">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure><p><strong>拓展：</strong>可以使用 <code>git branch -avvv</code> 查看</p><ul><li>a：查看所有分支</li><li>v：每个分支的最后一个提交（commit）</li><li>vv：本地分支与远程分支的关联关系</li></ul><h2 id="Git-设置-Clash-代理"><a href="#Git-设置-Clash-代理" class="headerlink" title="Git 设置 Clash 代理"></a>Git 设置 Clash 代理</h2><p>要为 Git 设置 Clash 代理，可以通过配置 Git 的全局代理设置来实现。以下是详细步骤：</p><h3 id="确认-Clash-代理设置"><a href="#确认-Clash-代理设置" class="headerlink" title="确认 Clash 代理设置"></a>确认 Clash 代理设置</h3><p>首先，确保 Clash 代理已经正确运行，并获取代理的地址和端口。假设代理地址是 <code>127.0.0.1</code>，HTTP 代理端口是 <code>7890</code>，SOCKS5 代理端口是 <code>7891</code>。</p><h3 id="配置-Git-使用-HTTP-代理"><a href="#配置-Git-使用-HTTP-代理" class="headerlink" title="配置 Git 使用 HTTP 代理"></a>配置 Git 使用 HTTP 代理</h3><p>在命令行中运行以下命令来配置 Git 使用 HTTP 代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global https.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><h3 id="配置-Git-使用-SOCKS5-代理（可选）"><a href="#配置-Git-使用-SOCKS5-代理（可选）" class="headerlink" title="配置 Git 使用 SOCKS5 代理（可选）"></a>配置 Git 使用 SOCKS5 代理（可选）</h3><p>如果你更喜欢使用 SOCKS5 代理，可以运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy socks5://127.0.0.1:7891</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:7891</span><br></pre></td></tr></table></figure><h3 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h3><p>运行以下命令来验证 Git 代理配置是否生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure><h3 id="测试克隆仓库"><a href="#测试克隆仓库" class="headerlink" title="测试克隆仓库"></a>测试克隆仓库</h3><p>尝试克隆仓库以确保代理配置正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Stability-AI/stablediffusion.git D:\stable-diffusion-webui\repositories\stable-diffusion-stability-ai</span><br></pre></td></tr></table></figure><h3 id="取消代理配置（如果需要）"><a href="#取消代理配置（如果需要）" class="headerlink" title="取消代理配置（如果需要）"></a>取消代理配置（如果需要）</h3><p>如果你想取消代理设置，可以运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
